Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> cpp
Rule 1     cpp -> decl_classe
Rule 2     cpp -> decl_funcao
Rule 3     cpp -> decl_variavel
Rule 4     cpp -> typedef
Rule 5     cpp -> using
Rule 6     cpp -> decl_classe cpp
Rule 7     cpp -> decl_funcao cpp
Rule 8     cpp -> decl_variavel cpp
Rule 9     cpp -> typedef cpp
Rule 10    cpp -> using cpp
Rule 11    decl_classe -> CLASS ID body_class PONTO_VIRG
Rule 12    body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA
Rule 13    body_class -> CHAVE_ABRE CHAVE_FECHA
Rule 14    content_class -> decl_variavel
Rule 15    content_class -> decl_funcao
Rule 16    content_class -> STATIC decl_variavel
Rule 17    content_class -> STATIC decl_funcao
Rule 18    content_class -> decl_variavel content_class
Rule 19    content_class -> decl_funcao content_class
Rule 20    content_class -> STATIC decl_variavel content_class
Rule 21    content_class -> STATIC decl_funcao content_class
Rule 22    decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body
Rule 23    decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body
Rule 24    decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body
Rule 25    decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body
Rule 26    decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body
Rule 27    decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body
Rule 28    parametros -> tipo ID
Rule 29    parametros -> tipo ID VIRGULA parametros
Rule 30    decl_variavel -> tipo ID PONTO_VIRG
Rule 31    decl_variavel -> tipo ID RECEBER exp PONTO_VIRG
Rule 32    decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG
Rule 33    decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
Rule 34    decl_variavel_n -> VIRGULA ID decl_variavel_n
Rule 35    decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n
Rule 36    decl_variavel_n -> VIRGULA ID RECEBER exp
Rule 37    decl_variavel_n -> VIRGULA ID
Rule 38    typedef -> TYPEDEF tipo ID PONTO_VIRG
Rule 39    typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
Rule 40    decl_typedef_n -> VIRGULA ID decl_typedef_n
Rule 41    decl_typedef_n -> VIRGULA ID
Rule 42    using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
Rule 43    using -> USING ID ID PONTO_VIRG
Rule 44    body -> CHAVE_ABRE comandos CHAVE_FECHA
Rule 45    body -> CHAVE_ABRE CHAVE_FECHA
Rule 46    comandos -> comando
Rule 47    comandos -> comando comandos
Rule 48    comando -> condicional_1
Rule 49    comando -> condicional_2
Rule 50    exp -> exp RECEBER exp_1
Rule 51    exp -> exp_1
Rule 52    exp_1 -> exp_1 OP_OU exp_2
Rule 53    exp_1 -> exp_1 OR exp_2
Rule 54    exp_1 -> exp_2
Rule 55    exp_2 -> exp_2 OP_E exp_3
Rule 56    exp_2 -> exp_2 AND exp_3
Rule 57    exp_2 -> exp_3
Rule 58    exp_3 -> exp_3 OP_OU_EX exp_4
Rule 59    exp_3 -> exp_3 XOR exp_4
Rule 60    exp_3 -> exp_4
Rule 61    exp_4 -> exp_4 IGUAL exp_5
Rule 62    exp_4 -> exp_4 DIFERENTE exp_5
Rule 63    exp_4 -> exp_5
Rule 64    exp_5 -> exp_5 MENOR_Q exp_6
Rule 65    exp_5 -> exp_5 MAIOR_Q exp_6
Rule 66    exp_5 -> exp_5 MAIOR_IGUAL exp_6
Rule 67    exp_5 -> exp_5 MENOR_IGUAL exp_6
Rule 68    exp_5 -> exp_6
Rule 69    exp_6 -> exp_6 SOMA exp_7
Rule 70    exp_6 -> exp_6 SUB exp_7
Rule 71    exp_6 -> exp_7
Rule 72    exp_7 -> exp_7 MULT exp_8
Rule 73    exp_7 -> exp_7 DIV exp_8
Rule 74    exp_7 -> exp_7 MODULO exp_8
Rule 75    exp_7 -> exp_8
Rule 76    exp_8 -> OP_NOT exp_9
Rule 77    exp_8 -> NOT exp_9
Rule 78    exp_8 -> exp_9 MAIS_MAIS
Rule 79    exp_8 -> exp_9 MENOS_MENOS
Rule 80    exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
Rule 81    exp_8 -> NEW tipo
Rule 82    exp_8 -> exp_9
Rule 83    exp_9 -> exp_9 PONTO exp_10
Rule 84    exp_9 -> exp_9 SETA exp_10
Rule 85    exp_9 -> exp_10
Rule 86    exp_10 -> ID
Rule 87    exp_10 -> INT_V
Rule 88    exp_10 -> TRUE
Rule 89    exp_10 -> FALSE
Rule 90    exp_10 -> chamada_funcao
Rule 91    exp_10 -> STRING_V
Rule 92    exp_10 -> THIS
Rule 93    exp_10 -> PARENT_ABRE exp PARENT_FECHA
Rule 94    chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA
Rule 95    chamada_funcao -> ID PARENT_ABRE PARENT_FECHA
Rule 96    chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA
Rule 97    parametros_chamada -> ID VIRGULA parametros_chamada
Rule 98    parametros_chamada -> ID
Rule 99    condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if
Rule 100   condicional_1 -> exp PONTO_VIRG
Rule 101   condicional_1 -> decl_variavel
Rule 102   condicional_1 -> typedef
Rule 103   condicional_1 -> using
Rule 104   condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body
Rule 105   condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body
Rule 106   condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
Rule 107   condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
Rule 108   condicional_1 -> RETURN exp PONTO_VIRG
Rule 109   condicional_1 -> RETURN PONTO_VIRG
Rule 110   condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body
Rule 111   condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando
Rule 112   condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
Rule 113   condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
Rule 114   rest_if -> condicional_1 ELSE condicional_1
Rule 115   rest_if -> body ELSE body
Rule 116   rest_if -> condicional_1 ELSE body
Rule 117   rest_if -> body ELSE condicional_1
Rule 118   for_log -> decl_variavel PONTO_VIRG
Rule 119   for_log -> decl_variavel exp PONTO_VIRG
Rule 120   for_log -> decl_variavel exp PONTO_VIRG exp
Rule 121   for_log -> decl_variavel PONTO_VIRG exp
Rule 122   for_log -> exp PONTO_VIRG PONTO_VIRG exp
Rule 123   for_log -> exp PONTO_VIRG exp PONTO_VIRG exp
Rule 124   for_log -> exp PONTO_VIRG PONTO_VIRG
Rule 125   for_log -> exp PONTO_VIRG exp PONTO_VIRG
Rule 126   for_log -> PONTO_VIRG exp PONTO_VIRG exp
Rule 127   for_log -> PONTO_VIRG exp PONTO_VIRG
Rule 128   for_log -> PONTO_VIRG PONTO_VIRG exp
Rule 129   for_log -> PONTO_VIRG PONTO_VIRG
Rule 130   tipo -> INT
Rule 131   tipo -> BOOL
Rule 132   tipo -> ID
Rule 133   tipo -> STRING

Terminals, with rules where they appear

2X_DOIS_PONTOS       : 42
AND                  : 56
BOOL                 : 131
CHAVE_ABRE           : 12 13 44 45
CHAVE_FECHA          : 12 13 44 45
CLASS                : 11
DIFERENTE            : 62
DIV                  : 73
DOIS_PONTOS          : 12
ELSE                 : 112 113 114 115 116 117
FALSE                : 89
FOR                  : 105 107
ID                   : 11 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 42 43 43 86 94 95 97 98 132
IF                   : 99 110 111 112 113
IGUAL                : 61
INT                  : 130
INT_V                : 87
MAIOR_IGUAL          : 66
MAIOR_Q              : 65
MAIS_MAIS            : 78
MENOR_IGUAL          : 67
MENOR_Q              : 64
MENOS_MENOS          : 79
MODULO               : 74
MULT                 : 72
NEW                  : 81
NOT                  : 77
OP_E                 : 55
OP_NOT               : 76
OP_OU                : 52
OP_OU_EX             : 58
OR                   : 53
PARENT_ABRE          : 22 23 24 25 26 27 80 93 94 95 96 99 104 105 106 107 110 111 112 113
PARENT_FECHA         : 22 23 24 25 26 27 80 93 94 95 96 99 104 105 106 107 110 111 112 113
PONTO                : 83
PONTO_VIRG           : 11 30 31 32 33 38 39 42 43 100 108 109 118 119 120 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129
PUBLIC               : 12
RECEBER              : 31 33 35 36 50
RETURN               : 108 109
SETA                 : 84
SIZEOF               : 80
SOMA                 : 69
STATIC               : 16 17 20 21
STRING               : 133
STRING_V             : 91
SUB                  : 70
THIS                 : 92
TRUE                 : 88
TYPEDEF              : 38 39
TYPEID               : 96
USING                : 42 43
VIRGULA              : 29 34 35 36 37 40 41 97
VOID                 : 24 25 26 27 27
WHILE                : 104 106
XOR                  : 59
error                : 

Nonterminals, with rules where they appear

body                 : 22 23 24 25 26 27 104 105 110 113 115 115 116 117
body_class           : 11
chamada_funcao       : 90
comando              : 46 47 111
comandos             : 44 47
condicional_1        : 48 106 107 112 114 114 116 117
condicional_2        : 49 112 113
content_class        : 12 18 19 20 21
cpp                  : 6 7 8 9 10 0
decl_classe          : 1 6
decl_funcao          : 2 7 15 17 19 21
decl_typedef_n       : 39 40
decl_variavel        : 3 8 14 16 18 20 101 118 119 120 121
decl_variavel_n      : 32 33 34 35
exp                  : 31 33 35 36 50 93 96 99 100 104 106 108 110 111 112 113 119 120 120 121 122 122 123 123 123 124 125 125 126 126 127 128
exp_1                : 50 51 52 53
exp_10               : 83 84 85
exp_2                : 52 53 54 55 56
exp_3                : 55 56 57 58 59
exp_4                : 58 59 60 61 62
exp_5                : 61 62 63 64 65 66 67
exp_6                : 64 65 66 67 68 69 70
exp_7                : 69 70 71 72 73 74
exp_8                : 72 73 74 75
exp_9                : 76 77 78 79 80 82 83 84
for_log              : 105 107
parametros           : 22 25 29
parametros_chamada   : 94 97
rest_if              : 99
tipo                 : 22 23 24 28 29 30 31 32 33 38 39 81
typedef              : 4 9 102
using                : 5 10 103

Parsing method: LALR

state 0

    (0) S' -> . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . decl_classe cpp
    (7) cpp -> . decl_funcao cpp
    (8) cpp -> . decl_variavel cpp
    (9) cpp -> . typedef cpp
    (10) cpp -> . using cpp
    (11) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    CLASS           shift and go to state 7
    VOID            shift and go to state 10
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    cpp                            shift and go to state 1
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    tipo                           shift and go to state 9

state 1

    (0) S' -> cpp .



state 2

    (1) cpp -> decl_classe .
    (6) cpp -> decl_classe . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . decl_classe cpp
    (7) cpp -> . decl_funcao cpp
    (8) cpp -> . decl_variavel cpp
    (9) cpp -> . typedef cpp
    (10) cpp -> . using cpp
    (11) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    $end            reduce using rule 1 (cpp -> decl_classe .)
    CLASS           shift and go to state 7
    VOID            shift and go to state 10
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    decl_classe                    shift and go to state 2
    cpp                            shift and go to state 16
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    tipo                           shift and go to state 9

state 3

    (2) cpp -> decl_funcao .
    (7) cpp -> decl_funcao . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . decl_classe cpp
    (7) cpp -> . decl_funcao cpp
    (8) cpp -> . decl_variavel cpp
    (9) cpp -> . typedef cpp
    (10) cpp -> . using cpp
    (11) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    $end            reduce using rule 2 (cpp -> decl_funcao .)
    CLASS           shift and go to state 7
    VOID            shift and go to state 10
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    decl_funcao                    shift and go to state 3
    cpp                            shift and go to state 17
    decl_classe                    shift and go to state 2
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    tipo                           shift and go to state 9

state 4

    (3) cpp -> decl_variavel .
    (8) cpp -> decl_variavel . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . decl_classe cpp
    (7) cpp -> . decl_funcao cpp
    (8) cpp -> . decl_variavel cpp
    (9) cpp -> . typedef cpp
    (10) cpp -> . using cpp
    (11) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    $end            reduce using rule 3 (cpp -> decl_variavel .)
    CLASS           shift and go to state 7
    VOID            shift and go to state 10
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    decl_variavel                  shift and go to state 4
    cpp                            shift and go to state 18
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    tipo                           shift and go to state 9

state 5

    (4) cpp -> typedef .
    (9) cpp -> typedef . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . decl_classe cpp
    (7) cpp -> . decl_funcao cpp
    (8) cpp -> . decl_variavel cpp
    (9) cpp -> . typedef cpp
    (10) cpp -> . using cpp
    (11) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    $end            reduce using rule 4 (cpp -> typedef .)
    CLASS           shift and go to state 7
    VOID            shift and go to state 10
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    typedef                        shift and go to state 5
    cpp                            shift and go to state 19
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    using                          shift and go to state 6
    tipo                           shift and go to state 9

state 6

    (5) cpp -> using .
    (10) cpp -> using . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . decl_classe cpp
    (7) cpp -> . decl_funcao cpp
    (8) cpp -> . decl_variavel cpp
    (9) cpp -> . typedef cpp
    (10) cpp -> . using cpp
    (11) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    $end            reduce using rule 5 (cpp -> using .)
    CLASS           shift and go to state 7
    VOID            shift and go to state 10
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    using                          shift and go to state 6
    cpp                            shift and go to state 20
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    tipo                           shift and go to state 9

state 7

    (11) decl_classe -> CLASS . ID body_class PONTO_VIRG

    ID              shift and go to state 21


state 8

    (132) tipo -> ID .

    ID              reduce using rule 132 (tipo -> ID .)
    MULT            reduce using rule 132 (tipo -> ID .)
    DIV             reduce using rule 132 (tipo -> ID .)
    MODULO          reduce using rule 132 (tipo -> ID .)
    SOMA            reduce using rule 132 (tipo -> ID .)
    SUB             reduce using rule 132 (tipo -> ID .)
    MENOR_Q         reduce using rule 132 (tipo -> ID .)
    MAIOR_Q         reduce using rule 132 (tipo -> ID .)
    MAIOR_IGUAL     reduce using rule 132 (tipo -> ID .)
    MENOR_IGUAL     reduce using rule 132 (tipo -> ID .)
    IGUAL           reduce using rule 132 (tipo -> ID .)
    DIFERENTE       reduce using rule 132 (tipo -> ID .)
    OP_OU_EX        reduce using rule 132 (tipo -> ID .)
    XOR             reduce using rule 132 (tipo -> ID .)
    OP_E            reduce using rule 132 (tipo -> ID .)
    AND             reduce using rule 132 (tipo -> ID .)
    OP_OU           reduce using rule 132 (tipo -> ID .)
    OR              reduce using rule 132 (tipo -> ID .)
    PONTO_VIRG      reduce using rule 132 (tipo -> ID .)
    RECEBER         reduce using rule 132 (tipo -> ID .)
    VIRGULA         reduce using rule 132 (tipo -> ID .)
    PARENT_FECHA    reduce using rule 132 (tipo -> ID .)


state 9

    (22) decl_funcao -> tipo . ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> tipo . ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> tipo . ID PARENT_ABRE VOID PARENT_FECHA body
    (30) decl_variavel -> tipo . ID PONTO_VIRG
    (31) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> tipo . ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n PONTO_VIRG

    ID              shift and go to state 22


state 10

    (25) decl_funcao -> VOID . ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> VOID . ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> VOID . ID PARENT_ABRE VOID PARENT_FECHA body

    ID              shift and go to state 23


state 11

    (38) typedef -> TYPEDEF . tipo ID PONTO_VIRG
    (39) typedef -> TYPEDEF . tipo ID decl_typedef_n PONTO_VIRG
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    tipo                           shift and go to state 24

state 12

    (42) using -> USING . ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> USING . ID ID PONTO_VIRG

    ID              shift and go to state 25


state 13

    (130) tipo -> INT .

    ID              reduce using rule 130 (tipo -> INT .)
    MULT            reduce using rule 130 (tipo -> INT .)
    DIV             reduce using rule 130 (tipo -> INT .)
    MODULO          reduce using rule 130 (tipo -> INT .)
    SOMA            reduce using rule 130 (tipo -> INT .)
    SUB             reduce using rule 130 (tipo -> INT .)
    MENOR_Q         reduce using rule 130 (tipo -> INT .)
    MAIOR_Q         reduce using rule 130 (tipo -> INT .)
    MAIOR_IGUAL     reduce using rule 130 (tipo -> INT .)
    MENOR_IGUAL     reduce using rule 130 (tipo -> INT .)
    IGUAL           reduce using rule 130 (tipo -> INT .)
    DIFERENTE       reduce using rule 130 (tipo -> INT .)
    OP_OU_EX        reduce using rule 130 (tipo -> INT .)
    XOR             reduce using rule 130 (tipo -> INT .)
    OP_E            reduce using rule 130 (tipo -> INT .)
    AND             reduce using rule 130 (tipo -> INT .)
    OP_OU           reduce using rule 130 (tipo -> INT .)
    OR              reduce using rule 130 (tipo -> INT .)
    PONTO_VIRG      reduce using rule 130 (tipo -> INT .)
    RECEBER         reduce using rule 130 (tipo -> INT .)
    VIRGULA         reduce using rule 130 (tipo -> INT .)
    PARENT_FECHA    reduce using rule 130 (tipo -> INT .)


state 14

    (131) tipo -> BOOL .

    ID              reduce using rule 131 (tipo -> BOOL .)
    MULT            reduce using rule 131 (tipo -> BOOL .)
    DIV             reduce using rule 131 (tipo -> BOOL .)
    MODULO          reduce using rule 131 (tipo -> BOOL .)
    SOMA            reduce using rule 131 (tipo -> BOOL .)
    SUB             reduce using rule 131 (tipo -> BOOL .)
    MENOR_Q         reduce using rule 131 (tipo -> BOOL .)
    MAIOR_Q         reduce using rule 131 (tipo -> BOOL .)
    MAIOR_IGUAL     reduce using rule 131 (tipo -> BOOL .)
    MENOR_IGUAL     reduce using rule 131 (tipo -> BOOL .)
    IGUAL           reduce using rule 131 (tipo -> BOOL .)
    DIFERENTE       reduce using rule 131 (tipo -> BOOL .)
    OP_OU_EX        reduce using rule 131 (tipo -> BOOL .)
    XOR             reduce using rule 131 (tipo -> BOOL .)
    OP_E            reduce using rule 131 (tipo -> BOOL .)
    AND             reduce using rule 131 (tipo -> BOOL .)
    OP_OU           reduce using rule 131 (tipo -> BOOL .)
    OR              reduce using rule 131 (tipo -> BOOL .)
    PONTO_VIRG      reduce using rule 131 (tipo -> BOOL .)
    RECEBER         reduce using rule 131 (tipo -> BOOL .)
    VIRGULA         reduce using rule 131 (tipo -> BOOL .)
    PARENT_FECHA    reduce using rule 131 (tipo -> BOOL .)


state 15

    (133) tipo -> STRING .

    ID              reduce using rule 133 (tipo -> STRING .)
    MULT            reduce using rule 133 (tipo -> STRING .)
    DIV             reduce using rule 133 (tipo -> STRING .)
    MODULO          reduce using rule 133 (tipo -> STRING .)
    SOMA            reduce using rule 133 (tipo -> STRING .)
    SUB             reduce using rule 133 (tipo -> STRING .)
    MENOR_Q         reduce using rule 133 (tipo -> STRING .)
    MAIOR_Q         reduce using rule 133 (tipo -> STRING .)
    MAIOR_IGUAL     reduce using rule 133 (tipo -> STRING .)
    MENOR_IGUAL     reduce using rule 133 (tipo -> STRING .)
    IGUAL           reduce using rule 133 (tipo -> STRING .)
    DIFERENTE       reduce using rule 133 (tipo -> STRING .)
    OP_OU_EX        reduce using rule 133 (tipo -> STRING .)
    XOR             reduce using rule 133 (tipo -> STRING .)
    OP_E            reduce using rule 133 (tipo -> STRING .)
    AND             reduce using rule 133 (tipo -> STRING .)
    OP_OU           reduce using rule 133 (tipo -> STRING .)
    OR              reduce using rule 133 (tipo -> STRING .)
    PONTO_VIRG      reduce using rule 133 (tipo -> STRING .)
    RECEBER         reduce using rule 133 (tipo -> STRING .)
    VIRGULA         reduce using rule 133 (tipo -> STRING .)
    PARENT_FECHA    reduce using rule 133 (tipo -> STRING .)


state 16

    (6) cpp -> decl_classe cpp .

    $end            reduce using rule 6 (cpp -> decl_classe cpp .)


state 17

    (7) cpp -> decl_funcao cpp .

    $end            reduce using rule 7 (cpp -> decl_funcao cpp .)


state 18

    (8) cpp -> decl_variavel cpp .

    $end            reduce using rule 8 (cpp -> decl_variavel cpp .)


state 19

    (9) cpp -> typedef cpp .

    $end            reduce using rule 9 (cpp -> typedef cpp .)


state 20

    (10) cpp -> using cpp .

    $end            reduce using rule 10 (cpp -> using cpp .)


state 21

    (11) decl_classe -> CLASS ID . body_class PONTO_VIRG
    (12) body_class -> . CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA
    (13) body_class -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 27

    body_class                     shift and go to state 26

state 22

    (22) decl_funcao -> tipo ID . PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> tipo ID . PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> tipo ID . PARENT_ABRE VOID PARENT_FECHA body
    (30) decl_variavel -> tipo ID . PONTO_VIRG
    (31) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (32) decl_variavel -> tipo ID . decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n PONTO_VIRG
    (34) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (35) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (36) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (37) decl_variavel_n -> . VIRGULA ID

    PARENT_ABRE     shift and go to state 28
    PONTO_VIRG      shift and go to state 29
    RECEBER         shift and go to state 30
    VIRGULA         shift and go to state 32

    decl_variavel_n                shift and go to state 31

state 23

    (25) decl_funcao -> VOID ID . PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> VOID ID . PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> VOID ID . PARENT_ABRE VOID PARENT_FECHA body

    PARENT_ABRE     shift and go to state 33


state 24

    (38) typedef -> TYPEDEF tipo . ID PONTO_VIRG
    (39) typedef -> TYPEDEF tipo . ID decl_typedef_n PONTO_VIRG

    ID              shift and go to state 34


state 25

    (42) using -> USING ID . 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> USING ID . ID PONTO_VIRG

    2X_DOIS_PONTOS  shift and go to state 36
    ID              shift and go to state 35


state 26

    (11) decl_classe -> CLASS ID body_class . PONTO_VIRG

    PONTO_VIRG      shift and go to state 37


state 27

    (12) body_class -> CHAVE_ABRE . PUBLIC DOIS_PONTOS content_class CHAVE_FECHA
    (13) body_class -> CHAVE_ABRE . CHAVE_FECHA

    PUBLIC          shift and go to state 38
    CHAVE_FECHA     shift and go to state 39


state 28

    (22) decl_funcao -> tipo ID PARENT_ABRE . parametros PARENT_FECHA body
    (23) decl_funcao -> tipo ID PARENT_ABRE . PARENT_FECHA body
    (24) decl_funcao -> tipo ID PARENT_ABRE . VOID PARENT_FECHA body
    (28) parametros -> . tipo ID
    (29) parametros -> . tipo ID VIRGULA parametros
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    PARENT_FECHA    shift and go to state 42
    VOID            shift and go to state 43
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    tipo                           shift and go to state 40
    parametros                     shift and go to state 41

state 29

    (30) decl_variavel -> tipo ID PONTO_VIRG .

    CLASS           reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    VOID            reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    USING           reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    INT             reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    BOOL            reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    ID              reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    STRING          reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    $end            reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    STATIC          reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    IF              reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    WHILE           reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    FOR             reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    RETURN          reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    OP_NOT          reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    NOT             reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    SIZEOF          reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    NEW             reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    INT_V           reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    TRUE            reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    FALSE           reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    STRING_V        reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    THIS            reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    TYPEID          reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)
    ELSE            reduce using rule 30 (decl_variavel -> tipo ID PONTO_VIRG .)


state 30

    (31) decl_variavel -> tipo ID RECEBER . exp PONTO_VIRG
    (33) decl_variavel -> tipo ID RECEBER . exp decl_variavel_n PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 45
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 31

    (32) decl_variavel -> tipo ID decl_variavel_n . PONTO_VIRG

    PONTO_VIRG      shift and go to state 68


state 32

    (34) decl_variavel_n -> VIRGULA . ID decl_variavel_n
    (35) decl_variavel_n -> VIRGULA . ID RECEBER exp decl_variavel_n
    (36) decl_variavel_n -> VIRGULA . ID RECEBER exp
    (37) decl_variavel_n -> VIRGULA . ID

    ID              shift and go to state 69


state 33

    (25) decl_funcao -> VOID ID PARENT_ABRE . parametros PARENT_FECHA body
    (26) decl_funcao -> VOID ID PARENT_ABRE . PARENT_FECHA body
    (27) decl_funcao -> VOID ID PARENT_ABRE . VOID PARENT_FECHA body
    (28) parametros -> . tipo ID
    (29) parametros -> . tipo ID VIRGULA parametros
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    PARENT_FECHA    shift and go to state 72
    VOID            shift and go to state 70
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    parametros                     shift and go to state 71
    tipo                           shift and go to state 40

state 34

    (38) typedef -> TYPEDEF tipo ID . PONTO_VIRG
    (39) typedef -> TYPEDEF tipo ID . decl_typedef_n PONTO_VIRG
    (40) decl_typedef_n -> . VIRGULA ID decl_typedef_n
    (41) decl_typedef_n -> . VIRGULA ID

    PONTO_VIRG      shift and go to state 73
    VIRGULA         shift and go to state 75

    decl_typedef_n                 shift and go to state 74

state 35

    (43) using -> USING ID ID . PONTO_VIRG

    PONTO_VIRG      shift and go to state 76


state 36

    (42) using -> USING ID 2X_DOIS_PONTOS . ID PONTO_VIRG

    ID              shift and go to state 77


state 37

    (11) decl_classe -> CLASS ID body_class PONTO_VIRG .

    CLASS           reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    VOID            reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    TYPEDEF         reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    USING           reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    INT             reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    BOOL            reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    ID              reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    STRING          reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    $end            reduce using rule 11 (decl_classe -> CLASS ID body_class PONTO_VIRG .)


state 38

    (12) body_class -> CHAVE_ABRE PUBLIC . DOIS_PONTOS content_class CHAVE_FECHA

    DOIS_PONTOS     shift and go to state 78


state 39

    (13) body_class -> CHAVE_ABRE CHAVE_FECHA .

    PONTO_VIRG      reduce using rule 13 (body_class -> CHAVE_ABRE CHAVE_FECHA .)


state 40

    (28) parametros -> tipo . ID
    (29) parametros -> tipo . ID VIRGULA parametros

    ID              shift and go to state 79


state 41

    (22) decl_funcao -> tipo ID PARENT_ABRE parametros . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 80


state 42

    (23) decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA . body
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 82

    body                           shift and go to state 81

state 43

    (24) decl_funcao -> tipo ID PARENT_ABRE VOID . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 83


state 44

    (86) exp_10 -> ID .
    (94) chamada_funcao -> ID . PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> ID . PARENT_ABRE PARENT_FECHA

    MAIS_MAIS       reduce using rule 86 (exp_10 -> ID .)
    MENOS_MENOS     reduce using rule 86 (exp_10 -> ID .)
    PONTO           reduce using rule 86 (exp_10 -> ID .)
    SETA            reduce using rule 86 (exp_10 -> ID .)
    MULT            reduce using rule 86 (exp_10 -> ID .)
    DIV             reduce using rule 86 (exp_10 -> ID .)
    MODULO          reduce using rule 86 (exp_10 -> ID .)
    SOMA            reduce using rule 86 (exp_10 -> ID .)
    SUB             reduce using rule 86 (exp_10 -> ID .)
    MENOR_Q         reduce using rule 86 (exp_10 -> ID .)
    MAIOR_Q         reduce using rule 86 (exp_10 -> ID .)
    MAIOR_IGUAL     reduce using rule 86 (exp_10 -> ID .)
    MENOR_IGUAL     reduce using rule 86 (exp_10 -> ID .)
    IGUAL           reduce using rule 86 (exp_10 -> ID .)
    DIFERENTE       reduce using rule 86 (exp_10 -> ID .)
    OP_OU_EX        reduce using rule 86 (exp_10 -> ID .)
    XOR             reduce using rule 86 (exp_10 -> ID .)
    OP_E            reduce using rule 86 (exp_10 -> ID .)
    AND             reduce using rule 86 (exp_10 -> ID .)
    OP_OU           reduce using rule 86 (exp_10 -> ID .)
    OR              reduce using rule 86 (exp_10 -> ID .)
    PONTO_VIRG      reduce using rule 86 (exp_10 -> ID .)
    RECEBER         reduce using rule 86 (exp_10 -> ID .)
    VIRGULA         reduce using rule 86 (exp_10 -> ID .)
    PARENT_FECHA    reduce using rule 86 (exp_10 -> ID .)
    PARENT_ABRE     shift and go to state 84


state 45

    (31) decl_variavel -> tipo ID RECEBER exp . PONTO_VIRG
    (33) decl_variavel -> tipo ID RECEBER exp . decl_variavel_n PONTO_VIRG
    (50) exp -> exp . RECEBER exp_1
    (34) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (35) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (36) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (37) decl_variavel_n -> . VIRGULA ID

    PONTO_VIRG      shift and go to state 86
    RECEBER         shift and go to state 85
    VIRGULA         shift and go to state 32

    decl_variavel_n                shift and go to state 87

state 46

    (51) exp -> exp_1 .
    (52) exp_1 -> exp_1 . OP_OU exp_2
    (53) exp_1 -> exp_1 . OR exp_2

    PONTO_VIRG      reduce using rule 51 (exp -> exp_1 .)
    RECEBER         reduce using rule 51 (exp -> exp_1 .)
    VIRGULA         reduce using rule 51 (exp -> exp_1 .)
    PARENT_FECHA    reduce using rule 51 (exp -> exp_1 .)
    OP_OU           shift and go to state 88
    OR              shift and go to state 89


state 47

    (54) exp_1 -> exp_2 .
    (55) exp_2 -> exp_2 . OP_E exp_3
    (56) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 54 (exp_1 -> exp_2 .)
    OR              reduce using rule 54 (exp_1 -> exp_2 .)
    PONTO_VIRG      reduce using rule 54 (exp_1 -> exp_2 .)
    RECEBER         reduce using rule 54 (exp_1 -> exp_2 .)
    VIRGULA         reduce using rule 54 (exp_1 -> exp_2 .)
    PARENT_FECHA    reduce using rule 54 (exp_1 -> exp_2 .)
    OP_E            shift and go to state 90
    AND             shift and go to state 91


state 48

    (57) exp_2 -> exp_3 .
    (58) exp_3 -> exp_3 . OP_OU_EX exp_4
    (59) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 57 (exp_2 -> exp_3 .)
    AND             reduce using rule 57 (exp_2 -> exp_3 .)
    OP_OU           reduce using rule 57 (exp_2 -> exp_3 .)
    OR              reduce using rule 57 (exp_2 -> exp_3 .)
    PONTO_VIRG      reduce using rule 57 (exp_2 -> exp_3 .)
    RECEBER         reduce using rule 57 (exp_2 -> exp_3 .)
    VIRGULA         reduce using rule 57 (exp_2 -> exp_3 .)
    PARENT_FECHA    reduce using rule 57 (exp_2 -> exp_3 .)
    OP_OU_EX        shift and go to state 92
    XOR             shift and go to state 93


state 49

    (60) exp_3 -> exp_4 .
    (61) exp_4 -> exp_4 . IGUAL exp_5
    (62) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 60 (exp_3 -> exp_4 .)
    XOR             reduce using rule 60 (exp_3 -> exp_4 .)
    OP_E            reduce using rule 60 (exp_3 -> exp_4 .)
    AND             reduce using rule 60 (exp_3 -> exp_4 .)
    OP_OU           reduce using rule 60 (exp_3 -> exp_4 .)
    OR              reduce using rule 60 (exp_3 -> exp_4 .)
    PONTO_VIRG      reduce using rule 60 (exp_3 -> exp_4 .)
    RECEBER         reduce using rule 60 (exp_3 -> exp_4 .)
    VIRGULA         reduce using rule 60 (exp_3 -> exp_4 .)
    PARENT_FECHA    reduce using rule 60 (exp_3 -> exp_4 .)
    IGUAL           shift and go to state 94
    DIFERENTE       shift and go to state 95


state 50

    (63) exp_4 -> exp_5 .
    (64) exp_5 -> exp_5 . MENOR_Q exp_6
    (65) exp_5 -> exp_5 . MAIOR_Q exp_6
    (66) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (67) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 63 (exp_4 -> exp_5 .)
    DIFERENTE       reduce using rule 63 (exp_4 -> exp_5 .)
    OP_OU_EX        reduce using rule 63 (exp_4 -> exp_5 .)
    XOR             reduce using rule 63 (exp_4 -> exp_5 .)
    OP_E            reduce using rule 63 (exp_4 -> exp_5 .)
    AND             reduce using rule 63 (exp_4 -> exp_5 .)
    OP_OU           reduce using rule 63 (exp_4 -> exp_5 .)
    OR              reduce using rule 63 (exp_4 -> exp_5 .)
    PONTO_VIRG      reduce using rule 63 (exp_4 -> exp_5 .)
    RECEBER         reduce using rule 63 (exp_4 -> exp_5 .)
    VIRGULA         reduce using rule 63 (exp_4 -> exp_5 .)
    PARENT_FECHA    reduce using rule 63 (exp_4 -> exp_5 .)
    MENOR_Q         shift and go to state 96
    MAIOR_Q         shift and go to state 97
    MAIOR_IGUAL     shift and go to state 98
    MENOR_IGUAL     shift and go to state 99


state 51

    (68) exp_5 -> exp_6 .
    (69) exp_6 -> exp_6 . SOMA exp_7
    (70) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 68 (exp_5 -> exp_6 .)
    MAIOR_Q         reduce using rule 68 (exp_5 -> exp_6 .)
    MAIOR_IGUAL     reduce using rule 68 (exp_5 -> exp_6 .)
    MENOR_IGUAL     reduce using rule 68 (exp_5 -> exp_6 .)
    IGUAL           reduce using rule 68 (exp_5 -> exp_6 .)
    DIFERENTE       reduce using rule 68 (exp_5 -> exp_6 .)
    OP_OU_EX        reduce using rule 68 (exp_5 -> exp_6 .)
    XOR             reduce using rule 68 (exp_5 -> exp_6 .)
    OP_E            reduce using rule 68 (exp_5 -> exp_6 .)
    AND             reduce using rule 68 (exp_5 -> exp_6 .)
    OP_OU           reduce using rule 68 (exp_5 -> exp_6 .)
    OR              reduce using rule 68 (exp_5 -> exp_6 .)
    PONTO_VIRG      reduce using rule 68 (exp_5 -> exp_6 .)
    RECEBER         reduce using rule 68 (exp_5 -> exp_6 .)
    VIRGULA         reduce using rule 68 (exp_5 -> exp_6 .)
    PARENT_FECHA    reduce using rule 68 (exp_5 -> exp_6 .)
    SOMA            shift and go to state 100
    SUB             shift and go to state 101


state 52

    (71) exp_6 -> exp_7 .
    (72) exp_7 -> exp_7 . MULT exp_8
    (73) exp_7 -> exp_7 . DIV exp_8
    (74) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 71 (exp_6 -> exp_7 .)
    SUB             reduce using rule 71 (exp_6 -> exp_7 .)
    MENOR_Q         reduce using rule 71 (exp_6 -> exp_7 .)
    MAIOR_Q         reduce using rule 71 (exp_6 -> exp_7 .)
    MAIOR_IGUAL     reduce using rule 71 (exp_6 -> exp_7 .)
    MENOR_IGUAL     reduce using rule 71 (exp_6 -> exp_7 .)
    IGUAL           reduce using rule 71 (exp_6 -> exp_7 .)
    DIFERENTE       reduce using rule 71 (exp_6 -> exp_7 .)
    OP_OU_EX        reduce using rule 71 (exp_6 -> exp_7 .)
    XOR             reduce using rule 71 (exp_6 -> exp_7 .)
    OP_E            reduce using rule 71 (exp_6 -> exp_7 .)
    AND             reduce using rule 71 (exp_6 -> exp_7 .)
    OP_OU           reduce using rule 71 (exp_6 -> exp_7 .)
    OR              reduce using rule 71 (exp_6 -> exp_7 .)
    PONTO_VIRG      reduce using rule 71 (exp_6 -> exp_7 .)
    RECEBER         reduce using rule 71 (exp_6 -> exp_7 .)
    VIRGULA         reduce using rule 71 (exp_6 -> exp_7 .)
    PARENT_FECHA    reduce using rule 71 (exp_6 -> exp_7 .)
    MULT            shift and go to state 102
    DIV             shift and go to state 103
    MODULO          shift and go to state 104


state 53

    (75) exp_7 -> exp_8 .

    MULT            reduce using rule 75 (exp_7 -> exp_8 .)
    DIV             reduce using rule 75 (exp_7 -> exp_8 .)
    MODULO          reduce using rule 75 (exp_7 -> exp_8 .)
    SOMA            reduce using rule 75 (exp_7 -> exp_8 .)
    SUB             reduce using rule 75 (exp_7 -> exp_8 .)
    MENOR_Q         reduce using rule 75 (exp_7 -> exp_8 .)
    MAIOR_Q         reduce using rule 75 (exp_7 -> exp_8 .)
    MAIOR_IGUAL     reduce using rule 75 (exp_7 -> exp_8 .)
    MENOR_IGUAL     reduce using rule 75 (exp_7 -> exp_8 .)
    IGUAL           reduce using rule 75 (exp_7 -> exp_8 .)
    DIFERENTE       reduce using rule 75 (exp_7 -> exp_8 .)
    OP_OU_EX        reduce using rule 75 (exp_7 -> exp_8 .)
    XOR             reduce using rule 75 (exp_7 -> exp_8 .)
    OP_E            reduce using rule 75 (exp_7 -> exp_8 .)
    AND             reduce using rule 75 (exp_7 -> exp_8 .)
    OP_OU           reduce using rule 75 (exp_7 -> exp_8 .)
    OR              reduce using rule 75 (exp_7 -> exp_8 .)
    PONTO_VIRG      reduce using rule 75 (exp_7 -> exp_8 .)
    RECEBER         reduce using rule 75 (exp_7 -> exp_8 .)
    VIRGULA         reduce using rule 75 (exp_7 -> exp_8 .)
    PARENT_FECHA    reduce using rule 75 (exp_7 -> exp_8 .)


state 54

    (76) exp_8 -> OP_NOT . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_9                          shift and go to state 105
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 55

    (78) exp_8 -> exp_9 . MAIS_MAIS
    (79) exp_8 -> exp_9 . MENOS_MENOS
    (82) exp_8 -> exp_9 .
    (83) exp_9 -> exp_9 . PONTO exp_10
    (84) exp_9 -> exp_9 . SETA exp_10

    MAIS_MAIS       shift and go to state 106
    MENOS_MENOS     shift and go to state 107
    MULT            reduce using rule 82 (exp_8 -> exp_9 .)
    DIV             reduce using rule 82 (exp_8 -> exp_9 .)
    MODULO          reduce using rule 82 (exp_8 -> exp_9 .)
    SOMA            reduce using rule 82 (exp_8 -> exp_9 .)
    SUB             reduce using rule 82 (exp_8 -> exp_9 .)
    MENOR_Q         reduce using rule 82 (exp_8 -> exp_9 .)
    MAIOR_Q         reduce using rule 82 (exp_8 -> exp_9 .)
    MAIOR_IGUAL     reduce using rule 82 (exp_8 -> exp_9 .)
    MENOR_IGUAL     reduce using rule 82 (exp_8 -> exp_9 .)
    IGUAL           reduce using rule 82 (exp_8 -> exp_9 .)
    DIFERENTE       reduce using rule 82 (exp_8 -> exp_9 .)
    OP_OU_EX        reduce using rule 82 (exp_8 -> exp_9 .)
    XOR             reduce using rule 82 (exp_8 -> exp_9 .)
    OP_E            reduce using rule 82 (exp_8 -> exp_9 .)
    AND             reduce using rule 82 (exp_8 -> exp_9 .)
    OP_OU           reduce using rule 82 (exp_8 -> exp_9 .)
    OR              reduce using rule 82 (exp_8 -> exp_9 .)
    PONTO_VIRG      reduce using rule 82 (exp_8 -> exp_9 .)
    RECEBER         reduce using rule 82 (exp_8 -> exp_9 .)
    VIRGULA         reduce using rule 82 (exp_8 -> exp_9 .)
    PARENT_FECHA    reduce using rule 82 (exp_8 -> exp_9 .)
    PONTO           shift and go to state 108
    SETA            shift and go to state 109


state 56

    (77) exp_8 -> NOT . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_9                          shift and go to state 110
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 57

    (80) exp_8 -> SIZEOF . PARENT_ABRE exp_9 PARENT_FECHA

    PARENT_ABRE     shift and go to state 111


state 58

    (93) exp_10 -> PARENT_ABRE . exp PARENT_FECHA
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 112
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 59

    (81) exp_8 -> NEW . tipo
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    tipo                           shift and go to state 113

state 60

    (85) exp_9 -> exp_10 .

    MAIS_MAIS       reduce using rule 85 (exp_9 -> exp_10 .)
    MENOS_MENOS     reduce using rule 85 (exp_9 -> exp_10 .)
    PONTO           reduce using rule 85 (exp_9 -> exp_10 .)
    SETA            reduce using rule 85 (exp_9 -> exp_10 .)
    MULT            reduce using rule 85 (exp_9 -> exp_10 .)
    DIV             reduce using rule 85 (exp_9 -> exp_10 .)
    MODULO          reduce using rule 85 (exp_9 -> exp_10 .)
    SOMA            reduce using rule 85 (exp_9 -> exp_10 .)
    SUB             reduce using rule 85 (exp_9 -> exp_10 .)
    MENOR_Q         reduce using rule 85 (exp_9 -> exp_10 .)
    MAIOR_Q         reduce using rule 85 (exp_9 -> exp_10 .)
    MAIOR_IGUAL     reduce using rule 85 (exp_9 -> exp_10 .)
    MENOR_IGUAL     reduce using rule 85 (exp_9 -> exp_10 .)
    IGUAL           reduce using rule 85 (exp_9 -> exp_10 .)
    DIFERENTE       reduce using rule 85 (exp_9 -> exp_10 .)
    OP_OU_EX        reduce using rule 85 (exp_9 -> exp_10 .)
    XOR             reduce using rule 85 (exp_9 -> exp_10 .)
    OP_E            reduce using rule 85 (exp_9 -> exp_10 .)
    AND             reduce using rule 85 (exp_9 -> exp_10 .)
    OP_OU           reduce using rule 85 (exp_9 -> exp_10 .)
    OR              reduce using rule 85 (exp_9 -> exp_10 .)
    PONTO_VIRG      reduce using rule 85 (exp_9 -> exp_10 .)
    RECEBER         reduce using rule 85 (exp_9 -> exp_10 .)
    VIRGULA         reduce using rule 85 (exp_9 -> exp_10 .)
    PARENT_FECHA    reduce using rule 85 (exp_9 -> exp_10 .)


state 61

    (87) exp_10 -> INT_V .

    MAIS_MAIS       reduce using rule 87 (exp_10 -> INT_V .)
    MENOS_MENOS     reduce using rule 87 (exp_10 -> INT_V .)
    PONTO           reduce using rule 87 (exp_10 -> INT_V .)
    SETA            reduce using rule 87 (exp_10 -> INT_V .)
    MULT            reduce using rule 87 (exp_10 -> INT_V .)
    DIV             reduce using rule 87 (exp_10 -> INT_V .)
    MODULO          reduce using rule 87 (exp_10 -> INT_V .)
    SOMA            reduce using rule 87 (exp_10 -> INT_V .)
    SUB             reduce using rule 87 (exp_10 -> INT_V .)
    MENOR_Q         reduce using rule 87 (exp_10 -> INT_V .)
    MAIOR_Q         reduce using rule 87 (exp_10 -> INT_V .)
    MAIOR_IGUAL     reduce using rule 87 (exp_10 -> INT_V .)
    MENOR_IGUAL     reduce using rule 87 (exp_10 -> INT_V .)
    IGUAL           reduce using rule 87 (exp_10 -> INT_V .)
    DIFERENTE       reduce using rule 87 (exp_10 -> INT_V .)
    OP_OU_EX        reduce using rule 87 (exp_10 -> INT_V .)
    XOR             reduce using rule 87 (exp_10 -> INT_V .)
    OP_E            reduce using rule 87 (exp_10 -> INT_V .)
    AND             reduce using rule 87 (exp_10 -> INT_V .)
    OP_OU           reduce using rule 87 (exp_10 -> INT_V .)
    OR              reduce using rule 87 (exp_10 -> INT_V .)
    PONTO_VIRG      reduce using rule 87 (exp_10 -> INT_V .)
    RECEBER         reduce using rule 87 (exp_10 -> INT_V .)
    VIRGULA         reduce using rule 87 (exp_10 -> INT_V .)
    PARENT_FECHA    reduce using rule 87 (exp_10 -> INT_V .)


state 62

    (88) exp_10 -> TRUE .

    MAIS_MAIS       reduce using rule 88 (exp_10 -> TRUE .)
    MENOS_MENOS     reduce using rule 88 (exp_10 -> TRUE .)
    PONTO           reduce using rule 88 (exp_10 -> TRUE .)
    SETA            reduce using rule 88 (exp_10 -> TRUE .)
    MULT            reduce using rule 88 (exp_10 -> TRUE .)
    DIV             reduce using rule 88 (exp_10 -> TRUE .)
    MODULO          reduce using rule 88 (exp_10 -> TRUE .)
    SOMA            reduce using rule 88 (exp_10 -> TRUE .)
    SUB             reduce using rule 88 (exp_10 -> TRUE .)
    MENOR_Q         reduce using rule 88 (exp_10 -> TRUE .)
    MAIOR_Q         reduce using rule 88 (exp_10 -> TRUE .)
    MAIOR_IGUAL     reduce using rule 88 (exp_10 -> TRUE .)
    MENOR_IGUAL     reduce using rule 88 (exp_10 -> TRUE .)
    IGUAL           reduce using rule 88 (exp_10 -> TRUE .)
    DIFERENTE       reduce using rule 88 (exp_10 -> TRUE .)
    OP_OU_EX        reduce using rule 88 (exp_10 -> TRUE .)
    XOR             reduce using rule 88 (exp_10 -> TRUE .)
    OP_E            reduce using rule 88 (exp_10 -> TRUE .)
    AND             reduce using rule 88 (exp_10 -> TRUE .)
    OP_OU           reduce using rule 88 (exp_10 -> TRUE .)
    OR              reduce using rule 88 (exp_10 -> TRUE .)
    PONTO_VIRG      reduce using rule 88 (exp_10 -> TRUE .)
    RECEBER         reduce using rule 88 (exp_10 -> TRUE .)
    VIRGULA         reduce using rule 88 (exp_10 -> TRUE .)
    PARENT_FECHA    reduce using rule 88 (exp_10 -> TRUE .)


state 63

    (89) exp_10 -> FALSE .

    MAIS_MAIS       reduce using rule 89 (exp_10 -> FALSE .)
    MENOS_MENOS     reduce using rule 89 (exp_10 -> FALSE .)
    PONTO           reduce using rule 89 (exp_10 -> FALSE .)
    SETA            reduce using rule 89 (exp_10 -> FALSE .)
    MULT            reduce using rule 89 (exp_10 -> FALSE .)
    DIV             reduce using rule 89 (exp_10 -> FALSE .)
    MODULO          reduce using rule 89 (exp_10 -> FALSE .)
    SOMA            reduce using rule 89 (exp_10 -> FALSE .)
    SUB             reduce using rule 89 (exp_10 -> FALSE .)
    MENOR_Q         reduce using rule 89 (exp_10 -> FALSE .)
    MAIOR_Q         reduce using rule 89 (exp_10 -> FALSE .)
    MAIOR_IGUAL     reduce using rule 89 (exp_10 -> FALSE .)
    MENOR_IGUAL     reduce using rule 89 (exp_10 -> FALSE .)
    IGUAL           reduce using rule 89 (exp_10 -> FALSE .)
    DIFERENTE       reduce using rule 89 (exp_10 -> FALSE .)
    OP_OU_EX        reduce using rule 89 (exp_10 -> FALSE .)
    XOR             reduce using rule 89 (exp_10 -> FALSE .)
    OP_E            reduce using rule 89 (exp_10 -> FALSE .)
    AND             reduce using rule 89 (exp_10 -> FALSE .)
    OP_OU           reduce using rule 89 (exp_10 -> FALSE .)
    OR              reduce using rule 89 (exp_10 -> FALSE .)
    PONTO_VIRG      reduce using rule 89 (exp_10 -> FALSE .)
    RECEBER         reduce using rule 89 (exp_10 -> FALSE .)
    VIRGULA         reduce using rule 89 (exp_10 -> FALSE .)
    PARENT_FECHA    reduce using rule 89 (exp_10 -> FALSE .)


state 64

    (90) exp_10 -> chamada_funcao .

    MAIS_MAIS       reduce using rule 90 (exp_10 -> chamada_funcao .)
    MENOS_MENOS     reduce using rule 90 (exp_10 -> chamada_funcao .)
    PONTO           reduce using rule 90 (exp_10 -> chamada_funcao .)
    SETA            reduce using rule 90 (exp_10 -> chamada_funcao .)
    MULT            reduce using rule 90 (exp_10 -> chamada_funcao .)
    DIV             reduce using rule 90 (exp_10 -> chamada_funcao .)
    MODULO          reduce using rule 90 (exp_10 -> chamada_funcao .)
    SOMA            reduce using rule 90 (exp_10 -> chamada_funcao .)
    SUB             reduce using rule 90 (exp_10 -> chamada_funcao .)
    MENOR_Q         reduce using rule 90 (exp_10 -> chamada_funcao .)
    MAIOR_Q         reduce using rule 90 (exp_10 -> chamada_funcao .)
    MAIOR_IGUAL     reduce using rule 90 (exp_10 -> chamada_funcao .)
    MENOR_IGUAL     reduce using rule 90 (exp_10 -> chamada_funcao .)
    IGUAL           reduce using rule 90 (exp_10 -> chamada_funcao .)
    DIFERENTE       reduce using rule 90 (exp_10 -> chamada_funcao .)
    OP_OU_EX        reduce using rule 90 (exp_10 -> chamada_funcao .)
    XOR             reduce using rule 90 (exp_10 -> chamada_funcao .)
    OP_E            reduce using rule 90 (exp_10 -> chamada_funcao .)
    AND             reduce using rule 90 (exp_10 -> chamada_funcao .)
    OP_OU           reduce using rule 90 (exp_10 -> chamada_funcao .)
    OR              reduce using rule 90 (exp_10 -> chamada_funcao .)
    PONTO_VIRG      reduce using rule 90 (exp_10 -> chamada_funcao .)
    RECEBER         reduce using rule 90 (exp_10 -> chamada_funcao .)
    VIRGULA         reduce using rule 90 (exp_10 -> chamada_funcao .)
    PARENT_FECHA    reduce using rule 90 (exp_10 -> chamada_funcao .)


state 65

    (91) exp_10 -> STRING_V .

    MAIS_MAIS       reduce using rule 91 (exp_10 -> STRING_V .)
    MENOS_MENOS     reduce using rule 91 (exp_10 -> STRING_V .)
    PONTO           reduce using rule 91 (exp_10 -> STRING_V .)
    SETA            reduce using rule 91 (exp_10 -> STRING_V .)
    MULT            reduce using rule 91 (exp_10 -> STRING_V .)
    DIV             reduce using rule 91 (exp_10 -> STRING_V .)
    MODULO          reduce using rule 91 (exp_10 -> STRING_V .)
    SOMA            reduce using rule 91 (exp_10 -> STRING_V .)
    SUB             reduce using rule 91 (exp_10 -> STRING_V .)
    MENOR_Q         reduce using rule 91 (exp_10 -> STRING_V .)
    MAIOR_Q         reduce using rule 91 (exp_10 -> STRING_V .)
    MAIOR_IGUAL     reduce using rule 91 (exp_10 -> STRING_V .)
    MENOR_IGUAL     reduce using rule 91 (exp_10 -> STRING_V .)
    IGUAL           reduce using rule 91 (exp_10 -> STRING_V .)
    DIFERENTE       reduce using rule 91 (exp_10 -> STRING_V .)
    OP_OU_EX        reduce using rule 91 (exp_10 -> STRING_V .)
    XOR             reduce using rule 91 (exp_10 -> STRING_V .)
    OP_E            reduce using rule 91 (exp_10 -> STRING_V .)
    AND             reduce using rule 91 (exp_10 -> STRING_V .)
    OP_OU           reduce using rule 91 (exp_10 -> STRING_V .)
    OR              reduce using rule 91 (exp_10 -> STRING_V .)
    PONTO_VIRG      reduce using rule 91 (exp_10 -> STRING_V .)
    RECEBER         reduce using rule 91 (exp_10 -> STRING_V .)
    VIRGULA         reduce using rule 91 (exp_10 -> STRING_V .)
    PARENT_FECHA    reduce using rule 91 (exp_10 -> STRING_V .)


state 66

    (92) exp_10 -> THIS .

    MAIS_MAIS       reduce using rule 92 (exp_10 -> THIS .)
    MENOS_MENOS     reduce using rule 92 (exp_10 -> THIS .)
    PONTO           reduce using rule 92 (exp_10 -> THIS .)
    SETA            reduce using rule 92 (exp_10 -> THIS .)
    MULT            reduce using rule 92 (exp_10 -> THIS .)
    DIV             reduce using rule 92 (exp_10 -> THIS .)
    MODULO          reduce using rule 92 (exp_10 -> THIS .)
    SOMA            reduce using rule 92 (exp_10 -> THIS .)
    SUB             reduce using rule 92 (exp_10 -> THIS .)
    MENOR_Q         reduce using rule 92 (exp_10 -> THIS .)
    MAIOR_Q         reduce using rule 92 (exp_10 -> THIS .)
    MAIOR_IGUAL     reduce using rule 92 (exp_10 -> THIS .)
    MENOR_IGUAL     reduce using rule 92 (exp_10 -> THIS .)
    IGUAL           reduce using rule 92 (exp_10 -> THIS .)
    DIFERENTE       reduce using rule 92 (exp_10 -> THIS .)
    OP_OU_EX        reduce using rule 92 (exp_10 -> THIS .)
    XOR             reduce using rule 92 (exp_10 -> THIS .)
    OP_E            reduce using rule 92 (exp_10 -> THIS .)
    AND             reduce using rule 92 (exp_10 -> THIS .)
    OP_OU           reduce using rule 92 (exp_10 -> THIS .)
    OR              reduce using rule 92 (exp_10 -> THIS .)
    PONTO_VIRG      reduce using rule 92 (exp_10 -> THIS .)
    RECEBER         reduce using rule 92 (exp_10 -> THIS .)
    VIRGULA         reduce using rule 92 (exp_10 -> THIS .)
    PARENT_FECHA    reduce using rule 92 (exp_10 -> THIS .)


state 67

    (96) chamada_funcao -> TYPEID . PARENT_ABRE exp PARENT_FECHA

    PARENT_ABRE     shift and go to state 114


state 68

    (32) decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .

    CLASS           reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    VOID            reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    TYPEDEF         reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    USING           reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    INT             reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    BOOL            reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    ID              reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    STRING          reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    $end            reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    STATIC          reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    IF              reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    WHILE           reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    FOR             reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    RETURN          reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    OP_NOT          reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    NOT             reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    SIZEOF          reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    NEW             reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    INT_V           reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    TRUE            reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    FALSE           reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    STRING_V        reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    THIS            reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    TYPEID          reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    ELSE            reduce using rule 32 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)


state 69

    (34) decl_variavel_n -> VIRGULA ID . decl_variavel_n
    (35) decl_variavel_n -> VIRGULA ID . RECEBER exp decl_variavel_n
    (36) decl_variavel_n -> VIRGULA ID . RECEBER exp
    (37) decl_variavel_n -> VIRGULA ID .
    (34) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (35) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (36) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (37) decl_variavel_n -> . VIRGULA ID

    RECEBER         shift and go to state 116
    PONTO_VIRG      reduce using rule 37 (decl_variavel_n -> VIRGULA ID .)
    VIRGULA         shift and go to state 32

    decl_variavel_n                shift and go to state 115

state 70

    (27) decl_funcao -> VOID ID PARENT_ABRE VOID . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 117


state 71

    (25) decl_funcao -> VOID ID PARENT_ABRE parametros . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 118


state 72

    (26) decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA . body
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 82

    body                           shift and go to state 119

state 73

    (38) typedef -> TYPEDEF tipo ID PONTO_VIRG .

    CLASS           reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    VOID            reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    USING           reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    INT             reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    BOOL            reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    ID              reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    STRING          reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    $end            reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    IF              reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    WHILE           reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    FOR             reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    RETURN          reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    OP_NOT          reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    NOT             reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    SIZEOF          reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    NEW             reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    INT_V           reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    TRUE            reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    FALSE           reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    STRING_V        reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    THIS            reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    TYPEID          reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    ELSE            reduce using rule 38 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)


state 74

    (39) typedef -> TYPEDEF tipo ID decl_typedef_n . PONTO_VIRG

    PONTO_VIRG      shift and go to state 120


state 75

    (40) decl_typedef_n -> VIRGULA . ID decl_typedef_n
    (41) decl_typedef_n -> VIRGULA . ID

    ID              shift and go to state 121


state 76

    (43) using -> USING ID ID PONTO_VIRG .

    CLASS           reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    VOID            reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    USING           reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    INT             reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    BOOL            reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    ID              reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    STRING          reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    $end            reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    IF              reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    WHILE           reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    FOR             reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    RETURN          reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    OP_NOT          reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    NOT             reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    SIZEOF          reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    NEW             reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    INT_V           reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    TRUE            reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    FALSE           reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    STRING_V        reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    THIS            reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    TYPEID          reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)
    ELSE            reduce using rule 43 (using -> USING ID ID PONTO_VIRG .)


state 77

    (42) using -> USING ID 2X_DOIS_PONTOS ID . PONTO_VIRG

    PONTO_VIRG      shift and go to state 122


state 78

    (12) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS . content_class CHAVE_FECHA
    (14) content_class -> . decl_variavel
    (15) content_class -> . decl_funcao
    (16) content_class -> . STATIC decl_variavel
    (17) content_class -> . STATIC decl_funcao
    (18) content_class -> . decl_variavel content_class
    (19) content_class -> . decl_funcao content_class
    (20) content_class -> . STATIC decl_variavel content_class
    (21) content_class -> . STATIC decl_funcao content_class
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    STATIC          shift and go to state 126
    VOID            shift and go to state 10
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    content_class                  shift and go to state 123
    decl_variavel                  shift and go to state 124
    decl_funcao                    shift and go to state 125
    tipo                           shift and go to state 127

state 79

    (28) parametros -> tipo ID .
    (29) parametros -> tipo ID . VIRGULA parametros

    PARENT_FECHA    reduce using rule 28 (parametros -> tipo ID .)
    VIRGULA         shift and go to state 128


state 80

    (22) decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA . body
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 82

    body                           shift and go to state 129

state 81

    (23) decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .

    CLASS           reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    VOID            reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    TYPEDEF         reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    USING           reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    INT             reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    BOOL            reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    ID              reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    STRING          reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    $end            reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    STATIC          reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 23 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)


state 82

    (44) body -> CHAVE_ABRE . comandos CHAVE_FECHA
    (45) body -> CHAVE_ABRE . CHAVE_FECHA
    (46) comandos -> . comando
    (47) comandos -> . comando comandos
    (48) comando -> . condicional_1
    (49) comando -> . condicional_2
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (110) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (111) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_FECHA     shift and go to state 131
    IF              shift and go to state 135
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    comandos                       shift and go to state 130
    comando                        shift and go to state 132
    condicional_1                  shift and go to state 133
    condicional_2                  shift and go to state 134
    exp                            shift and go to state 136
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 83

    (24) decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA . body
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 82

    body                           shift and go to state 145

state 84

    (94) chamada_funcao -> ID PARENT_ABRE . parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> ID PARENT_ABRE . PARENT_FECHA
    (97) parametros_chamada -> . ID VIRGULA parametros_chamada
    (98) parametros_chamada -> . ID

    PARENT_FECHA    shift and go to state 148
    ID              shift and go to state 146

    parametros_chamada             shift and go to state 147

state 85

    (50) exp -> exp RECEBER . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_1                          shift and go to state 149
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 86

    (31) decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .

    CLASS           reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    VOID            reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TYPEDEF         reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    USING           reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    INT             reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    BOOL            reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    ID              reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    STRING          reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    $end            reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    STATIC          reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    IF              reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    WHILE           reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    FOR             reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    RETURN          reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    OP_NOT          reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    NOT             reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    SIZEOF          reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    NEW             reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    INT_V           reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TRUE            reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    FALSE           reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    STRING_V        reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    THIS            reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TYPEID          reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    ELSE            reduce using rule 31 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)


state 87

    (33) decl_variavel -> tipo ID RECEBER exp decl_variavel_n . PONTO_VIRG

    PONTO_VIRG      shift and go to state 150


state 88

    (52) exp_1 -> exp_1 OP_OU . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_2                          shift and go to state 151
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 89

    (53) exp_1 -> exp_1 OR . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_2                          shift and go to state 152
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 90

    (55) exp_2 -> exp_2 OP_E . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_3                          shift and go to state 153
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 91

    (56) exp_2 -> exp_2 AND . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_3                          shift and go to state 154
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 92

    (58) exp_3 -> exp_3 OP_OU_EX . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_4                          shift and go to state 155
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 93

    (59) exp_3 -> exp_3 XOR . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_4                          shift and go to state 156
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 94

    (61) exp_4 -> exp_4 IGUAL . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_5                          shift and go to state 157
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 95

    (62) exp_4 -> exp_4 DIFERENTE . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_5                          shift and go to state 158
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 96

    (64) exp_5 -> exp_5 MENOR_Q . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_6                          shift and go to state 159
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 97

    (65) exp_5 -> exp_5 MAIOR_Q . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_6                          shift and go to state 160
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 98

    (66) exp_5 -> exp_5 MAIOR_IGUAL . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_6                          shift and go to state 161
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 99

    (67) exp_5 -> exp_5 MENOR_IGUAL . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_6                          shift and go to state 162
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 100

    (69) exp_6 -> exp_6 SOMA . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_7                          shift and go to state 163
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 101

    (70) exp_6 -> exp_6 SUB . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_7                          shift and go to state 164
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 102

    (72) exp_7 -> exp_7 MULT . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_8                          shift and go to state 165
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 103

    (73) exp_7 -> exp_7 DIV . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_8                          shift and go to state 166
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 104

    (74) exp_7 -> exp_7 MODULO . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_8                          shift and go to state 167
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 105

    (76) exp_8 -> OP_NOT exp_9 .
    (83) exp_9 -> exp_9 . PONTO exp_10
    (84) exp_9 -> exp_9 . SETA exp_10

    MULT            reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    DIV             reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    MODULO          reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    SOMA            reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    SUB             reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    MENOR_Q         reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    MAIOR_Q         reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    MAIOR_IGUAL     reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    MENOR_IGUAL     reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    IGUAL           reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    DIFERENTE       reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    OP_OU_EX        reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    XOR             reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    OP_E            reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    AND             reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    OP_OU           reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    OR              reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    PONTO_VIRG      reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    RECEBER         reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    VIRGULA         reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    PARENT_FECHA    reduce using rule 76 (exp_8 -> OP_NOT exp_9 .)
    PONTO           shift and go to state 108
    SETA            shift and go to state 109


state 106

    (78) exp_8 -> exp_9 MAIS_MAIS .

    MULT            reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    DIV             reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    MODULO          reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    SOMA            reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    SUB             reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    MENOR_Q         reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    MAIOR_Q         reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    MAIOR_IGUAL     reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    MENOR_IGUAL     reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    IGUAL           reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    DIFERENTE       reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_OU_EX        reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    XOR             reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_E            reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    AND             reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_OU           reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    OR              reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    PONTO_VIRG      reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    RECEBER         reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    VIRGULA         reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)
    PARENT_FECHA    reduce using rule 78 (exp_8 -> exp_9 MAIS_MAIS .)


state 107

    (79) exp_8 -> exp_9 MENOS_MENOS .

    MULT            reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    DIV             reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    MODULO          reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    SOMA            reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    SUB             reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    MENOR_Q         reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    MAIOR_Q         reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    MAIOR_IGUAL     reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    MENOR_IGUAL     reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    IGUAL           reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    DIFERENTE       reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_OU_EX        reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    XOR             reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_E            reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    AND             reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_OU           reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    OR              reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    PONTO_VIRG      reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    RECEBER         reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    VIRGULA         reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)
    PARENT_FECHA    reduce using rule 79 (exp_8 -> exp_9 MENOS_MENOS .)


state 108

    (83) exp_9 -> exp_9 PONTO . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_10                         shift and go to state 168
    chamada_funcao                 shift and go to state 64

state 109

    (84) exp_9 -> exp_9 SETA . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_10                         shift and go to state 169
    chamada_funcao                 shift and go to state 64

state 110

    (77) exp_8 -> NOT exp_9 .
    (83) exp_9 -> exp_9 . PONTO exp_10
    (84) exp_9 -> exp_9 . SETA exp_10

    MULT            reduce using rule 77 (exp_8 -> NOT exp_9 .)
    DIV             reduce using rule 77 (exp_8 -> NOT exp_9 .)
    MODULO          reduce using rule 77 (exp_8 -> NOT exp_9 .)
    SOMA            reduce using rule 77 (exp_8 -> NOT exp_9 .)
    SUB             reduce using rule 77 (exp_8 -> NOT exp_9 .)
    MENOR_Q         reduce using rule 77 (exp_8 -> NOT exp_9 .)
    MAIOR_Q         reduce using rule 77 (exp_8 -> NOT exp_9 .)
    MAIOR_IGUAL     reduce using rule 77 (exp_8 -> NOT exp_9 .)
    MENOR_IGUAL     reduce using rule 77 (exp_8 -> NOT exp_9 .)
    IGUAL           reduce using rule 77 (exp_8 -> NOT exp_9 .)
    DIFERENTE       reduce using rule 77 (exp_8 -> NOT exp_9 .)
    OP_OU_EX        reduce using rule 77 (exp_8 -> NOT exp_9 .)
    XOR             reduce using rule 77 (exp_8 -> NOT exp_9 .)
    OP_E            reduce using rule 77 (exp_8 -> NOT exp_9 .)
    AND             reduce using rule 77 (exp_8 -> NOT exp_9 .)
    OP_OU           reduce using rule 77 (exp_8 -> NOT exp_9 .)
    OR              reduce using rule 77 (exp_8 -> NOT exp_9 .)
    PONTO_VIRG      reduce using rule 77 (exp_8 -> NOT exp_9 .)
    RECEBER         reduce using rule 77 (exp_8 -> NOT exp_9 .)
    VIRGULA         reduce using rule 77 (exp_8 -> NOT exp_9 .)
    PARENT_FECHA    reduce using rule 77 (exp_8 -> NOT exp_9 .)
    PONTO           shift and go to state 108
    SETA            shift and go to state 109


state 111

    (80) exp_8 -> SIZEOF PARENT_ABRE . exp_9 PARENT_FECHA
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp_9                          shift and go to state 170
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 112

    (93) exp_10 -> PARENT_ABRE exp . PARENT_FECHA
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 171
    RECEBER         shift and go to state 85


state 113

    (81) exp_8 -> NEW tipo .

    MULT            reduce using rule 81 (exp_8 -> NEW tipo .)
    DIV             reduce using rule 81 (exp_8 -> NEW tipo .)
    MODULO          reduce using rule 81 (exp_8 -> NEW tipo .)
    SOMA            reduce using rule 81 (exp_8 -> NEW tipo .)
    SUB             reduce using rule 81 (exp_8 -> NEW tipo .)
    MENOR_Q         reduce using rule 81 (exp_8 -> NEW tipo .)
    MAIOR_Q         reduce using rule 81 (exp_8 -> NEW tipo .)
    MAIOR_IGUAL     reduce using rule 81 (exp_8 -> NEW tipo .)
    MENOR_IGUAL     reduce using rule 81 (exp_8 -> NEW tipo .)
    IGUAL           reduce using rule 81 (exp_8 -> NEW tipo .)
    DIFERENTE       reduce using rule 81 (exp_8 -> NEW tipo .)
    OP_OU_EX        reduce using rule 81 (exp_8 -> NEW tipo .)
    XOR             reduce using rule 81 (exp_8 -> NEW tipo .)
    OP_E            reduce using rule 81 (exp_8 -> NEW tipo .)
    AND             reduce using rule 81 (exp_8 -> NEW tipo .)
    OP_OU           reduce using rule 81 (exp_8 -> NEW tipo .)
    OR              reduce using rule 81 (exp_8 -> NEW tipo .)
    PONTO_VIRG      reduce using rule 81 (exp_8 -> NEW tipo .)
    RECEBER         reduce using rule 81 (exp_8 -> NEW tipo .)
    VIRGULA         reduce using rule 81 (exp_8 -> NEW tipo .)
    PARENT_FECHA    reduce using rule 81 (exp_8 -> NEW tipo .)


state 114

    (96) chamada_funcao -> TYPEID PARENT_ABRE . exp PARENT_FECHA
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 172
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 115

    (34) decl_variavel_n -> VIRGULA ID decl_variavel_n .

    PONTO_VIRG      reduce using rule 34 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)


state 116

    (35) decl_variavel_n -> VIRGULA ID RECEBER . exp decl_variavel_n
    (36) decl_variavel_n -> VIRGULA ID RECEBER . exp
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 173
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 117

    (27) decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA . body
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 82

    body                           shift and go to state 174

state 118

    (25) decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA . body
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 82

    body                           shift and go to state 175

state 119

    (26) decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .

    CLASS           reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    VOID            reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    TYPEDEF         reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    USING           reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    INT             reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    BOOL            reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    ID              reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    STRING          reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    $end            reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    STATIC          reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 26 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)


state 120

    (39) typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .

    CLASS           reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    VOID            reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    TYPEDEF         reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    USING           reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    INT             reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    BOOL            reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    ID              reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    STRING          reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    $end            reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    IF              reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    WHILE           reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    FOR             reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    RETURN          reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    OP_NOT          reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    NOT             reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    SIZEOF          reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    NEW             reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    INT_V           reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    TRUE            reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    FALSE           reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    STRING_V        reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    THIS            reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    TYPEID          reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    ELSE            reduce using rule 39 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)


state 121

    (40) decl_typedef_n -> VIRGULA ID . decl_typedef_n
    (41) decl_typedef_n -> VIRGULA ID .
    (40) decl_typedef_n -> . VIRGULA ID decl_typedef_n
    (41) decl_typedef_n -> . VIRGULA ID

    PONTO_VIRG      reduce using rule 41 (decl_typedef_n -> VIRGULA ID .)
    VIRGULA         shift and go to state 75

    decl_typedef_n                 shift and go to state 176

state 122

    (42) using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .

    CLASS           reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    VOID            reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    USING           reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    INT             reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    BOOL            reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    ID              reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    STRING          reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    $end            reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    IF              reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    WHILE           reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    FOR             reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    RETURN          reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    OP_NOT          reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    NOT             reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    SIZEOF          reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    NEW             reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    INT_V           reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    TRUE            reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    FALSE           reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    STRING_V        reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    THIS            reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    TYPEID          reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    ELSE            reduce using rule 42 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)


state 123

    (12) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class . CHAVE_FECHA

    CHAVE_FECHA     shift and go to state 177


state 124

    (14) content_class -> decl_variavel .
    (18) content_class -> decl_variavel . content_class
    (14) content_class -> . decl_variavel
    (15) content_class -> . decl_funcao
    (16) content_class -> . STATIC decl_variavel
    (17) content_class -> . STATIC decl_funcao
    (18) content_class -> . decl_variavel content_class
    (19) content_class -> . decl_funcao content_class
    (20) content_class -> . STATIC decl_variavel content_class
    (21) content_class -> . STATIC decl_funcao content_class
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    CHAVE_FECHA     reduce using rule 14 (content_class -> decl_variavel .)
    STATIC          shift and go to state 126
    VOID            shift and go to state 10
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    decl_variavel                  shift and go to state 124
    content_class                  shift and go to state 178
    decl_funcao                    shift and go to state 125
    tipo                           shift and go to state 127

state 125

    (15) content_class -> decl_funcao .
    (19) content_class -> decl_funcao . content_class
    (14) content_class -> . decl_variavel
    (15) content_class -> . decl_funcao
    (16) content_class -> . STATIC decl_variavel
    (17) content_class -> . STATIC decl_funcao
    (18) content_class -> . decl_variavel content_class
    (19) content_class -> . decl_funcao content_class
    (20) content_class -> . STATIC decl_variavel content_class
    (21) content_class -> . STATIC decl_funcao content_class
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    CHAVE_FECHA     reduce using rule 15 (content_class -> decl_funcao .)
    STATIC          shift and go to state 126
    VOID            shift and go to state 10
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    decl_funcao                    shift and go to state 125
    content_class                  shift and go to state 179
    decl_variavel                  shift and go to state 124
    tipo                           shift and go to state 127

state 126

    (16) content_class -> STATIC . decl_variavel
    (17) content_class -> STATIC . decl_funcao
    (20) content_class -> STATIC . decl_variavel content_class
    (21) content_class -> STATIC . decl_funcao content_class
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    VOID            shift and go to state 10
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    decl_variavel                  shift and go to state 180
    decl_funcao                    shift and go to state 181
    tipo                           shift and go to state 127

state 127

    (30) decl_variavel -> tipo . ID PONTO_VIRG
    (31) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> tipo . ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n PONTO_VIRG
    (22) decl_funcao -> tipo . ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> tipo . ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> tipo . ID PARENT_ABRE VOID PARENT_FECHA body

    ID              shift and go to state 182


state 128

    (29) parametros -> tipo ID VIRGULA . parametros
    (28) parametros -> . tipo ID
    (29) parametros -> . tipo ID VIRGULA parametros
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    tipo                           shift and go to state 40
    parametros                     shift and go to state 183

state 129

    (22) decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .

    CLASS           reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    VOID            reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    TYPEDEF         reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    USING           reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    INT             reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    BOOL            reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    ID              reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    STRING          reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    $end            reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    STATIC          reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 22 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)


state 130

    (44) body -> CHAVE_ABRE comandos . CHAVE_FECHA

    CHAVE_FECHA     shift and go to state 184


state 131

    (45) body -> CHAVE_ABRE CHAVE_FECHA .

    CLASS           reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    VOID            reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TYPEDEF         reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    USING           reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    INT             reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    BOOL            reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    ID              reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    STRING          reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    $end            reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    STATIC          reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    CHAVE_FECHA     reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    ELSE            reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    IF              reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    WHILE           reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    FOR             reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    RETURN          reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    OP_NOT          reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    NOT             reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    SIZEOF          reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    NEW             reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    INT_V           reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TRUE            reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    FALSE           reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    STRING_V        reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    THIS            reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    PARENT_ABRE     reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TYPEID          reduce using rule 45 (body -> CHAVE_ABRE CHAVE_FECHA .)


state 132

    (46) comandos -> comando .
    (47) comandos -> comando . comandos
    (46) comandos -> . comando
    (47) comandos -> . comando comandos
    (48) comando -> . condicional_1
    (49) comando -> . condicional_2
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (110) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (111) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_FECHA     reduce using rule 46 (comandos -> comando .)
    IF              shift and go to state 135
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    comando                        shift and go to state 132
    comandos                       shift and go to state 185
    condicional_1                  shift and go to state 133
    condicional_2                  shift and go to state 134
    exp                            shift and go to state 136
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 133

    (48) comando -> condicional_1 .

    IF              reduce using rule 48 (comando -> condicional_1 .)
    WHILE           reduce using rule 48 (comando -> condicional_1 .)
    FOR             reduce using rule 48 (comando -> condicional_1 .)
    RETURN          reduce using rule 48 (comando -> condicional_1 .)
    TYPEDEF         reduce using rule 48 (comando -> condicional_1 .)
    USING           reduce using rule 48 (comando -> condicional_1 .)
    INT             reduce using rule 48 (comando -> condicional_1 .)
    BOOL            reduce using rule 48 (comando -> condicional_1 .)
    ID              reduce using rule 48 (comando -> condicional_1 .)
    STRING          reduce using rule 48 (comando -> condicional_1 .)
    OP_NOT          reduce using rule 48 (comando -> condicional_1 .)
    NOT             reduce using rule 48 (comando -> condicional_1 .)
    SIZEOF          reduce using rule 48 (comando -> condicional_1 .)
    NEW             reduce using rule 48 (comando -> condicional_1 .)
    INT_V           reduce using rule 48 (comando -> condicional_1 .)
    TRUE            reduce using rule 48 (comando -> condicional_1 .)
    FALSE           reduce using rule 48 (comando -> condicional_1 .)
    STRING_V        reduce using rule 48 (comando -> condicional_1 .)
    THIS            reduce using rule 48 (comando -> condicional_1 .)
    PARENT_ABRE     reduce using rule 48 (comando -> condicional_1 .)
    TYPEID          reduce using rule 48 (comando -> condicional_1 .)
    CHAVE_FECHA     reduce using rule 48 (comando -> condicional_1 .)


state 134

    (49) comando -> condicional_2 .

    IF              reduce using rule 49 (comando -> condicional_2 .)
    WHILE           reduce using rule 49 (comando -> condicional_2 .)
    FOR             reduce using rule 49 (comando -> condicional_2 .)
    RETURN          reduce using rule 49 (comando -> condicional_2 .)
    TYPEDEF         reduce using rule 49 (comando -> condicional_2 .)
    USING           reduce using rule 49 (comando -> condicional_2 .)
    INT             reduce using rule 49 (comando -> condicional_2 .)
    BOOL            reduce using rule 49 (comando -> condicional_2 .)
    ID              reduce using rule 49 (comando -> condicional_2 .)
    STRING          reduce using rule 49 (comando -> condicional_2 .)
    OP_NOT          reduce using rule 49 (comando -> condicional_2 .)
    NOT             reduce using rule 49 (comando -> condicional_2 .)
    SIZEOF          reduce using rule 49 (comando -> condicional_2 .)
    NEW             reduce using rule 49 (comando -> condicional_2 .)
    INT_V           reduce using rule 49 (comando -> condicional_2 .)
    TRUE            reduce using rule 49 (comando -> condicional_2 .)
    FALSE           reduce using rule 49 (comando -> condicional_2 .)
    STRING_V        reduce using rule 49 (comando -> condicional_2 .)
    THIS            reduce using rule 49 (comando -> condicional_2 .)
    PARENT_ABRE     reduce using rule 49 (comando -> condicional_2 .)
    TYPEID          reduce using rule 49 (comando -> condicional_2 .)
    CHAVE_FECHA     reduce using rule 49 (comando -> condicional_2 .)


state 135

    (99) condicional_1 -> IF . PARENT_ABRE exp PARENT_FECHA rest_if
    (110) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body
    (111) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA comando
    (112) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2

    PARENT_ABRE     shift and go to state 186


state 136

    (100) condicional_1 -> exp . PONTO_VIRG
    (50) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 187
    RECEBER         shift and go to state 85


state 137

    (101) condicional_1 -> decl_variavel .

    IF              reduce using rule 101 (condicional_1 -> decl_variavel .)
    WHILE           reduce using rule 101 (condicional_1 -> decl_variavel .)
    FOR             reduce using rule 101 (condicional_1 -> decl_variavel .)
    RETURN          reduce using rule 101 (condicional_1 -> decl_variavel .)
    TYPEDEF         reduce using rule 101 (condicional_1 -> decl_variavel .)
    USING           reduce using rule 101 (condicional_1 -> decl_variavel .)
    INT             reduce using rule 101 (condicional_1 -> decl_variavel .)
    BOOL            reduce using rule 101 (condicional_1 -> decl_variavel .)
    ID              reduce using rule 101 (condicional_1 -> decl_variavel .)
    STRING          reduce using rule 101 (condicional_1 -> decl_variavel .)
    OP_NOT          reduce using rule 101 (condicional_1 -> decl_variavel .)
    NOT             reduce using rule 101 (condicional_1 -> decl_variavel .)
    SIZEOF          reduce using rule 101 (condicional_1 -> decl_variavel .)
    NEW             reduce using rule 101 (condicional_1 -> decl_variavel .)
    INT_V           reduce using rule 101 (condicional_1 -> decl_variavel .)
    TRUE            reduce using rule 101 (condicional_1 -> decl_variavel .)
    FALSE           reduce using rule 101 (condicional_1 -> decl_variavel .)
    STRING_V        reduce using rule 101 (condicional_1 -> decl_variavel .)
    THIS            reduce using rule 101 (condicional_1 -> decl_variavel .)
    PARENT_ABRE     reduce using rule 101 (condicional_1 -> decl_variavel .)
    TYPEID          reduce using rule 101 (condicional_1 -> decl_variavel .)
    CHAVE_FECHA     reduce using rule 101 (condicional_1 -> decl_variavel .)
    ELSE            reduce using rule 101 (condicional_1 -> decl_variavel .)


state 138

    (102) condicional_1 -> typedef .

    IF              reduce using rule 102 (condicional_1 -> typedef .)
    WHILE           reduce using rule 102 (condicional_1 -> typedef .)
    FOR             reduce using rule 102 (condicional_1 -> typedef .)
    RETURN          reduce using rule 102 (condicional_1 -> typedef .)
    TYPEDEF         reduce using rule 102 (condicional_1 -> typedef .)
    USING           reduce using rule 102 (condicional_1 -> typedef .)
    INT             reduce using rule 102 (condicional_1 -> typedef .)
    BOOL            reduce using rule 102 (condicional_1 -> typedef .)
    ID              reduce using rule 102 (condicional_1 -> typedef .)
    STRING          reduce using rule 102 (condicional_1 -> typedef .)
    OP_NOT          reduce using rule 102 (condicional_1 -> typedef .)
    NOT             reduce using rule 102 (condicional_1 -> typedef .)
    SIZEOF          reduce using rule 102 (condicional_1 -> typedef .)
    NEW             reduce using rule 102 (condicional_1 -> typedef .)
    INT_V           reduce using rule 102 (condicional_1 -> typedef .)
    TRUE            reduce using rule 102 (condicional_1 -> typedef .)
    FALSE           reduce using rule 102 (condicional_1 -> typedef .)
    STRING_V        reduce using rule 102 (condicional_1 -> typedef .)
    THIS            reduce using rule 102 (condicional_1 -> typedef .)
    PARENT_ABRE     reduce using rule 102 (condicional_1 -> typedef .)
    TYPEID          reduce using rule 102 (condicional_1 -> typedef .)
    CHAVE_FECHA     reduce using rule 102 (condicional_1 -> typedef .)
    ELSE            reduce using rule 102 (condicional_1 -> typedef .)


state 139

    (103) condicional_1 -> using .

    IF              reduce using rule 103 (condicional_1 -> using .)
    WHILE           reduce using rule 103 (condicional_1 -> using .)
    FOR             reduce using rule 103 (condicional_1 -> using .)
    RETURN          reduce using rule 103 (condicional_1 -> using .)
    TYPEDEF         reduce using rule 103 (condicional_1 -> using .)
    USING           reduce using rule 103 (condicional_1 -> using .)
    INT             reduce using rule 103 (condicional_1 -> using .)
    BOOL            reduce using rule 103 (condicional_1 -> using .)
    ID              reduce using rule 103 (condicional_1 -> using .)
    STRING          reduce using rule 103 (condicional_1 -> using .)
    OP_NOT          reduce using rule 103 (condicional_1 -> using .)
    NOT             reduce using rule 103 (condicional_1 -> using .)
    SIZEOF          reduce using rule 103 (condicional_1 -> using .)
    NEW             reduce using rule 103 (condicional_1 -> using .)
    INT_V           reduce using rule 103 (condicional_1 -> using .)
    TRUE            reduce using rule 103 (condicional_1 -> using .)
    FALSE           reduce using rule 103 (condicional_1 -> using .)
    STRING_V        reduce using rule 103 (condicional_1 -> using .)
    THIS            reduce using rule 103 (condicional_1 -> using .)
    PARENT_ABRE     reduce using rule 103 (condicional_1 -> using .)
    TYPEID          reduce using rule 103 (condicional_1 -> using .)
    CHAVE_FECHA     reduce using rule 103 (condicional_1 -> using .)
    ELSE            reduce using rule 103 (condicional_1 -> using .)


state 140

    (104) condicional_1 -> WHILE . PARENT_ABRE exp PARENT_FECHA body
    (106) condicional_1 -> WHILE . PARENT_ABRE exp PARENT_FECHA condicional_1

    PARENT_ABRE     shift and go to state 188


state 141

    (105) condicional_1 -> FOR . PARENT_ABRE for_log PARENT_FECHA body
    (107) condicional_1 -> FOR . PARENT_ABRE for_log PARENT_FECHA condicional_1

    PARENT_ABRE     shift and go to state 189


state 142

    (108) condicional_1 -> RETURN . exp PONTO_VIRG
    (109) condicional_1 -> RETURN . PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 191
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 190
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 143

    (30) decl_variavel -> tipo . ID PONTO_VIRG
    (31) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> tipo . ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n PONTO_VIRG

    ID              shift and go to state 192


state 144

    (132) tipo -> ID .
    (86) exp_10 -> ID .
    (94) chamada_funcao -> ID . PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> ID . PARENT_ABRE PARENT_FECHA

    ID              reduce using rule 132 (tipo -> ID .)
    MAIS_MAIS       reduce using rule 86 (exp_10 -> ID .)
    MENOS_MENOS     reduce using rule 86 (exp_10 -> ID .)
    PONTO           reduce using rule 86 (exp_10 -> ID .)
    SETA            reduce using rule 86 (exp_10 -> ID .)
    MULT            reduce using rule 86 (exp_10 -> ID .)
    DIV             reduce using rule 86 (exp_10 -> ID .)
    MODULO          reduce using rule 86 (exp_10 -> ID .)
    SOMA            reduce using rule 86 (exp_10 -> ID .)
    SUB             reduce using rule 86 (exp_10 -> ID .)
    MENOR_Q         reduce using rule 86 (exp_10 -> ID .)
    MAIOR_Q         reduce using rule 86 (exp_10 -> ID .)
    MAIOR_IGUAL     reduce using rule 86 (exp_10 -> ID .)
    MENOR_IGUAL     reduce using rule 86 (exp_10 -> ID .)
    IGUAL           reduce using rule 86 (exp_10 -> ID .)
    DIFERENTE       reduce using rule 86 (exp_10 -> ID .)
    OP_OU_EX        reduce using rule 86 (exp_10 -> ID .)
    XOR             reduce using rule 86 (exp_10 -> ID .)
    OP_E            reduce using rule 86 (exp_10 -> ID .)
    AND             reduce using rule 86 (exp_10 -> ID .)
    OP_OU           reduce using rule 86 (exp_10 -> ID .)
    OR              reduce using rule 86 (exp_10 -> ID .)
    PONTO_VIRG      reduce using rule 86 (exp_10 -> ID .)
    RECEBER         reduce using rule 86 (exp_10 -> ID .)
    PARENT_ABRE     shift and go to state 84


state 145

    (24) decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .

    CLASS           reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    VOID            reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    TYPEDEF         reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    USING           reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    INT             reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    BOOL            reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    ID              reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    STRING          reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    $end            reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    STATIC          reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)


state 146

    (97) parametros_chamada -> ID . VIRGULA parametros_chamada
    (98) parametros_chamada -> ID .

    VIRGULA         shift and go to state 193
    PARENT_FECHA    reduce using rule 98 (parametros_chamada -> ID .)


state 147

    (94) chamada_funcao -> ID PARENT_ABRE parametros_chamada . PARENT_FECHA

    PARENT_FECHA    shift and go to state 194


state 148

    (95) chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .

    MAIS_MAIS       reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PONTO           reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SETA            reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MULT            reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    DIV             reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MODULO          reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SOMA            reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SUB             reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOR_Q         reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MAIOR_Q         reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    IGUAL           reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    DIFERENTE       reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_OU_EX        reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    XOR             reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_E            reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    AND             reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_OU           reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OR              reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    RECEBER         reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    VIRGULA         reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 95 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)


state 149

    (50) exp -> exp RECEBER exp_1 .
    (52) exp_1 -> exp_1 . OP_OU exp_2
    (53) exp_1 -> exp_1 . OR exp_2

    PONTO_VIRG      reduce using rule 50 (exp -> exp RECEBER exp_1 .)
    RECEBER         reduce using rule 50 (exp -> exp RECEBER exp_1 .)
    VIRGULA         reduce using rule 50 (exp -> exp RECEBER exp_1 .)
    PARENT_FECHA    reduce using rule 50 (exp -> exp RECEBER exp_1 .)
    OP_OU           shift and go to state 88
    OR              shift and go to state 89


state 150

    (33) decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .

    CLASS           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    VOID            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    TYPEDEF         reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    USING           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    INT             reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    BOOL            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    ID              reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    STRING          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    $end            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    STATIC          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    IF              reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    WHILE           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    FOR             reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    RETURN          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    OP_NOT          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    NOT             reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    SIZEOF          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    NEW             reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    INT_V           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    TRUE            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    FALSE           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    STRING_V        reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    THIS            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    TYPEID          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    ELSE            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)


state 151

    (52) exp_1 -> exp_1 OP_OU exp_2 .
    (55) exp_2 -> exp_2 . OP_E exp_3
    (56) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 52 (exp_1 -> exp_1 OP_OU exp_2 .)
    OR              reduce using rule 52 (exp_1 -> exp_1 OP_OU exp_2 .)
    PONTO_VIRG      reduce using rule 52 (exp_1 -> exp_1 OP_OU exp_2 .)
    RECEBER         reduce using rule 52 (exp_1 -> exp_1 OP_OU exp_2 .)
    VIRGULA         reduce using rule 52 (exp_1 -> exp_1 OP_OU exp_2 .)
    PARENT_FECHA    reduce using rule 52 (exp_1 -> exp_1 OP_OU exp_2 .)
    OP_E            shift and go to state 90
    AND             shift and go to state 91


state 152

    (53) exp_1 -> exp_1 OR exp_2 .
    (55) exp_2 -> exp_2 . OP_E exp_3
    (56) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 53 (exp_1 -> exp_1 OR exp_2 .)
    OR              reduce using rule 53 (exp_1 -> exp_1 OR exp_2 .)
    PONTO_VIRG      reduce using rule 53 (exp_1 -> exp_1 OR exp_2 .)
    RECEBER         reduce using rule 53 (exp_1 -> exp_1 OR exp_2 .)
    VIRGULA         reduce using rule 53 (exp_1 -> exp_1 OR exp_2 .)
    PARENT_FECHA    reduce using rule 53 (exp_1 -> exp_1 OR exp_2 .)
    OP_E            shift and go to state 90
    AND             shift and go to state 91


state 153

    (55) exp_2 -> exp_2 OP_E exp_3 .
    (58) exp_3 -> exp_3 . OP_OU_EX exp_4
    (59) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 55 (exp_2 -> exp_2 OP_E exp_3 .)
    AND             reduce using rule 55 (exp_2 -> exp_2 OP_E exp_3 .)
    OP_OU           reduce using rule 55 (exp_2 -> exp_2 OP_E exp_3 .)
    OR              reduce using rule 55 (exp_2 -> exp_2 OP_E exp_3 .)
    PONTO_VIRG      reduce using rule 55 (exp_2 -> exp_2 OP_E exp_3 .)
    RECEBER         reduce using rule 55 (exp_2 -> exp_2 OP_E exp_3 .)
    VIRGULA         reduce using rule 55 (exp_2 -> exp_2 OP_E exp_3 .)
    PARENT_FECHA    reduce using rule 55 (exp_2 -> exp_2 OP_E exp_3 .)
    OP_OU_EX        shift and go to state 92
    XOR             shift and go to state 93


state 154

    (56) exp_2 -> exp_2 AND exp_3 .
    (58) exp_3 -> exp_3 . OP_OU_EX exp_4
    (59) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 56 (exp_2 -> exp_2 AND exp_3 .)
    AND             reduce using rule 56 (exp_2 -> exp_2 AND exp_3 .)
    OP_OU           reduce using rule 56 (exp_2 -> exp_2 AND exp_3 .)
    OR              reduce using rule 56 (exp_2 -> exp_2 AND exp_3 .)
    PONTO_VIRG      reduce using rule 56 (exp_2 -> exp_2 AND exp_3 .)
    RECEBER         reduce using rule 56 (exp_2 -> exp_2 AND exp_3 .)
    VIRGULA         reduce using rule 56 (exp_2 -> exp_2 AND exp_3 .)
    PARENT_FECHA    reduce using rule 56 (exp_2 -> exp_2 AND exp_3 .)
    OP_OU_EX        shift and go to state 92
    XOR             shift and go to state 93


state 155

    (58) exp_3 -> exp_3 OP_OU_EX exp_4 .
    (61) exp_4 -> exp_4 . IGUAL exp_5
    (62) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    XOR             reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OP_E            reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    AND             reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OP_OU           reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OR              reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    PONTO_VIRG      reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    RECEBER         reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    VIRGULA         reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    PARENT_FECHA    reduce using rule 58 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    IGUAL           shift and go to state 94
    DIFERENTE       shift and go to state 95


state 156

    (59) exp_3 -> exp_3 XOR exp_4 .
    (61) exp_4 -> exp_4 . IGUAL exp_5
    (62) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    XOR             reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    OP_E            reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    AND             reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    OP_OU           reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    OR              reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    PONTO_VIRG      reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    RECEBER         reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    VIRGULA         reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    PARENT_FECHA    reduce using rule 59 (exp_3 -> exp_3 XOR exp_4 .)
    IGUAL           shift and go to state 94
    DIFERENTE       shift and go to state 95


state 157

    (61) exp_4 -> exp_4 IGUAL exp_5 .
    (64) exp_5 -> exp_5 . MENOR_Q exp_6
    (65) exp_5 -> exp_5 . MAIOR_Q exp_6
    (66) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (67) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    DIFERENTE       reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_OU_EX        reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    XOR             reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_E            reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    AND             reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_OU           reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    OR              reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    PONTO_VIRG      reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    RECEBER         reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    VIRGULA         reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    PARENT_FECHA    reduce using rule 61 (exp_4 -> exp_4 IGUAL exp_5 .)
    MENOR_Q         shift and go to state 96
    MAIOR_Q         shift and go to state 97
    MAIOR_IGUAL     shift and go to state 98
    MENOR_IGUAL     shift and go to state 99


state 158

    (62) exp_4 -> exp_4 DIFERENTE exp_5 .
    (64) exp_5 -> exp_5 . MENOR_Q exp_6
    (65) exp_5 -> exp_5 . MAIOR_Q exp_6
    (66) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (67) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    DIFERENTE       reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_OU_EX        reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    XOR             reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_E            reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    AND             reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_OU           reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OR              reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    PONTO_VIRG      reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    RECEBER         reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    VIRGULA         reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    PARENT_FECHA    reduce using rule 62 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    MENOR_Q         shift and go to state 96
    MAIOR_Q         shift and go to state 97
    MAIOR_IGUAL     shift and go to state 98
    MENOR_IGUAL     shift and go to state 99


state 159

    (64) exp_5 -> exp_5 MENOR_Q exp_6 .
    (69) exp_6 -> exp_6 . SOMA exp_7
    (70) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MAIOR_Q         reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MAIOR_IGUAL     reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MENOR_IGUAL     reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    IGUAL           reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    DIFERENTE       reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_OU_EX        reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    XOR             reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_E            reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    AND             reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_OU           reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OR              reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    PONTO_VIRG      reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    RECEBER         reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    VIRGULA         reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    PARENT_FECHA    reduce using rule 64 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    SOMA            shift and go to state 100
    SUB             shift and go to state 101


state 160

    (65) exp_5 -> exp_5 MAIOR_Q exp_6 .
    (69) exp_6 -> exp_6 . SOMA exp_7
    (70) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MAIOR_Q         reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MAIOR_IGUAL     reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MENOR_IGUAL     reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    IGUAL           reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    DIFERENTE       reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_OU_EX        reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    XOR             reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_E            reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    AND             reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_OU           reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OR              reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    PONTO_VIRG      reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    RECEBER         reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    VIRGULA         reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    PARENT_FECHA    reduce using rule 65 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    SOMA            shift and go to state 100
    SUB             shift and go to state 101


state 161

    (66) exp_5 -> exp_5 MAIOR_IGUAL exp_6 .
    (69) exp_6 -> exp_6 . SOMA exp_7
    (70) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MAIOR_Q         reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MAIOR_IGUAL     reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MENOR_IGUAL     reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    IGUAL           reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    DIFERENTE       reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_OU_EX        reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    XOR             reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_E            reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    AND             reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_OU           reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OR              reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    PONTO_VIRG      reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    RECEBER         reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    VIRGULA         reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    PARENT_FECHA    reduce using rule 66 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    SOMA            shift and go to state 100
    SUB             shift and go to state 101


state 162

    (67) exp_5 -> exp_5 MENOR_IGUAL exp_6 .
    (69) exp_6 -> exp_6 . SOMA exp_7
    (70) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MAIOR_Q         reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MAIOR_IGUAL     reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MENOR_IGUAL     reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    IGUAL           reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    DIFERENTE       reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_OU_EX        reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    XOR             reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_E            reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    AND             reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_OU           reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OR              reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    PONTO_VIRG      reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    RECEBER         reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    VIRGULA         reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    PARENT_FECHA    reduce using rule 67 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    SOMA            shift and go to state 100
    SUB             shift and go to state 101


state 163

    (69) exp_6 -> exp_6 SOMA exp_7 .
    (72) exp_7 -> exp_7 . MULT exp_8
    (73) exp_7 -> exp_7 . DIV exp_8
    (74) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    SUB             reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    MENOR_Q         reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    MAIOR_Q         reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    MAIOR_IGUAL     reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    MENOR_IGUAL     reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    IGUAL           reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    DIFERENTE       reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_OU_EX        reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    XOR             reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_E            reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    AND             reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_OU           reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    OR              reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    PONTO_VIRG      reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    RECEBER         reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    VIRGULA         reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    PARENT_FECHA    reduce using rule 69 (exp_6 -> exp_6 SOMA exp_7 .)
    MULT            shift and go to state 102
    DIV             shift and go to state 103
    MODULO          shift and go to state 104


state 164

    (70) exp_6 -> exp_6 SUB exp_7 .
    (72) exp_7 -> exp_7 . MULT exp_8
    (73) exp_7 -> exp_7 . DIV exp_8
    (74) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    SUB             reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    MENOR_Q         reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    MAIOR_Q         reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    MAIOR_IGUAL     reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    MENOR_IGUAL     reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    IGUAL           reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    DIFERENTE       reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    OP_OU_EX        reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    XOR             reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    OP_E            reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    AND             reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    OP_OU           reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    OR              reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    PONTO_VIRG      reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    RECEBER         reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    VIRGULA         reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    PARENT_FECHA    reduce using rule 70 (exp_6 -> exp_6 SUB exp_7 .)
    MULT            shift and go to state 102
    DIV             shift and go to state 103
    MODULO          shift and go to state 104


state 165

    (72) exp_7 -> exp_7 MULT exp_8 .

    MULT            reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    DIV             reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    MODULO          reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    SOMA            reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    SUB             reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    MENOR_Q         reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    MAIOR_Q         reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    MAIOR_IGUAL     reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    MENOR_IGUAL     reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    IGUAL           reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    DIFERENTE       reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    OP_OU_EX        reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    XOR             reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    OP_E            reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    AND             reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    OP_OU           reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    OR              reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    PONTO_VIRG      reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    RECEBER         reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    VIRGULA         reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)
    PARENT_FECHA    reduce using rule 72 (exp_7 -> exp_7 MULT exp_8 .)


state 166

    (73) exp_7 -> exp_7 DIV exp_8 .

    MULT            reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    DIV             reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    MODULO          reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    SOMA            reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    SUB             reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    MENOR_Q         reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    MAIOR_Q         reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    MAIOR_IGUAL     reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    MENOR_IGUAL     reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    IGUAL           reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    DIFERENTE       reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    OP_OU_EX        reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    XOR             reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    OP_E            reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    AND             reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    OP_OU           reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    OR              reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    PONTO_VIRG      reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    RECEBER         reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    VIRGULA         reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)
    PARENT_FECHA    reduce using rule 73 (exp_7 -> exp_7 DIV exp_8 .)


state 167

    (74) exp_7 -> exp_7 MODULO exp_8 .

    MULT            reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    DIV             reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    MODULO          reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    SOMA            reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    SUB             reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    MENOR_Q         reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    MAIOR_Q         reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    MAIOR_IGUAL     reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    MENOR_IGUAL     reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    IGUAL           reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    DIFERENTE       reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_OU_EX        reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    XOR             reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_E            reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    AND             reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_OU           reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    OR              reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    PONTO_VIRG      reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    RECEBER         reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    VIRGULA         reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)
    PARENT_FECHA    reduce using rule 74 (exp_7 -> exp_7 MODULO exp_8 .)


state 168

    (83) exp_9 -> exp_9 PONTO exp_10 .

    MAIS_MAIS       reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    MENOS_MENOS     reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    PONTO           reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    SETA            reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    MULT            reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    DIV             reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    MODULO          reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    SOMA            reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    SUB             reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    MENOR_Q         reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    MAIOR_Q         reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    MAIOR_IGUAL     reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    MENOR_IGUAL     reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    IGUAL           reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    DIFERENTE       reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    OP_OU_EX        reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    XOR             reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    OP_E            reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    AND             reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    OP_OU           reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    OR              reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    PONTO_VIRG      reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    RECEBER         reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    VIRGULA         reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)
    PARENT_FECHA    reduce using rule 83 (exp_9 -> exp_9 PONTO exp_10 .)


state 169

    (84) exp_9 -> exp_9 SETA exp_10 .

    MAIS_MAIS       reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    MENOS_MENOS     reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    PONTO           reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    SETA            reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    MULT            reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    DIV             reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    MODULO          reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    SOMA            reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    SUB             reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    MENOR_Q         reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    MAIOR_Q         reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    MAIOR_IGUAL     reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    MENOR_IGUAL     reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    IGUAL           reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    DIFERENTE       reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    OP_OU_EX        reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    XOR             reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    OP_E            reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    AND             reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    OP_OU           reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    OR              reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    PONTO_VIRG      reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    RECEBER         reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    VIRGULA         reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)
    PARENT_FECHA    reduce using rule 84 (exp_9 -> exp_9 SETA exp_10 .)


state 170

    (80) exp_8 -> SIZEOF PARENT_ABRE exp_9 . PARENT_FECHA
    (83) exp_9 -> exp_9 . PONTO exp_10
    (84) exp_9 -> exp_9 . SETA exp_10

    PARENT_FECHA    shift and go to state 195
    PONTO           shift and go to state 108
    SETA            shift and go to state 109


state 171

    (93) exp_10 -> PARENT_ABRE exp PARENT_FECHA .

    MAIS_MAIS       reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    PONTO           reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    SETA            reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MULT            reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    DIV             reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MODULO          reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    SOMA            reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    SUB             reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOR_Q         reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_Q         reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    IGUAL           reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    DIFERENTE       reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_OU_EX        reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    XOR             reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_E            reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    AND             reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_OU           reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    OR              reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    RECEBER         reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    VIRGULA         reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 93 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)


state 172

    (96) chamada_funcao -> TYPEID PARENT_ABRE exp . PARENT_FECHA
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 196
    RECEBER         shift and go to state 85


state 173

    (35) decl_variavel_n -> VIRGULA ID RECEBER exp . decl_variavel_n
    (36) decl_variavel_n -> VIRGULA ID RECEBER exp .
    (50) exp -> exp . RECEBER exp_1
    (34) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (35) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (36) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (37) decl_variavel_n -> . VIRGULA ID

    PONTO_VIRG      reduce using rule 36 (decl_variavel_n -> VIRGULA ID RECEBER exp .)
    RECEBER         shift and go to state 85
    VIRGULA         shift and go to state 32

    decl_variavel_n                shift and go to state 197

state 174

    (27) decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .

    CLASS           reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    VOID            reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    TYPEDEF         reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    USING           reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    INT             reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    BOOL            reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    ID              reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    STRING          reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    $end            reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    STATIC          reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)


state 175

    (25) decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .

    CLASS           reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    VOID            reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    TYPEDEF         reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    USING           reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    INT             reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    BOOL            reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    ID              reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    STRING          reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    $end            reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    STATIC          reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 25 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)


state 176

    (40) decl_typedef_n -> VIRGULA ID decl_typedef_n .

    PONTO_VIRG      reduce using rule 40 (decl_typedef_n -> VIRGULA ID decl_typedef_n .)


state 177

    (12) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA .

    PONTO_VIRG      reduce using rule 12 (body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA .)


state 178

    (18) content_class -> decl_variavel content_class .

    CHAVE_FECHA     reduce using rule 18 (content_class -> decl_variavel content_class .)


state 179

    (19) content_class -> decl_funcao content_class .

    CHAVE_FECHA     reduce using rule 19 (content_class -> decl_funcao content_class .)


state 180

    (16) content_class -> STATIC decl_variavel .
    (20) content_class -> STATIC decl_variavel . content_class
    (14) content_class -> . decl_variavel
    (15) content_class -> . decl_funcao
    (16) content_class -> . STATIC decl_variavel
    (17) content_class -> . STATIC decl_funcao
    (18) content_class -> . decl_variavel content_class
    (19) content_class -> . decl_funcao content_class
    (20) content_class -> . STATIC decl_variavel content_class
    (21) content_class -> . STATIC decl_funcao content_class
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    CHAVE_FECHA     reduce using rule 16 (content_class -> STATIC decl_variavel .)
    STATIC          shift and go to state 126
    VOID            shift and go to state 10
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    decl_variavel                  shift and go to state 124
    content_class                  shift and go to state 198
    decl_funcao                    shift and go to state 125
    tipo                           shift and go to state 127

state 181

    (17) content_class -> STATIC decl_funcao .
    (21) content_class -> STATIC decl_funcao . content_class
    (14) content_class -> . decl_variavel
    (15) content_class -> . decl_funcao
    (16) content_class -> . STATIC decl_variavel
    (17) content_class -> . STATIC decl_funcao
    (18) content_class -> . decl_variavel content_class
    (19) content_class -> . decl_funcao content_class
    (20) content_class -> . STATIC decl_variavel content_class
    (21) content_class -> . STATIC decl_funcao content_class
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (22) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (26) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING

    CHAVE_FECHA     reduce using rule 17 (content_class -> STATIC decl_funcao .)
    STATIC          shift and go to state 126
    VOID            shift and go to state 10
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 8
    STRING          shift and go to state 15

    decl_funcao                    shift and go to state 125
    content_class                  shift and go to state 199
    decl_variavel                  shift and go to state 124
    tipo                           shift and go to state 127

state 182

    (30) decl_variavel -> tipo ID . PONTO_VIRG
    (31) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (32) decl_variavel -> tipo ID . decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n PONTO_VIRG
    (22) decl_funcao -> tipo ID . PARENT_ABRE parametros PARENT_FECHA body
    (23) decl_funcao -> tipo ID . PARENT_ABRE PARENT_FECHA body
    (24) decl_funcao -> tipo ID . PARENT_ABRE VOID PARENT_FECHA body
    (34) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (35) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (36) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (37) decl_variavel_n -> . VIRGULA ID

    PONTO_VIRG      shift and go to state 29
    RECEBER         shift and go to state 30
    PARENT_ABRE     shift and go to state 28
    VIRGULA         shift and go to state 32

    decl_variavel_n                shift and go to state 31

state 183

    (29) parametros -> tipo ID VIRGULA parametros .

    PARENT_FECHA    reduce using rule 29 (parametros -> tipo ID VIRGULA parametros .)


state 184

    (44) body -> CHAVE_ABRE comandos CHAVE_FECHA .

    CLASS           reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    VOID            reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TYPEDEF         reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    USING           reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    INT             reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    BOOL            reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    ID              reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    STRING          reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    $end            reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    STATIC          reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    CHAVE_FECHA     reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    ELSE            reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    IF              reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    WHILE           reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    FOR             reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    RETURN          reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    OP_NOT          reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    NOT             reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    SIZEOF          reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    NEW             reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    INT_V           reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TRUE            reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    FALSE           reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    STRING_V        reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    THIS            reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    PARENT_ABRE     reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TYPEID          reduce using rule 44 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)


state 185

    (47) comandos -> comando comandos .

    CHAVE_FECHA     reduce using rule 47 (comandos -> comando comandos .)


state 186

    (99) condicional_1 -> IF PARENT_ABRE . exp PARENT_FECHA rest_if
    (110) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body
    (111) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA comando
    (112) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body ELSE condicional_2
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 200
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 187

    (100) condicional_1 -> exp PONTO_VIRG .

    IF              reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    WHILE           reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    FOR             reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    RETURN          reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    TYPEDEF         reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    USING           reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    INT             reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    BOOL            reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    ID              reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    STRING          reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    OP_NOT          reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    NOT             reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    SIZEOF          reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    NEW             reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    INT_V           reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    TRUE            reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    FALSE           reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    STRING_V        reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    THIS            reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    TYPEID          reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)
    ELSE            reduce using rule 100 (condicional_1 -> exp PONTO_VIRG .)


state 188

    (104) condicional_1 -> WHILE PARENT_ABRE . exp PARENT_FECHA body
    (106) condicional_1 -> WHILE PARENT_ABRE . exp PARENT_FECHA condicional_1
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 201
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 189

    (105) condicional_1 -> FOR PARENT_ABRE . for_log PARENT_FECHA body
    (107) condicional_1 -> FOR PARENT_ABRE . for_log PARENT_FECHA condicional_1
    (118) for_log -> . decl_variavel PONTO_VIRG
    (119) for_log -> . decl_variavel exp PONTO_VIRG
    (120) for_log -> . decl_variavel exp PONTO_VIRG exp
    (121) for_log -> . decl_variavel PONTO_VIRG exp
    (122) for_log -> . exp PONTO_VIRG PONTO_VIRG exp
    (123) for_log -> . exp PONTO_VIRG exp PONTO_VIRG exp
    (124) for_log -> . exp PONTO_VIRG PONTO_VIRG
    (125) for_log -> . exp PONTO_VIRG exp PONTO_VIRG
    (126) for_log -> . PONTO_VIRG exp PONTO_VIRG exp
    (127) for_log -> . PONTO_VIRG exp PONTO_VIRG
    (128) for_log -> . PONTO_VIRG PONTO_VIRG exp
    (129) for_log -> . PONTO_VIRG PONTO_VIRG
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 204
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    for_log                        shift and go to state 202
    decl_variavel                  shift and go to state 203
    exp                            shift and go to state 205
    tipo                           shift and go to state 143
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 190

    (108) condicional_1 -> RETURN exp . PONTO_VIRG
    (50) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 206
    RECEBER         shift and go to state 85


state 191

    (109) condicional_1 -> RETURN PONTO_VIRG .

    IF              reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    WHILE           reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    FOR             reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    RETURN          reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    TYPEDEF         reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    USING           reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    INT             reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    BOOL            reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    ID              reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    STRING          reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    OP_NOT          reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    NOT             reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    SIZEOF          reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    NEW             reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    INT_V           reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    TRUE            reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    FALSE           reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    STRING_V        reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    THIS            reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    TYPEID          reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)
    ELSE            reduce using rule 109 (condicional_1 -> RETURN PONTO_VIRG .)


state 192

    (30) decl_variavel -> tipo ID . PONTO_VIRG
    (31) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (32) decl_variavel -> tipo ID . decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n PONTO_VIRG
    (34) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (35) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (36) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (37) decl_variavel_n -> . VIRGULA ID

    PONTO_VIRG      shift and go to state 29
    RECEBER         shift and go to state 30
    VIRGULA         shift and go to state 32

    decl_variavel_n                shift and go to state 31

state 193

    (97) parametros_chamada -> ID VIRGULA . parametros_chamada
    (97) parametros_chamada -> . ID VIRGULA parametros_chamada
    (98) parametros_chamada -> . ID

    ID              shift and go to state 146

    parametros_chamada             shift and go to state 207

state 194

    (94) chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .

    MAIS_MAIS       reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    PONTO           reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    SETA            reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MULT            reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    DIV             reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MODULO          reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    SOMA            reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    SUB             reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MENOR_Q         reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MAIOR_Q         reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    IGUAL           reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    DIFERENTE       reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    OP_OU_EX        reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    XOR             reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    OP_E            reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    AND             reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    OP_OU           reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    OR              reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    RECEBER         reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    VIRGULA         reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 94 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)


state 195

    (80) exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .

    MULT            reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    DIV             reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MODULO          reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    SOMA            reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    SUB             reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MENOR_Q         reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MAIOR_Q         reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    IGUAL           reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    DIFERENTE       reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_OU_EX        reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    XOR             reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_E            reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    AND             reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_OU           reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OR              reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    RECEBER         reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    VIRGULA         reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 80 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)


state 196

    (96) chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .

    MAIS_MAIS       reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PONTO           reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SETA            reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MULT            reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    DIV             reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MODULO          reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SOMA            reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SUB             reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOR_Q         reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_Q         reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    IGUAL           reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    DIFERENTE       reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_OU_EX        reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    XOR             reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_E            reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    AND             reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_OU           reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OR              reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    RECEBER         reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    VIRGULA         reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 96 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)


state 197

    (35) decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .

    PONTO_VIRG      reduce using rule 35 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)


state 198

    (20) content_class -> STATIC decl_variavel content_class .

    CHAVE_FECHA     reduce using rule 20 (content_class -> STATIC decl_variavel content_class .)


state 199

    (21) content_class -> STATIC decl_funcao content_class .

    CHAVE_FECHA     reduce using rule 21 (content_class -> STATIC decl_funcao content_class .)


state 200

    (99) condicional_1 -> IF PARENT_ABRE exp . PARENT_FECHA rest_if
    (110) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body
    (111) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA comando
    (112) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body ELSE condicional_2
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 208
    RECEBER         shift and go to state 85


state 201

    (104) condicional_1 -> WHILE PARENT_ABRE exp . PARENT_FECHA body
    (106) condicional_1 -> WHILE PARENT_ABRE exp . PARENT_FECHA condicional_1
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 209
    RECEBER         shift and go to state 85


state 202

    (105) condicional_1 -> FOR PARENT_ABRE for_log . PARENT_FECHA body
    (107) condicional_1 -> FOR PARENT_ABRE for_log . PARENT_FECHA condicional_1

    PARENT_FECHA    shift and go to state 210


state 203

    (118) for_log -> decl_variavel . PONTO_VIRG
    (119) for_log -> decl_variavel . exp PONTO_VIRG
    (120) for_log -> decl_variavel . exp PONTO_VIRG exp
    (121) for_log -> decl_variavel . PONTO_VIRG exp
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 211
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 212
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 204

    (126) for_log -> PONTO_VIRG . exp PONTO_VIRG exp
    (127) for_log -> PONTO_VIRG . exp PONTO_VIRG
    (128) for_log -> PONTO_VIRG . PONTO_VIRG exp
    (129) for_log -> PONTO_VIRG . PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 213
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 214
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 205

    (122) for_log -> exp . PONTO_VIRG PONTO_VIRG exp
    (123) for_log -> exp . PONTO_VIRG exp PONTO_VIRG exp
    (124) for_log -> exp . PONTO_VIRG PONTO_VIRG
    (125) for_log -> exp . PONTO_VIRG exp PONTO_VIRG
    (50) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 215
    RECEBER         shift and go to state 85


state 206

    (108) condicional_1 -> RETURN exp PONTO_VIRG .

    IF              reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    WHILE           reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    FOR             reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    RETURN          reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    TYPEDEF         reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    USING           reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    INT             reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    BOOL            reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    ID              reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    STRING          reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    OP_NOT          reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    NOT             reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    SIZEOF          reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    NEW             reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    INT_V           reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    TRUE            reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    FALSE           reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    STRING_V        reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    THIS            reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    TYPEID          reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)
    ELSE            reduce using rule 108 (condicional_1 -> RETURN exp PONTO_VIRG .)


state 207

    (97) parametros_chamada -> ID VIRGULA parametros_chamada .

    PARENT_FECHA    reduce using rule 97 (parametros_chamada -> ID VIRGULA parametros_chamada .)


state 208

    (99) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA . rest_if
    (110) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body
    (111) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . comando
    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . condicional_1 ELSE condicional_2
    (113) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body ELSE condicional_2
    (114) rest_if -> . condicional_1 ELSE condicional_1
    (115) rest_if -> . body ELSE body
    (116) rest_if -> . condicional_1 ELSE body
    (117) rest_if -> . body ELSE condicional_1
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (48) comando -> . condicional_1
    (49) comando -> . condicional_2
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (110) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (111) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 82
    IF              shift and go to state 135
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 136
    rest_if                        shift and go to state 216
    body                           shift and go to state 217
    comando                        shift and go to state 218
    condicional_1                  shift and go to state 219
    condicional_2                  shift and go to state 134
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 209

    (104) condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA . body
    (106) condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA . condicional_1
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 82
    IF              shift and go to state 222
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 136
    body                           shift and go to state 220
    condicional_1                  shift and go to state 221
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 210

    (105) condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA . body
    (107) condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA . condicional_1
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 82
    IF              shift and go to state 222
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    body                           shift and go to state 223
    condicional_1                  shift and go to state 224
    exp                            shift and go to state 136
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 211

    (118) for_log -> decl_variavel PONTO_VIRG .
    (121) for_log -> decl_variavel PONTO_VIRG . exp
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 118 (for_log -> decl_variavel PONTO_VIRG .)
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 225
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 212

    (119) for_log -> decl_variavel exp . PONTO_VIRG
    (120) for_log -> decl_variavel exp . PONTO_VIRG exp
    (50) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 226
    RECEBER         shift and go to state 85


state 213

    (128) for_log -> PONTO_VIRG PONTO_VIRG . exp
    (129) for_log -> PONTO_VIRG PONTO_VIRG .
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 129 (for_log -> PONTO_VIRG PONTO_VIRG .)
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 227
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 214

    (126) for_log -> PONTO_VIRG exp . PONTO_VIRG exp
    (127) for_log -> PONTO_VIRG exp . PONTO_VIRG
    (50) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 228
    RECEBER         shift and go to state 85


state 215

    (122) for_log -> exp PONTO_VIRG . PONTO_VIRG exp
    (123) for_log -> exp PONTO_VIRG . exp PONTO_VIRG exp
    (124) for_log -> exp PONTO_VIRG . PONTO_VIRG
    (125) for_log -> exp PONTO_VIRG . exp PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 230
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 229
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 216

    (99) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .

    IF              reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    WHILE           reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    FOR             reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    RETURN          reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    TYPEDEF         reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    USING           reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    INT             reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    BOOL            reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    ID              reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    STRING          reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    OP_NOT          reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    NOT             reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    SIZEOF          reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    NEW             reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    INT_V           reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    TRUE            reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    FALSE           reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    STRING_V        reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    THIS            reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    PARENT_ABRE     reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    TYPEID          reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    CHAVE_FECHA     reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    ELSE            reduce using rule 99 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)


state 217

    (110) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .
    (113) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body . ELSE condicional_2
    (115) rest_if -> body . ELSE body
    (117) rest_if -> body . ELSE condicional_1

    IF              reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    WHILE           reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    FOR             reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    RETURN          reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    TYPEDEF         reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    USING           reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    INT             reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    BOOL            reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    ID              reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    STRING          reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    OP_NOT          reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    NOT             reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    SIZEOF          reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    NEW             reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    INT_V           reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    TRUE            reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    FALSE           reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    STRING_V        reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    THIS            reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    TYPEID          reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 110 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    ELSE            shift and go to state 231


state 218

    (111) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .

    IF              reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    WHILE           reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    FOR             reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    RETURN          reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    TYPEDEF         reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    USING           reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    INT             reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    BOOL            reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    ID              reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    STRING          reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    OP_NOT          reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    NOT             reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    SIZEOF          reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    NEW             reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    INT_V           reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    TRUE            reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    FALSE           reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    STRING_V        reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    THIS            reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    PARENT_ABRE     reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    TYPEID          reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    CHAVE_FECHA     reduce using rule 111 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)


state 219

    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 . ELSE condicional_2
    (114) rest_if -> condicional_1 . ELSE condicional_1
    (116) rest_if -> condicional_1 . ELSE body
    (48) comando -> condicional_1 .

    ELSE            shift and go to state 232
    IF              reduce using rule 48 (comando -> condicional_1 .)
    WHILE           reduce using rule 48 (comando -> condicional_1 .)
    FOR             reduce using rule 48 (comando -> condicional_1 .)
    RETURN          reduce using rule 48 (comando -> condicional_1 .)
    TYPEDEF         reduce using rule 48 (comando -> condicional_1 .)
    USING           reduce using rule 48 (comando -> condicional_1 .)
    INT             reduce using rule 48 (comando -> condicional_1 .)
    BOOL            reduce using rule 48 (comando -> condicional_1 .)
    ID              reduce using rule 48 (comando -> condicional_1 .)
    STRING          reduce using rule 48 (comando -> condicional_1 .)
    OP_NOT          reduce using rule 48 (comando -> condicional_1 .)
    NOT             reduce using rule 48 (comando -> condicional_1 .)
    SIZEOF          reduce using rule 48 (comando -> condicional_1 .)
    NEW             reduce using rule 48 (comando -> condicional_1 .)
    INT_V           reduce using rule 48 (comando -> condicional_1 .)
    TRUE            reduce using rule 48 (comando -> condicional_1 .)
    FALSE           reduce using rule 48 (comando -> condicional_1 .)
    STRING_V        reduce using rule 48 (comando -> condicional_1 .)
    THIS            reduce using rule 48 (comando -> condicional_1 .)
    PARENT_ABRE     reduce using rule 48 (comando -> condicional_1 .)
    TYPEID          reduce using rule 48 (comando -> condicional_1 .)
    CHAVE_FECHA     reduce using rule 48 (comando -> condicional_1 .)


state 220

    (104) condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .

    IF              reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    WHILE           reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    FOR             reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    RETURN          reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    TYPEDEF         reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    USING           reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    INT             reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    BOOL            reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    ID              reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    STRING          reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    OP_NOT          reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    NOT             reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    SIZEOF          reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    NEW             reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    INT_V           reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    TRUE            reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    FALSE           reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    STRING_V        reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    THIS            reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    TYPEID          reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    ELSE            reduce using rule 104 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)


state 221

    (106) condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .

    IF              reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    WHILE           reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    FOR             reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    RETURN          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    TYPEDEF         reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    USING           reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    INT             reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    BOOL            reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    ID              reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    STRING          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    OP_NOT          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    NOT             reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    SIZEOF          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    NEW             reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    INT_V           reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    TRUE            reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    FALSE           reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    STRING_V        reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    THIS            reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    PARENT_ABRE     reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    TYPEID          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    CHAVE_FECHA     reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    ELSE            reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)


state 222

    (99) condicional_1 -> IF . PARENT_ABRE exp PARENT_FECHA rest_if

    PARENT_ABRE     shift and go to state 233


state 223

    (105) condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .

    IF              reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    WHILE           reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    FOR             reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    RETURN          reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    TYPEDEF         reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    USING           reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    INT             reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    BOOL            reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    ID              reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    STRING          reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    OP_NOT          reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    NOT             reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    SIZEOF          reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    NEW             reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    INT_V           reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    TRUE            reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    FALSE           reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    STRING_V        reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    THIS            reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    TYPEID          reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    ELSE            reduce using rule 105 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)


state 224

    (107) condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .

    IF              reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    WHILE           reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    FOR             reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    RETURN          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    TYPEDEF         reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    USING           reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    INT             reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    BOOL            reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    ID              reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    STRING          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    OP_NOT          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    NOT             reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    SIZEOF          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    NEW             reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    INT_V           reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    TRUE            reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    FALSE           reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    STRING_V        reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    THIS            reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    PARENT_ABRE     reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    TYPEID          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    CHAVE_FECHA     reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    ELSE            reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)


state 225

    (121) for_log -> decl_variavel PONTO_VIRG exp .
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 121 (for_log -> decl_variavel PONTO_VIRG exp .)
    RECEBER         shift and go to state 85


state 226

    (119) for_log -> decl_variavel exp PONTO_VIRG .
    (120) for_log -> decl_variavel exp PONTO_VIRG . exp
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 119 (for_log -> decl_variavel exp PONTO_VIRG .)
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 234
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 227

    (128) for_log -> PONTO_VIRG PONTO_VIRG exp .
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 128 (for_log -> PONTO_VIRG PONTO_VIRG exp .)
    RECEBER         shift and go to state 85


state 228

    (126) for_log -> PONTO_VIRG exp PONTO_VIRG . exp
    (127) for_log -> PONTO_VIRG exp PONTO_VIRG .
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 127 (for_log -> PONTO_VIRG exp PONTO_VIRG .)
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 235
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 229

    (123) for_log -> exp PONTO_VIRG exp . PONTO_VIRG exp
    (125) for_log -> exp PONTO_VIRG exp . PONTO_VIRG
    (50) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 236
    RECEBER         shift and go to state 85


state 230

    (122) for_log -> exp PONTO_VIRG PONTO_VIRG . exp
    (124) for_log -> exp PONTO_VIRG PONTO_VIRG .
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 124 (for_log -> exp PONTO_VIRG PONTO_VIRG .)
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 237
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 231

    (113) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE . condicional_2
    (115) rest_if -> body ELSE . body
    (117) rest_if -> body ELSE . condicional_1
    (110) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (111) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 238
    CHAVE_ABRE      shift and go to state 82
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 136
    body                           shift and go to state 239
    condicional_2                  shift and go to state 240
    condicional_1                  shift and go to state 241
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 232

    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE . condicional_2
    (114) rest_if -> condicional_1 ELSE . condicional_1
    (116) rest_if -> condicional_1 ELSE . body
    (110) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (111) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 238
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    CHAVE_ABRE      shift and go to state 82
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 136
    condicional_1                  shift and go to state 242
    condicional_2                  shift and go to state 243
    body                           shift and go to state 244
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 233

    (99) condicional_1 -> IF PARENT_ABRE . exp PARENT_FECHA rest_if
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 245
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 234

    (120) for_log -> decl_variavel exp PONTO_VIRG exp .
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 120 (for_log -> decl_variavel exp PONTO_VIRG exp .)
    RECEBER         shift and go to state 85


state 235

    (126) for_log -> PONTO_VIRG exp PONTO_VIRG exp .
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 126 (for_log -> PONTO_VIRG exp PONTO_VIRG exp .)
    RECEBER         shift and go to state 85


state 236

    (123) for_log -> exp PONTO_VIRG exp PONTO_VIRG . exp
    (125) for_log -> exp PONTO_VIRG exp PONTO_VIRG .
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 125 (for_log -> exp PONTO_VIRG exp PONTO_VIRG .)
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 246
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 237

    (122) for_log -> exp PONTO_VIRG PONTO_VIRG exp .
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 122 (for_log -> exp PONTO_VIRG PONTO_VIRG exp .)
    RECEBER         shift and go to state 85


state 238

    (110) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body
    (111) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA comando
    (112) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (99) condicional_1 -> IF . PARENT_ABRE exp PARENT_FECHA rest_if

    PARENT_ABRE     shift and go to state 247


state 239

    (115) rest_if -> body ELSE body .

    IF              reduce using rule 115 (rest_if -> body ELSE body .)
    WHILE           reduce using rule 115 (rest_if -> body ELSE body .)
    FOR             reduce using rule 115 (rest_if -> body ELSE body .)
    RETURN          reduce using rule 115 (rest_if -> body ELSE body .)
    TYPEDEF         reduce using rule 115 (rest_if -> body ELSE body .)
    USING           reduce using rule 115 (rest_if -> body ELSE body .)
    INT             reduce using rule 115 (rest_if -> body ELSE body .)
    BOOL            reduce using rule 115 (rest_if -> body ELSE body .)
    ID              reduce using rule 115 (rest_if -> body ELSE body .)
    STRING          reduce using rule 115 (rest_if -> body ELSE body .)
    OP_NOT          reduce using rule 115 (rest_if -> body ELSE body .)
    NOT             reduce using rule 115 (rest_if -> body ELSE body .)
    SIZEOF          reduce using rule 115 (rest_if -> body ELSE body .)
    NEW             reduce using rule 115 (rest_if -> body ELSE body .)
    INT_V           reduce using rule 115 (rest_if -> body ELSE body .)
    TRUE            reduce using rule 115 (rest_if -> body ELSE body .)
    FALSE           reduce using rule 115 (rest_if -> body ELSE body .)
    STRING_V        reduce using rule 115 (rest_if -> body ELSE body .)
    THIS            reduce using rule 115 (rest_if -> body ELSE body .)
    PARENT_ABRE     reduce using rule 115 (rest_if -> body ELSE body .)
    TYPEID          reduce using rule 115 (rest_if -> body ELSE body .)
    CHAVE_FECHA     reduce using rule 115 (rest_if -> body ELSE body .)
    ELSE            reduce using rule 115 (rest_if -> body ELSE body .)


state 240

    (113) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .

    IF              reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    WHILE           reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    FOR             reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    RETURN          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    TYPEDEF         reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    USING           reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    INT             reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    BOOL            reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    ID              reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    STRING          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    OP_NOT          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    NOT             reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    SIZEOF          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    NEW             reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    INT_V           reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    TRUE            reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    FALSE           reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    STRING_V        reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    THIS            reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    PARENT_ABRE     reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    TYPEID          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    CHAVE_FECHA     reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)


state 241

    (117) rest_if -> body ELSE condicional_1 .

    IF              reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    WHILE           reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    FOR             reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    RETURN          reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    TYPEDEF         reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    USING           reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    INT             reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    BOOL            reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    ID              reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    STRING          reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    OP_NOT          reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    NOT             reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    SIZEOF          reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    NEW             reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    INT_V           reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    TRUE            reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    FALSE           reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    STRING_V        reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    THIS            reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    PARENT_ABRE     reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    TYPEID          reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    CHAVE_FECHA     reduce using rule 117 (rest_if -> body ELSE condicional_1 .)
    ELSE            reduce using rule 117 (rest_if -> body ELSE condicional_1 .)


state 242

    (114) rest_if -> condicional_1 ELSE condicional_1 .

    IF              reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    WHILE           reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    FOR             reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    RETURN          reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    TYPEDEF         reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    USING           reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    INT             reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    BOOL            reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    ID              reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    STRING          reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    OP_NOT          reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    NOT             reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    SIZEOF          reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    NEW             reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    INT_V           reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    TRUE            reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    FALSE           reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    STRING_V        reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    THIS            reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    PARENT_ABRE     reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    TYPEID          reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    CHAVE_FECHA     reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)
    ELSE            reduce using rule 114 (rest_if -> condicional_1 ELSE condicional_1 .)


state 243

    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .

    IF              reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    WHILE           reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    FOR             reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    RETURN          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    TYPEDEF         reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    USING           reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    INT             reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    BOOL            reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    ID              reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    STRING          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    OP_NOT          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    NOT             reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    SIZEOF          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    NEW             reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    INT_V           reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    TRUE            reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    FALSE           reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    STRING_V        reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    THIS            reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    PARENT_ABRE     reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    TYPEID          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    CHAVE_FECHA     reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)


state 244

    (116) rest_if -> condicional_1 ELSE body .

    IF              reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    WHILE           reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    FOR             reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    RETURN          reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    TYPEDEF         reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    USING           reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    INT             reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    BOOL            reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    ID              reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    STRING          reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    OP_NOT          reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    NOT             reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    SIZEOF          reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    NEW             reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    INT_V           reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    TRUE            reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    FALSE           reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    STRING_V        reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    THIS            reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    PARENT_ABRE     reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    TYPEID          reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    CHAVE_FECHA     reduce using rule 116 (rest_if -> condicional_1 ELSE body .)
    ELSE            reduce using rule 116 (rest_if -> condicional_1 ELSE body .)


state 245

    (99) condicional_1 -> IF PARENT_ABRE exp . PARENT_FECHA rest_if
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 248
    RECEBER         shift and go to state 85


state 246

    (123) for_log -> exp PONTO_VIRG exp PONTO_VIRG exp .
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 123 (for_log -> exp PONTO_VIRG exp PONTO_VIRG exp .)
    RECEBER         shift and go to state 85


state 247

    (110) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body
    (111) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA comando
    (112) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body ELSE condicional_2
    (99) condicional_1 -> IF PARENT_ABRE . exp PARENT_FECHA rest_if
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    ID              shift and go to state 44
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 249
    exp_1                          shift and go to state 46
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 248

    (99) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA . rest_if
    (114) rest_if -> . condicional_1 ELSE condicional_1
    (115) rest_if -> . body ELSE body
    (116) rest_if -> . condicional_1 ELSE body
    (117) rest_if -> . body ELSE condicional_1
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 222
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    CHAVE_ABRE      shift and go to state 82
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 136
    rest_if                        shift and go to state 216
    condicional_1                  shift and go to state 250
    body                           shift and go to state 251
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 249

    (110) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body
    (111) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA comando
    (112) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body ELSE condicional_2
    (99) condicional_1 -> IF PARENT_ABRE exp . PARENT_FECHA rest_if
    (50) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 252
    RECEBER         shift and go to state 85


state 250

    (114) rest_if -> condicional_1 . ELSE condicional_1
    (116) rest_if -> condicional_1 . ELSE body

    ELSE            shift and go to state 253


state 251

    (115) rest_if -> body . ELSE body
    (117) rest_if -> body . ELSE condicional_1

    ELSE            shift and go to state 254


state 252

    (110) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body
    (111) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . comando
    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . condicional_1 ELSE condicional_2
    (113) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body ELSE condicional_2
    (99) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA . rest_if
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (48) comando -> . condicional_1
    (49) comando -> . condicional_2
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (114) rest_if -> . condicional_1 ELSE condicional_1
    (115) rest_if -> . body ELSE body
    (116) rest_if -> . condicional_1 ELSE body
    (117) rest_if -> . body ELSE condicional_1
    (110) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (111) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 82
    IF              shift and go to state 135
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    exp                            shift and go to state 136
    body                           shift and go to state 217
    comando                        shift and go to state 218
    condicional_1                  shift and go to state 255
    condicional_2                  shift and go to state 134
    rest_if                        shift and go to state 216
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 253

    (114) rest_if -> condicional_1 ELSE . condicional_1
    (116) rest_if -> condicional_1 ELSE . body
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 222
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    CHAVE_ABRE      shift and go to state 82
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    condicional_1                  shift and go to state 242
    body                           shift and go to state 244
    exp                            shift and go to state 136
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 254

    (115) rest_if -> body ELSE . body
    (117) rest_if -> body ELSE . condicional_1
    (44) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (45) body -> . CHAVE_ABRE CHAVE_FECHA
    (99) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (100) condicional_1 -> . exp PONTO_VIRG
    (101) condicional_1 -> . decl_variavel
    (102) condicional_1 -> . typedef
    (103) condicional_1 -> . using
    (104) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (105) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (108) condicional_1 -> . RETURN exp PONTO_VIRG
    (109) condicional_1 -> . RETURN PONTO_VIRG
    (50) exp -> . exp RECEBER exp_1
    (51) exp -> . exp_1
    (30) decl_variavel -> . tipo ID PONTO_VIRG
    (31) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (32) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (38) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (39) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (42) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (43) using -> . USING ID ID PONTO_VIRG
    (52) exp_1 -> . exp_1 OP_OU exp_2
    (53) exp_1 -> . exp_1 OR exp_2
    (54) exp_1 -> . exp_2
    (130) tipo -> . INT
    (131) tipo -> . BOOL
    (132) tipo -> . ID
    (133) tipo -> . STRING
    (55) exp_2 -> . exp_2 OP_E exp_3
    (56) exp_2 -> . exp_2 AND exp_3
    (57) exp_2 -> . exp_3
    (58) exp_3 -> . exp_3 OP_OU_EX exp_4
    (59) exp_3 -> . exp_3 XOR exp_4
    (60) exp_3 -> . exp_4
    (61) exp_4 -> . exp_4 IGUAL exp_5
    (62) exp_4 -> . exp_4 DIFERENTE exp_5
    (63) exp_4 -> . exp_5
    (64) exp_5 -> . exp_5 MENOR_Q exp_6
    (65) exp_5 -> . exp_5 MAIOR_Q exp_6
    (66) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (67) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (68) exp_5 -> . exp_6
    (69) exp_6 -> . exp_6 SOMA exp_7
    (70) exp_6 -> . exp_6 SUB exp_7
    (71) exp_6 -> . exp_7
    (72) exp_7 -> . exp_7 MULT exp_8
    (73) exp_7 -> . exp_7 DIV exp_8
    (74) exp_7 -> . exp_7 MODULO exp_8
    (75) exp_7 -> . exp_8
    (76) exp_8 -> . OP_NOT exp_9
    (77) exp_8 -> . NOT exp_9
    (78) exp_8 -> . exp_9 MAIS_MAIS
    (79) exp_8 -> . exp_9 MENOS_MENOS
    (80) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (81) exp_8 -> . NEW tipo
    (82) exp_8 -> . exp_9
    (83) exp_9 -> . exp_9 PONTO exp_10
    (84) exp_9 -> . exp_9 SETA exp_10
    (85) exp_9 -> . exp_10
    (86) exp_10 -> . ID
    (87) exp_10 -> . INT_V
    (88) exp_10 -> . TRUE
    (89) exp_10 -> . FALSE
    (90) exp_10 -> . chamada_funcao
    (91) exp_10 -> . STRING_V
    (92) exp_10 -> . THIS
    (93) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (94) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (95) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (96) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 82
    IF              shift and go to state 222
    WHILE           shift and go to state 140
    FOR             shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 11
    USING           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    ID              shift and go to state 144
    STRING          shift and go to state 15
    OP_NOT          shift and go to state 54
    NOT             shift and go to state 56
    SIZEOF          shift and go to state 57
    NEW             shift and go to state 59
    INT_V           shift and go to state 61
    TRUE            shift and go to state 62
    FALSE           shift and go to state 63
    STRING_V        shift and go to state 65
    THIS            shift and go to state 66
    PARENT_ABRE     shift and go to state 58
    TYPEID          shift and go to state 67

    body                           shift and go to state 239
    condicional_1                  shift and go to state 241
    exp                            shift and go to state 136
    decl_variavel                  shift and go to state 137
    typedef                        shift and go to state 138
    using                          shift and go to state 139
    exp_1                          shift and go to state 46
    tipo                           shift and go to state 143
    exp_2                          shift and go to state 47
    exp_3                          shift and go to state 48
    exp_4                          shift and go to state 49
    exp_5                          shift and go to state 50
    exp_6                          shift and go to state 51
    exp_7                          shift and go to state 52
    exp_8                          shift and go to state 53
    exp_9                          shift and go to state 55
    exp_10                         shift and go to state 60
    chamada_funcao                 shift and go to state 64

state 255

    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 . ELSE condicional_2
    (48) comando -> condicional_1 .
    (114) rest_if -> condicional_1 . ELSE condicional_1
    (116) rest_if -> condicional_1 . ELSE body

    ELSE            shift and go to state 232
    IF              reduce using rule 48 (comando -> condicional_1 .)
    WHILE           reduce using rule 48 (comando -> condicional_1 .)
    FOR             reduce using rule 48 (comando -> condicional_1 .)
    RETURN          reduce using rule 48 (comando -> condicional_1 .)
    TYPEDEF         reduce using rule 48 (comando -> condicional_1 .)
    USING           reduce using rule 48 (comando -> condicional_1 .)
    INT             reduce using rule 48 (comando -> condicional_1 .)
    BOOL            reduce using rule 48 (comando -> condicional_1 .)
    ID              reduce using rule 48 (comando -> condicional_1 .)
    STRING          reduce using rule 48 (comando -> condicional_1 .)
    OP_NOT          reduce using rule 48 (comando -> condicional_1 .)
    NOT             reduce using rule 48 (comando -> condicional_1 .)
    SIZEOF          reduce using rule 48 (comando -> condicional_1 .)
    NEW             reduce using rule 48 (comando -> condicional_1 .)
    INT_V           reduce using rule 48 (comando -> condicional_1 .)
    TRUE            reduce using rule 48 (comando -> condicional_1 .)
    FALSE           reduce using rule 48 (comando -> condicional_1 .)
    STRING_V        reduce using rule 48 (comando -> condicional_1 .)
    THIS            reduce using rule 48 (comando -> condicional_1 .)
    PARENT_ABRE     reduce using rule 48 (comando -> condicional_1 .)
    TYPEID          reduce using rule 48 (comando -> condicional_1 .)
    CHAVE_FECHA     reduce using rule 48 (comando -> condicional_1 .)

