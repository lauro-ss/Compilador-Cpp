Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> cpp
Rule 1     cpp -> decl_classe
Rule 2     cpp -> decl_funcao
Rule 3     cpp -> decl_variavel
Rule 4     cpp -> typedef
Rule 5     cpp -> using
Rule 6     cpp -> exp PONTO_VIRG
Rule 7     cpp -> exp PONTO_VIRG cpp
Rule 8     cpp -> decl_classe cpp
Rule 9     cpp -> decl_funcao cpp
Rule 10    cpp -> decl_variavel cpp
Rule 11    cpp -> typedef cpp
Rule 12    cpp -> using cpp
Rule 13    decl_classe -> CLASS ID body_class PONTO_VIRG
Rule 14    body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA
Rule 15    body_class -> CHAVE_ABRE CHAVE_FECHA
Rule 16    content_class -> decl_variavel
Rule 17    content_class -> decl_funcao
Rule 18    content_class -> STATIC decl_variavel
Rule 19    content_class -> STATIC decl_funcao
Rule 20    content_class -> decl_variavel content_class
Rule 21    content_class -> decl_funcao content_class
Rule 22    content_class -> STATIC decl_variavel content_class
Rule 23    content_class -> STATIC decl_funcao content_class
Rule 24    decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body
Rule 25    decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body
Rule 26    decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body
Rule 27    decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body
Rule 28    decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body
Rule 29    decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body
Rule 30    parametros -> tipo ID
Rule 31    parametros -> tipo ID VIRGULA parametros
Rule 32    decl_variavel -> tipo ID PONTO_VIRG
Rule 33    decl_variavel -> tipo ID RECEBER exp PONTO_VIRG
Rule 34    decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG
Rule 35    decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
Rule 36    decl_variavel_n -> VIRGULA ID decl_variavel_n
Rule 37    decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n
Rule 38    decl_variavel_n -> VIRGULA ID RECEBER exp
Rule 39    decl_variavel_n -> VIRGULA ID
Rule 40    typedef -> TYPEDEF tipo ID PONTO_VIRG
Rule 41    typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
Rule 42    decl_typedef_n -> VIRGULA ID decl_typedef_n
Rule 43    decl_typedef_n -> VIRGULA ID
Rule 44    using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
Rule 45    using -> USING ID ID PONTO_VIRG
Rule 46    body -> CHAVE_ABRE comandos CHAVE_FECHA
Rule 47    body -> CHAVE_ABRE CHAVE_FECHA
Rule 48    comandos -> comando
Rule 49    comandos -> comando comandos
Rule 50    comando -> condicional_1
Rule 51    comando -> condicional_2
Rule 52    exp -> exp RECEBER exp_1
Rule 53    exp -> exp_1
Rule 54    exp_1 -> exp_1 OP_OU exp_2
Rule 55    exp_1 -> exp_1 OR exp_2
Rule 56    exp_1 -> exp_2
Rule 57    exp_2 -> exp_2 OP_E exp_3
Rule 58    exp_2 -> exp_2 AND exp_3
Rule 59    exp_2 -> exp_3
Rule 60    exp_3 -> exp_3 OP_OU_EX exp_4
Rule 61    exp_3 -> exp_3 XOR exp_4
Rule 62    exp_3 -> exp_4
Rule 63    exp_4 -> exp_4 IGUAL exp_5
Rule 64    exp_4 -> exp_4 DIFERENTE exp_5
Rule 65    exp_4 -> exp_5
Rule 66    exp_5 -> exp_5 MENOR_Q exp_6
Rule 67    exp_5 -> exp_5 MAIOR_Q exp_6
Rule 68    exp_5 -> exp_5 MAIOR_IGUAL exp_6
Rule 69    exp_5 -> exp_5 MENOR_IGUAL exp_6
Rule 70    exp_5 -> exp_6
Rule 71    exp_6 -> exp_6 SOMA exp_7
Rule 72    exp_6 -> exp_6 SUB exp_7
Rule 73    exp_6 -> exp_7
Rule 74    exp_7 -> exp_7 MULT exp_8
Rule 75    exp_7 -> exp_7 DIV exp_8
Rule 76    exp_7 -> exp_7 MODULO exp_8
Rule 77    exp_7 -> exp_8
Rule 78    exp_8 -> OP_NOT exp_9
Rule 79    exp_8 -> NOT exp_9
Rule 80    exp_8 -> exp_9 MAIS_MAIS
Rule 81    exp_8 -> exp_9 MENOS_MENOS
Rule 82    exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
Rule 83    exp_8 -> NEW tipo
Rule 84    exp_8 -> exp_9
Rule 85    exp_9 -> exp_9 PONTO exp_10
Rule 86    exp_9 -> exp_9 SETA exp_10
Rule 87    exp_9 -> exp_10
Rule 88    exp_10 -> ID
Rule 89    exp_10 -> INT_V
Rule 90    exp_10 -> TRUE
Rule 91    exp_10 -> FALSE
Rule 92    exp_10 -> chamada_funcao
Rule 93    exp_10 -> STRING_V
Rule 94    exp_10 -> THIS
Rule 95    exp_10 -> PARENT_ABRE exp PARENT_FECHA
Rule 96    chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA
Rule 97    chamada_funcao -> ID PARENT_ABRE PARENT_FECHA
Rule 98    chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA
Rule 99    parametros_chamada -> ID VIRGULA parametros_chamada
Rule 100   parametros_chamada -> ID
Rule 101   condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if
Rule 102   condicional_1 -> exp PONTO_VIRG
Rule 103   condicional_1 -> decl_variavel
Rule 104   condicional_1 -> typedef
Rule 105   condicional_1 -> using
Rule 106   condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body
Rule 107   condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body
Rule 108   condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
Rule 109   condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
Rule 110   condicional_1 -> RETURN exp PONTO_VIRG
Rule 111   condicional_1 -> RETURN PONTO_VIRG
Rule 112   condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body
Rule 113   condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando
Rule 114   condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
Rule 115   condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
Rule 116   rest_if -> condicional_1 ELSE condicional_1
Rule 117   rest_if -> body ELSE body
Rule 118   rest_if -> condicional_1 ELSE body
Rule 119   rest_if -> body ELSE condicional_1
Rule 120   for_log -> decl_variavel PONTO_VIRG
Rule 121   for_log -> decl_variavel exp PONTO_VIRG
Rule 122   for_log -> decl_variavel exp PONTO_VIRG exp
Rule 123   for_log -> decl_variavel PONTO_VIRG exp
Rule 124   for_log -> exp PONTO_VIRG PONTO_VIRG exp
Rule 125   for_log -> exp PONTO_VIRG exp PONTO_VIRG exp
Rule 126   for_log -> exp PONTO_VIRG PONTO_VIRG
Rule 127   for_log -> exp PONTO_VIRG exp PONTO_VIRG
Rule 128   for_log -> PONTO_VIRG exp PONTO_VIRG exp
Rule 129   for_log -> PONTO_VIRG exp PONTO_VIRG
Rule 130   for_log -> PONTO_VIRG PONTO_VIRG exp
Rule 131   for_log -> PONTO_VIRG PONTO_VIRG
Rule 132   tipo -> INT
Rule 133   tipo -> BOOL
Rule 134   tipo -> ID
Rule 135   tipo -> STRING

Terminals, with rules where they appear

2X_DOIS_PONTOS       : 44
AND                  : 58
BOOL                 : 133
CHAVE_ABRE           : 14 15 46 47
CHAVE_FECHA          : 14 15 46 47
CLASS                : 13
DIFERENTE            : 64
DIV                  : 75
DOIS_PONTOS          : 14
ELSE                 : 114 115 116 117 118 119
FALSE                : 91
FOR                  : 107 109
ID                   : 13 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 44 45 45 88 96 97 99 100 134
IF                   : 101 112 113 114 115
IGUAL                : 63
INT                  : 132
INT_V                : 89
MAIOR_IGUAL          : 68
MAIOR_Q              : 67
MAIS_MAIS            : 80
MENOR_IGUAL          : 69
MENOR_Q              : 66
MENOS_MENOS          : 81
MODULO               : 76
MULT                 : 74
NEW                  : 83
NOT                  : 79
OP_E                 : 57
OP_NOT               : 78
OP_OU                : 54
OP_OU_EX             : 60
OR                   : 55
PARENT_ABRE          : 24 25 26 27 28 29 82 95 96 97 98 101 106 107 108 109 112 113 114 115
PARENT_FECHA         : 24 25 26 27 28 29 82 95 96 97 98 101 106 107 108 109 112 113 114 115
PONTO                : 85
PONTO_VIRG           : 6 7 13 32 33 34 35 40 41 44 45 102 110 111 120 121 122 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131
PUBLIC               : 14
RECEBER              : 33 35 37 38 52
RETURN               : 110 111
SETA                 : 86
SIZEOF               : 82
SOMA                 : 71
STATIC               : 18 19 22 23
STRING               : 135
STRING_V             : 93
SUB                  : 72
THIS                 : 94
TRUE                 : 90
TYPEDEF              : 40 41
TYPEID               : 98
USING                : 44 45
VIRGULA              : 31 36 37 38 39 42 43 99
VOID                 : 26 27 28 29 29
WHILE                : 106 108
XOR                  : 61
error                : 

Nonterminals, with rules where they appear

body                 : 24 25 26 27 28 29 106 107 112 115 117 117 118 119
body_class           : 13
chamada_funcao       : 92
comando              : 48 49 113
comandos             : 46 49
condicional_1        : 50 108 109 114 116 116 118 119
condicional_2        : 51 114 115
content_class        : 14 20 21 22 23
cpp                  : 7 8 9 10 11 12 0
decl_classe          : 1 8
decl_funcao          : 2 9 17 19 21 23
decl_typedef_n       : 41 42
decl_variavel        : 3 10 16 18 20 22 103 120 121 122 123
decl_variavel_n      : 34 35 36 37
exp                  : 6 7 33 35 37 38 52 95 98 101 102 106 108 110 112 113 114 115 121 122 122 123 124 124 125 125 125 126 127 127 128 128 129 130
exp_1                : 52 53 54 55
exp_10               : 85 86 87
exp_2                : 54 55 56 57 58
exp_3                : 57 58 59 60 61
exp_4                : 60 61 62 63 64
exp_5                : 63 64 65 66 67 68 69
exp_6                : 66 67 68 69 70 71 72
exp_7                : 71 72 73 74 75 76
exp_8                : 74 75 76 77
exp_9                : 78 79 80 81 82 84 85 86
for_log              : 107 109
parametros           : 24 27 31
parametros_chamada   : 96 99
rest_if              : 101
tipo                 : 24 25 26 30 31 32 33 34 35 40 41 83
typedef              : 4 11 104
using                : 5 12 105

Parsing method: LALR

state 0

    (0) S' -> . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . exp PONTO_VIRG
    (7) cpp -> . exp PONTO_VIRG cpp
    (8) cpp -> . decl_classe cpp
    (9) cpp -> . decl_funcao cpp
    (10) cpp -> . decl_variavel cpp
    (11) cpp -> . typedef cpp
    (12) cpp -> . using cpp
    (13) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CLASS           shift and go to state 8
    VOID            shift and go to state 12
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    cpp                            shift and go to state 1
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    exp                            shift and go to state 7
    tipo                           shift and go to state 10
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 1

    (0) S' -> cpp .



state 2

    (1) cpp -> decl_classe .
    (8) cpp -> decl_classe . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . exp PONTO_VIRG
    (7) cpp -> . exp PONTO_VIRG cpp
    (8) cpp -> . decl_classe cpp
    (9) cpp -> . decl_funcao cpp
    (10) cpp -> . decl_variavel cpp
    (11) cpp -> . typedef cpp
    (12) cpp -> . using cpp
    (13) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    $end            reduce using rule 1 (cpp -> decl_classe .)
    CLASS           shift and go to state 8
    VOID            shift and go to state 12
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    decl_classe                    shift and go to state 2
    cpp                            shift and go to state 39
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    exp                            shift and go to state 7
    tipo                           shift and go to state 10
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 3

    (2) cpp -> decl_funcao .
    (9) cpp -> decl_funcao . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . exp PONTO_VIRG
    (7) cpp -> . exp PONTO_VIRG cpp
    (8) cpp -> . decl_classe cpp
    (9) cpp -> . decl_funcao cpp
    (10) cpp -> . decl_variavel cpp
    (11) cpp -> . typedef cpp
    (12) cpp -> . using cpp
    (13) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    $end            reduce using rule 2 (cpp -> decl_funcao .)
    CLASS           shift and go to state 8
    VOID            shift and go to state 12
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    decl_funcao                    shift and go to state 3
    cpp                            shift and go to state 40
    decl_classe                    shift and go to state 2
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    exp                            shift and go to state 7
    tipo                           shift and go to state 10
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 4

    (3) cpp -> decl_variavel .
    (10) cpp -> decl_variavel . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . exp PONTO_VIRG
    (7) cpp -> . exp PONTO_VIRG cpp
    (8) cpp -> . decl_classe cpp
    (9) cpp -> . decl_funcao cpp
    (10) cpp -> . decl_variavel cpp
    (11) cpp -> . typedef cpp
    (12) cpp -> . using cpp
    (13) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    $end            reduce using rule 3 (cpp -> decl_variavel .)
    CLASS           shift and go to state 8
    VOID            shift and go to state 12
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    decl_variavel                  shift and go to state 4
    cpp                            shift and go to state 41
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    exp                            shift and go to state 7
    tipo                           shift and go to state 10
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 5

    (4) cpp -> typedef .
    (11) cpp -> typedef . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . exp PONTO_VIRG
    (7) cpp -> . exp PONTO_VIRG cpp
    (8) cpp -> . decl_classe cpp
    (9) cpp -> . decl_funcao cpp
    (10) cpp -> . decl_variavel cpp
    (11) cpp -> . typedef cpp
    (12) cpp -> . using cpp
    (13) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    $end            reduce using rule 4 (cpp -> typedef .)
    CLASS           shift and go to state 8
    VOID            shift and go to state 12
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    typedef                        shift and go to state 5
    cpp                            shift and go to state 42
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    using                          shift and go to state 6
    exp                            shift and go to state 7
    tipo                           shift and go to state 10
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 6

    (5) cpp -> using .
    (12) cpp -> using . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . exp PONTO_VIRG
    (7) cpp -> . exp PONTO_VIRG cpp
    (8) cpp -> . decl_classe cpp
    (9) cpp -> . decl_funcao cpp
    (10) cpp -> . decl_variavel cpp
    (11) cpp -> . typedef cpp
    (12) cpp -> . using cpp
    (13) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    $end            reduce using rule 5 (cpp -> using .)
    CLASS           shift and go to state 8
    VOID            shift and go to state 12
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    using                          shift and go to state 6
    cpp                            shift and go to state 43
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    exp                            shift and go to state 7
    tipo                           shift and go to state 10
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 7

    (6) cpp -> exp . PONTO_VIRG
    (7) cpp -> exp . PONTO_VIRG cpp
    (52) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 44
    RECEBER         shift and go to state 45


state 8

    (13) decl_classe -> CLASS . ID body_class PONTO_VIRG

    ID              shift and go to state 46


state 9

    (134) tipo -> ID .
    (88) exp_10 -> ID .
    (96) chamada_funcao -> ID . PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> ID . PARENT_ABRE PARENT_FECHA

    ID              reduce using rule 134 (tipo -> ID .)
    MAIS_MAIS       reduce using rule 88 (exp_10 -> ID .)
    MENOS_MENOS     reduce using rule 88 (exp_10 -> ID .)
    PONTO           reduce using rule 88 (exp_10 -> ID .)
    SETA            reduce using rule 88 (exp_10 -> ID .)
    MULT            reduce using rule 88 (exp_10 -> ID .)
    DIV             reduce using rule 88 (exp_10 -> ID .)
    MODULO          reduce using rule 88 (exp_10 -> ID .)
    SOMA            reduce using rule 88 (exp_10 -> ID .)
    SUB             reduce using rule 88 (exp_10 -> ID .)
    MENOR_Q         reduce using rule 88 (exp_10 -> ID .)
    MAIOR_Q         reduce using rule 88 (exp_10 -> ID .)
    MAIOR_IGUAL     reduce using rule 88 (exp_10 -> ID .)
    MENOR_IGUAL     reduce using rule 88 (exp_10 -> ID .)
    IGUAL           reduce using rule 88 (exp_10 -> ID .)
    DIFERENTE       reduce using rule 88 (exp_10 -> ID .)
    OP_OU_EX        reduce using rule 88 (exp_10 -> ID .)
    XOR             reduce using rule 88 (exp_10 -> ID .)
    OP_E            reduce using rule 88 (exp_10 -> ID .)
    AND             reduce using rule 88 (exp_10 -> ID .)
    OP_OU           reduce using rule 88 (exp_10 -> ID .)
    OR              reduce using rule 88 (exp_10 -> ID .)
    PONTO_VIRG      reduce using rule 88 (exp_10 -> ID .)
    RECEBER         reduce using rule 88 (exp_10 -> ID .)
    PARENT_ABRE     shift and go to state 47


state 10

    (24) decl_funcao -> tipo . ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> tipo . ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> tipo . ID PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> tipo . ID PONTO_VIRG
    (33) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> tipo . ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n PONTO_VIRG

    ID              shift and go to state 48


state 11

    (95) exp_10 -> PARENT_ABRE . exp PARENT_FECHA
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 49
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 12

    (27) decl_funcao -> VOID . ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> VOID . ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> VOID . ID PARENT_ABRE VOID PARENT_FECHA body

    ID              shift and go to state 51


state 13

    (40) typedef -> TYPEDEF . tipo ID PONTO_VIRG
    (41) typedef -> TYPEDEF . tipo ID decl_typedef_n PONTO_VIRG
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    tipo                           shift and go to state 52

state 14

    (44) using -> USING . ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> USING . ID ID PONTO_VIRG

    ID              shift and go to state 54


state 15

    (53) exp -> exp_1 .
    (54) exp_1 -> exp_1 . OP_OU exp_2
    (55) exp_1 -> exp_1 . OR exp_2

    PONTO_VIRG      reduce using rule 53 (exp -> exp_1 .)
    RECEBER         reduce using rule 53 (exp -> exp_1 .)
    PARENT_FECHA    reduce using rule 53 (exp -> exp_1 .)
    VIRGULA         reduce using rule 53 (exp -> exp_1 .)
    OP_OU           shift and go to state 55
    OR              shift and go to state 56


state 16

    (132) tipo -> INT .

    ID              reduce using rule 132 (tipo -> INT .)
    MULT            reduce using rule 132 (tipo -> INT .)
    DIV             reduce using rule 132 (tipo -> INT .)
    MODULO          reduce using rule 132 (tipo -> INT .)
    SOMA            reduce using rule 132 (tipo -> INT .)
    SUB             reduce using rule 132 (tipo -> INT .)
    MENOR_Q         reduce using rule 132 (tipo -> INT .)
    MAIOR_Q         reduce using rule 132 (tipo -> INT .)
    MAIOR_IGUAL     reduce using rule 132 (tipo -> INT .)
    MENOR_IGUAL     reduce using rule 132 (tipo -> INT .)
    IGUAL           reduce using rule 132 (tipo -> INT .)
    DIFERENTE       reduce using rule 132 (tipo -> INT .)
    OP_OU_EX        reduce using rule 132 (tipo -> INT .)
    XOR             reduce using rule 132 (tipo -> INT .)
    OP_E            reduce using rule 132 (tipo -> INT .)
    AND             reduce using rule 132 (tipo -> INT .)
    OP_OU           reduce using rule 132 (tipo -> INT .)
    OR              reduce using rule 132 (tipo -> INT .)
    PONTO_VIRG      reduce using rule 132 (tipo -> INT .)
    RECEBER         reduce using rule 132 (tipo -> INT .)
    PARENT_FECHA    reduce using rule 132 (tipo -> INT .)
    VIRGULA         reduce using rule 132 (tipo -> INT .)


state 17

    (133) tipo -> BOOL .

    ID              reduce using rule 133 (tipo -> BOOL .)
    MULT            reduce using rule 133 (tipo -> BOOL .)
    DIV             reduce using rule 133 (tipo -> BOOL .)
    MODULO          reduce using rule 133 (tipo -> BOOL .)
    SOMA            reduce using rule 133 (tipo -> BOOL .)
    SUB             reduce using rule 133 (tipo -> BOOL .)
    MENOR_Q         reduce using rule 133 (tipo -> BOOL .)
    MAIOR_Q         reduce using rule 133 (tipo -> BOOL .)
    MAIOR_IGUAL     reduce using rule 133 (tipo -> BOOL .)
    MENOR_IGUAL     reduce using rule 133 (tipo -> BOOL .)
    IGUAL           reduce using rule 133 (tipo -> BOOL .)
    DIFERENTE       reduce using rule 133 (tipo -> BOOL .)
    OP_OU_EX        reduce using rule 133 (tipo -> BOOL .)
    XOR             reduce using rule 133 (tipo -> BOOL .)
    OP_E            reduce using rule 133 (tipo -> BOOL .)
    AND             reduce using rule 133 (tipo -> BOOL .)
    OP_OU           reduce using rule 133 (tipo -> BOOL .)
    OR              reduce using rule 133 (tipo -> BOOL .)
    PONTO_VIRG      reduce using rule 133 (tipo -> BOOL .)
    RECEBER         reduce using rule 133 (tipo -> BOOL .)
    PARENT_FECHA    reduce using rule 133 (tipo -> BOOL .)
    VIRGULA         reduce using rule 133 (tipo -> BOOL .)


state 18

    (135) tipo -> STRING .

    ID              reduce using rule 135 (tipo -> STRING .)
    MULT            reduce using rule 135 (tipo -> STRING .)
    DIV             reduce using rule 135 (tipo -> STRING .)
    MODULO          reduce using rule 135 (tipo -> STRING .)
    SOMA            reduce using rule 135 (tipo -> STRING .)
    SUB             reduce using rule 135 (tipo -> STRING .)
    MENOR_Q         reduce using rule 135 (tipo -> STRING .)
    MAIOR_Q         reduce using rule 135 (tipo -> STRING .)
    MAIOR_IGUAL     reduce using rule 135 (tipo -> STRING .)
    MENOR_IGUAL     reduce using rule 135 (tipo -> STRING .)
    IGUAL           reduce using rule 135 (tipo -> STRING .)
    DIFERENTE       reduce using rule 135 (tipo -> STRING .)
    OP_OU_EX        reduce using rule 135 (tipo -> STRING .)
    XOR             reduce using rule 135 (tipo -> STRING .)
    OP_E            reduce using rule 135 (tipo -> STRING .)
    AND             reduce using rule 135 (tipo -> STRING .)
    OP_OU           reduce using rule 135 (tipo -> STRING .)
    OR              reduce using rule 135 (tipo -> STRING .)
    PONTO_VIRG      reduce using rule 135 (tipo -> STRING .)
    RECEBER         reduce using rule 135 (tipo -> STRING .)
    PARENT_FECHA    reduce using rule 135 (tipo -> STRING .)
    VIRGULA         reduce using rule 135 (tipo -> STRING .)


state 19

    (56) exp_1 -> exp_2 .
    (57) exp_2 -> exp_2 . OP_E exp_3
    (58) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 56 (exp_1 -> exp_2 .)
    OR              reduce using rule 56 (exp_1 -> exp_2 .)
    PONTO_VIRG      reduce using rule 56 (exp_1 -> exp_2 .)
    RECEBER         reduce using rule 56 (exp_1 -> exp_2 .)
    PARENT_FECHA    reduce using rule 56 (exp_1 -> exp_2 .)
    VIRGULA         reduce using rule 56 (exp_1 -> exp_2 .)
    OP_E            shift and go to state 57
    AND             shift and go to state 58


state 20

    (59) exp_2 -> exp_3 .
    (60) exp_3 -> exp_3 . OP_OU_EX exp_4
    (61) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 59 (exp_2 -> exp_3 .)
    AND             reduce using rule 59 (exp_2 -> exp_3 .)
    OP_OU           reduce using rule 59 (exp_2 -> exp_3 .)
    OR              reduce using rule 59 (exp_2 -> exp_3 .)
    PONTO_VIRG      reduce using rule 59 (exp_2 -> exp_3 .)
    RECEBER         reduce using rule 59 (exp_2 -> exp_3 .)
    PARENT_FECHA    reduce using rule 59 (exp_2 -> exp_3 .)
    VIRGULA         reduce using rule 59 (exp_2 -> exp_3 .)
    OP_OU_EX        shift and go to state 59
    XOR             shift and go to state 60


state 21

    (62) exp_3 -> exp_4 .
    (63) exp_4 -> exp_4 . IGUAL exp_5
    (64) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 62 (exp_3 -> exp_4 .)
    XOR             reduce using rule 62 (exp_3 -> exp_4 .)
    OP_E            reduce using rule 62 (exp_3 -> exp_4 .)
    AND             reduce using rule 62 (exp_3 -> exp_4 .)
    OP_OU           reduce using rule 62 (exp_3 -> exp_4 .)
    OR              reduce using rule 62 (exp_3 -> exp_4 .)
    PONTO_VIRG      reduce using rule 62 (exp_3 -> exp_4 .)
    RECEBER         reduce using rule 62 (exp_3 -> exp_4 .)
    PARENT_FECHA    reduce using rule 62 (exp_3 -> exp_4 .)
    VIRGULA         reduce using rule 62 (exp_3 -> exp_4 .)
    IGUAL           shift and go to state 61
    DIFERENTE       shift and go to state 62


state 22

    (65) exp_4 -> exp_5 .
    (66) exp_5 -> exp_5 . MENOR_Q exp_6
    (67) exp_5 -> exp_5 . MAIOR_Q exp_6
    (68) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (69) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 65 (exp_4 -> exp_5 .)
    DIFERENTE       reduce using rule 65 (exp_4 -> exp_5 .)
    OP_OU_EX        reduce using rule 65 (exp_4 -> exp_5 .)
    XOR             reduce using rule 65 (exp_4 -> exp_5 .)
    OP_E            reduce using rule 65 (exp_4 -> exp_5 .)
    AND             reduce using rule 65 (exp_4 -> exp_5 .)
    OP_OU           reduce using rule 65 (exp_4 -> exp_5 .)
    OR              reduce using rule 65 (exp_4 -> exp_5 .)
    PONTO_VIRG      reduce using rule 65 (exp_4 -> exp_5 .)
    RECEBER         reduce using rule 65 (exp_4 -> exp_5 .)
    PARENT_FECHA    reduce using rule 65 (exp_4 -> exp_5 .)
    VIRGULA         reduce using rule 65 (exp_4 -> exp_5 .)
    MENOR_Q         shift and go to state 63
    MAIOR_Q         shift and go to state 64
    MAIOR_IGUAL     shift and go to state 65
    MENOR_IGUAL     shift and go to state 66


state 23

    (70) exp_5 -> exp_6 .
    (71) exp_6 -> exp_6 . SOMA exp_7
    (72) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 70 (exp_5 -> exp_6 .)
    MAIOR_Q         reduce using rule 70 (exp_5 -> exp_6 .)
    MAIOR_IGUAL     reduce using rule 70 (exp_5 -> exp_6 .)
    MENOR_IGUAL     reduce using rule 70 (exp_5 -> exp_6 .)
    IGUAL           reduce using rule 70 (exp_5 -> exp_6 .)
    DIFERENTE       reduce using rule 70 (exp_5 -> exp_6 .)
    OP_OU_EX        reduce using rule 70 (exp_5 -> exp_6 .)
    XOR             reduce using rule 70 (exp_5 -> exp_6 .)
    OP_E            reduce using rule 70 (exp_5 -> exp_6 .)
    AND             reduce using rule 70 (exp_5 -> exp_6 .)
    OP_OU           reduce using rule 70 (exp_5 -> exp_6 .)
    OR              reduce using rule 70 (exp_5 -> exp_6 .)
    PONTO_VIRG      reduce using rule 70 (exp_5 -> exp_6 .)
    RECEBER         reduce using rule 70 (exp_5 -> exp_6 .)
    PARENT_FECHA    reduce using rule 70 (exp_5 -> exp_6 .)
    VIRGULA         reduce using rule 70 (exp_5 -> exp_6 .)
    SOMA            shift and go to state 67
    SUB             shift and go to state 68


state 24

    (73) exp_6 -> exp_7 .
    (74) exp_7 -> exp_7 . MULT exp_8
    (75) exp_7 -> exp_7 . DIV exp_8
    (76) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 73 (exp_6 -> exp_7 .)
    SUB             reduce using rule 73 (exp_6 -> exp_7 .)
    MENOR_Q         reduce using rule 73 (exp_6 -> exp_7 .)
    MAIOR_Q         reduce using rule 73 (exp_6 -> exp_7 .)
    MAIOR_IGUAL     reduce using rule 73 (exp_6 -> exp_7 .)
    MENOR_IGUAL     reduce using rule 73 (exp_6 -> exp_7 .)
    IGUAL           reduce using rule 73 (exp_6 -> exp_7 .)
    DIFERENTE       reduce using rule 73 (exp_6 -> exp_7 .)
    OP_OU_EX        reduce using rule 73 (exp_6 -> exp_7 .)
    XOR             reduce using rule 73 (exp_6 -> exp_7 .)
    OP_E            reduce using rule 73 (exp_6 -> exp_7 .)
    AND             reduce using rule 73 (exp_6 -> exp_7 .)
    OP_OU           reduce using rule 73 (exp_6 -> exp_7 .)
    OR              reduce using rule 73 (exp_6 -> exp_7 .)
    PONTO_VIRG      reduce using rule 73 (exp_6 -> exp_7 .)
    RECEBER         reduce using rule 73 (exp_6 -> exp_7 .)
    PARENT_FECHA    reduce using rule 73 (exp_6 -> exp_7 .)
    VIRGULA         reduce using rule 73 (exp_6 -> exp_7 .)
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MODULO          shift and go to state 71


state 25

    (77) exp_7 -> exp_8 .

    MULT            reduce using rule 77 (exp_7 -> exp_8 .)
    DIV             reduce using rule 77 (exp_7 -> exp_8 .)
    MODULO          reduce using rule 77 (exp_7 -> exp_8 .)
    SOMA            reduce using rule 77 (exp_7 -> exp_8 .)
    SUB             reduce using rule 77 (exp_7 -> exp_8 .)
    MENOR_Q         reduce using rule 77 (exp_7 -> exp_8 .)
    MAIOR_Q         reduce using rule 77 (exp_7 -> exp_8 .)
    MAIOR_IGUAL     reduce using rule 77 (exp_7 -> exp_8 .)
    MENOR_IGUAL     reduce using rule 77 (exp_7 -> exp_8 .)
    IGUAL           reduce using rule 77 (exp_7 -> exp_8 .)
    DIFERENTE       reduce using rule 77 (exp_7 -> exp_8 .)
    OP_OU_EX        reduce using rule 77 (exp_7 -> exp_8 .)
    XOR             reduce using rule 77 (exp_7 -> exp_8 .)
    OP_E            reduce using rule 77 (exp_7 -> exp_8 .)
    AND             reduce using rule 77 (exp_7 -> exp_8 .)
    OP_OU           reduce using rule 77 (exp_7 -> exp_8 .)
    OR              reduce using rule 77 (exp_7 -> exp_8 .)
    PONTO_VIRG      reduce using rule 77 (exp_7 -> exp_8 .)
    RECEBER         reduce using rule 77 (exp_7 -> exp_8 .)
    PARENT_FECHA    reduce using rule 77 (exp_7 -> exp_8 .)
    VIRGULA         reduce using rule 77 (exp_7 -> exp_8 .)


state 26

    (78) exp_8 -> OP_NOT . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_9                          shift and go to state 72
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 27

    (80) exp_8 -> exp_9 . MAIS_MAIS
    (81) exp_8 -> exp_9 . MENOS_MENOS
    (84) exp_8 -> exp_9 .
    (85) exp_9 -> exp_9 . PONTO exp_10
    (86) exp_9 -> exp_9 . SETA exp_10

    MAIS_MAIS       shift and go to state 73
    MENOS_MENOS     shift and go to state 74
    MULT            reduce using rule 84 (exp_8 -> exp_9 .)
    DIV             reduce using rule 84 (exp_8 -> exp_9 .)
    MODULO          reduce using rule 84 (exp_8 -> exp_9 .)
    SOMA            reduce using rule 84 (exp_8 -> exp_9 .)
    SUB             reduce using rule 84 (exp_8 -> exp_9 .)
    MENOR_Q         reduce using rule 84 (exp_8 -> exp_9 .)
    MAIOR_Q         reduce using rule 84 (exp_8 -> exp_9 .)
    MAIOR_IGUAL     reduce using rule 84 (exp_8 -> exp_9 .)
    MENOR_IGUAL     reduce using rule 84 (exp_8 -> exp_9 .)
    IGUAL           reduce using rule 84 (exp_8 -> exp_9 .)
    DIFERENTE       reduce using rule 84 (exp_8 -> exp_9 .)
    OP_OU_EX        reduce using rule 84 (exp_8 -> exp_9 .)
    XOR             reduce using rule 84 (exp_8 -> exp_9 .)
    OP_E            reduce using rule 84 (exp_8 -> exp_9 .)
    AND             reduce using rule 84 (exp_8 -> exp_9 .)
    OP_OU           reduce using rule 84 (exp_8 -> exp_9 .)
    OR              reduce using rule 84 (exp_8 -> exp_9 .)
    PONTO_VIRG      reduce using rule 84 (exp_8 -> exp_9 .)
    RECEBER         reduce using rule 84 (exp_8 -> exp_9 .)
    PARENT_FECHA    reduce using rule 84 (exp_8 -> exp_9 .)
    VIRGULA         reduce using rule 84 (exp_8 -> exp_9 .)
    PONTO           shift and go to state 75
    SETA            shift and go to state 76


state 28

    (79) exp_8 -> NOT . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_9                          shift and go to state 77
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 29

    (82) exp_8 -> SIZEOF . PARENT_ABRE exp_9 PARENT_FECHA

    PARENT_ABRE     shift and go to state 78


state 30

    (83) exp_8 -> NEW . tipo
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    tipo                           shift and go to state 79

state 31

    (87) exp_9 -> exp_10 .

    MAIS_MAIS       reduce using rule 87 (exp_9 -> exp_10 .)
    MENOS_MENOS     reduce using rule 87 (exp_9 -> exp_10 .)
    PONTO           reduce using rule 87 (exp_9 -> exp_10 .)
    SETA            reduce using rule 87 (exp_9 -> exp_10 .)
    MULT            reduce using rule 87 (exp_9 -> exp_10 .)
    DIV             reduce using rule 87 (exp_9 -> exp_10 .)
    MODULO          reduce using rule 87 (exp_9 -> exp_10 .)
    SOMA            reduce using rule 87 (exp_9 -> exp_10 .)
    SUB             reduce using rule 87 (exp_9 -> exp_10 .)
    MENOR_Q         reduce using rule 87 (exp_9 -> exp_10 .)
    MAIOR_Q         reduce using rule 87 (exp_9 -> exp_10 .)
    MAIOR_IGUAL     reduce using rule 87 (exp_9 -> exp_10 .)
    MENOR_IGUAL     reduce using rule 87 (exp_9 -> exp_10 .)
    IGUAL           reduce using rule 87 (exp_9 -> exp_10 .)
    DIFERENTE       reduce using rule 87 (exp_9 -> exp_10 .)
    OP_OU_EX        reduce using rule 87 (exp_9 -> exp_10 .)
    XOR             reduce using rule 87 (exp_9 -> exp_10 .)
    OP_E            reduce using rule 87 (exp_9 -> exp_10 .)
    AND             reduce using rule 87 (exp_9 -> exp_10 .)
    OP_OU           reduce using rule 87 (exp_9 -> exp_10 .)
    OR              reduce using rule 87 (exp_9 -> exp_10 .)
    PONTO_VIRG      reduce using rule 87 (exp_9 -> exp_10 .)
    RECEBER         reduce using rule 87 (exp_9 -> exp_10 .)
    PARENT_FECHA    reduce using rule 87 (exp_9 -> exp_10 .)
    VIRGULA         reduce using rule 87 (exp_9 -> exp_10 .)


state 32

    (89) exp_10 -> INT_V .

    MAIS_MAIS       reduce using rule 89 (exp_10 -> INT_V .)
    MENOS_MENOS     reduce using rule 89 (exp_10 -> INT_V .)
    PONTO           reduce using rule 89 (exp_10 -> INT_V .)
    SETA            reduce using rule 89 (exp_10 -> INT_V .)
    MULT            reduce using rule 89 (exp_10 -> INT_V .)
    DIV             reduce using rule 89 (exp_10 -> INT_V .)
    MODULO          reduce using rule 89 (exp_10 -> INT_V .)
    SOMA            reduce using rule 89 (exp_10 -> INT_V .)
    SUB             reduce using rule 89 (exp_10 -> INT_V .)
    MENOR_Q         reduce using rule 89 (exp_10 -> INT_V .)
    MAIOR_Q         reduce using rule 89 (exp_10 -> INT_V .)
    MAIOR_IGUAL     reduce using rule 89 (exp_10 -> INT_V .)
    MENOR_IGUAL     reduce using rule 89 (exp_10 -> INT_V .)
    IGUAL           reduce using rule 89 (exp_10 -> INT_V .)
    DIFERENTE       reduce using rule 89 (exp_10 -> INT_V .)
    OP_OU_EX        reduce using rule 89 (exp_10 -> INT_V .)
    XOR             reduce using rule 89 (exp_10 -> INT_V .)
    OP_E            reduce using rule 89 (exp_10 -> INT_V .)
    AND             reduce using rule 89 (exp_10 -> INT_V .)
    OP_OU           reduce using rule 89 (exp_10 -> INT_V .)
    OR              reduce using rule 89 (exp_10 -> INT_V .)
    PONTO_VIRG      reduce using rule 89 (exp_10 -> INT_V .)
    RECEBER         reduce using rule 89 (exp_10 -> INT_V .)
    PARENT_FECHA    reduce using rule 89 (exp_10 -> INT_V .)
    VIRGULA         reduce using rule 89 (exp_10 -> INT_V .)


state 33

    (90) exp_10 -> TRUE .

    MAIS_MAIS       reduce using rule 90 (exp_10 -> TRUE .)
    MENOS_MENOS     reduce using rule 90 (exp_10 -> TRUE .)
    PONTO           reduce using rule 90 (exp_10 -> TRUE .)
    SETA            reduce using rule 90 (exp_10 -> TRUE .)
    MULT            reduce using rule 90 (exp_10 -> TRUE .)
    DIV             reduce using rule 90 (exp_10 -> TRUE .)
    MODULO          reduce using rule 90 (exp_10 -> TRUE .)
    SOMA            reduce using rule 90 (exp_10 -> TRUE .)
    SUB             reduce using rule 90 (exp_10 -> TRUE .)
    MENOR_Q         reduce using rule 90 (exp_10 -> TRUE .)
    MAIOR_Q         reduce using rule 90 (exp_10 -> TRUE .)
    MAIOR_IGUAL     reduce using rule 90 (exp_10 -> TRUE .)
    MENOR_IGUAL     reduce using rule 90 (exp_10 -> TRUE .)
    IGUAL           reduce using rule 90 (exp_10 -> TRUE .)
    DIFERENTE       reduce using rule 90 (exp_10 -> TRUE .)
    OP_OU_EX        reduce using rule 90 (exp_10 -> TRUE .)
    XOR             reduce using rule 90 (exp_10 -> TRUE .)
    OP_E            reduce using rule 90 (exp_10 -> TRUE .)
    AND             reduce using rule 90 (exp_10 -> TRUE .)
    OP_OU           reduce using rule 90 (exp_10 -> TRUE .)
    OR              reduce using rule 90 (exp_10 -> TRUE .)
    PONTO_VIRG      reduce using rule 90 (exp_10 -> TRUE .)
    RECEBER         reduce using rule 90 (exp_10 -> TRUE .)
    PARENT_FECHA    reduce using rule 90 (exp_10 -> TRUE .)
    VIRGULA         reduce using rule 90 (exp_10 -> TRUE .)


state 34

    (91) exp_10 -> FALSE .

    MAIS_MAIS       reduce using rule 91 (exp_10 -> FALSE .)
    MENOS_MENOS     reduce using rule 91 (exp_10 -> FALSE .)
    PONTO           reduce using rule 91 (exp_10 -> FALSE .)
    SETA            reduce using rule 91 (exp_10 -> FALSE .)
    MULT            reduce using rule 91 (exp_10 -> FALSE .)
    DIV             reduce using rule 91 (exp_10 -> FALSE .)
    MODULO          reduce using rule 91 (exp_10 -> FALSE .)
    SOMA            reduce using rule 91 (exp_10 -> FALSE .)
    SUB             reduce using rule 91 (exp_10 -> FALSE .)
    MENOR_Q         reduce using rule 91 (exp_10 -> FALSE .)
    MAIOR_Q         reduce using rule 91 (exp_10 -> FALSE .)
    MAIOR_IGUAL     reduce using rule 91 (exp_10 -> FALSE .)
    MENOR_IGUAL     reduce using rule 91 (exp_10 -> FALSE .)
    IGUAL           reduce using rule 91 (exp_10 -> FALSE .)
    DIFERENTE       reduce using rule 91 (exp_10 -> FALSE .)
    OP_OU_EX        reduce using rule 91 (exp_10 -> FALSE .)
    XOR             reduce using rule 91 (exp_10 -> FALSE .)
    OP_E            reduce using rule 91 (exp_10 -> FALSE .)
    AND             reduce using rule 91 (exp_10 -> FALSE .)
    OP_OU           reduce using rule 91 (exp_10 -> FALSE .)
    OR              reduce using rule 91 (exp_10 -> FALSE .)
    PONTO_VIRG      reduce using rule 91 (exp_10 -> FALSE .)
    RECEBER         reduce using rule 91 (exp_10 -> FALSE .)
    PARENT_FECHA    reduce using rule 91 (exp_10 -> FALSE .)
    VIRGULA         reduce using rule 91 (exp_10 -> FALSE .)


state 35

    (92) exp_10 -> chamada_funcao .

    MAIS_MAIS       reduce using rule 92 (exp_10 -> chamada_funcao .)
    MENOS_MENOS     reduce using rule 92 (exp_10 -> chamada_funcao .)
    PONTO           reduce using rule 92 (exp_10 -> chamada_funcao .)
    SETA            reduce using rule 92 (exp_10 -> chamada_funcao .)
    MULT            reduce using rule 92 (exp_10 -> chamada_funcao .)
    DIV             reduce using rule 92 (exp_10 -> chamada_funcao .)
    MODULO          reduce using rule 92 (exp_10 -> chamada_funcao .)
    SOMA            reduce using rule 92 (exp_10 -> chamada_funcao .)
    SUB             reduce using rule 92 (exp_10 -> chamada_funcao .)
    MENOR_Q         reduce using rule 92 (exp_10 -> chamada_funcao .)
    MAIOR_Q         reduce using rule 92 (exp_10 -> chamada_funcao .)
    MAIOR_IGUAL     reduce using rule 92 (exp_10 -> chamada_funcao .)
    MENOR_IGUAL     reduce using rule 92 (exp_10 -> chamada_funcao .)
    IGUAL           reduce using rule 92 (exp_10 -> chamada_funcao .)
    DIFERENTE       reduce using rule 92 (exp_10 -> chamada_funcao .)
    OP_OU_EX        reduce using rule 92 (exp_10 -> chamada_funcao .)
    XOR             reduce using rule 92 (exp_10 -> chamada_funcao .)
    OP_E            reduce using rule 92 (exp_10 -> chamada_funcao .)
    AND             reduce using rule 92 (exp_10 -> chamada_funcao .)
    OP_OU           reduce using rule 92 (exp_10 -> chamada_funcao .)
    OR              reduce using rule 92 (exp_10 -> chamada_funcao .)
    PONTO_VIRG      reduce using rule 92 (exp_10 -> chamada_funcao .)
    RECEBER         reduce using rule 92 (exp_10 -> chamada_funcao .)
    PARENT_FECHA    reduce using rule 92 (exp_10 -> chamada_funcao .)
    VIRGULA         reduce using rule 92 (exp_10 -> chamada_funcao .)


state 36

    (93) exp_10 -> STRING_V .

    MAIS_MAIS       reduce using rule 93 (exp_10 -> STRING_V .)
    MENOS_MENOS     reduce using rule 93 (exp_10 -> STRING_V .)
    PONTO           reduce using rule 93 (exp_10 -> STRING_V .)
    SETA            reduce using rule 93 (exp_10 -> STRING_V .)
    MULT            reduce using rule 93 (exp_10 -> STRING_V .)
    DIV             reduce using rule 93 (exp_10 -> STRING_V .)
    MODULO          reduce using rule 93 (exp_10 -> STRING_V .)
    SOMA            reduce using rule 93 (exp_10 -> STRING_V .)
    SUB             reduce using rule 93 (exp_10 -> STRING_V .)
    MENOR_Q         reduce using rule 93 (exp_10 -> STRING_V .)
    MAIOR_Q         reduce using rule 93 (exp_10 -> STRING_V .)
    MAIOR_IGUAL     reduce using rule 93 (exp_10 -> STRING_V .)
    MENOR_IGUAL     reduce using rule 93 (exp_10 -> STRING_V .)
    IGUAL           reduce using rule 93 (exp_10 -> STRING_V .)
    DIFERENTE       reduce using rule 93 (exp_10 -> STRING_V .)
    OP_OU_EX        reduce using rule 93 (exp_10 -> STRING_V .)
    XOR             reduce using rule 93 (exp_10 -> STRING_V .)
    OP_E            reduce using rule 93 (exp_10 -> STRING_V .)
    AND             reduce using rule 93 (exp_10 -> STRING_V .)
    OP_OU           reduce using rule 93 (exp_10 -> STRING_V .)
    OR              reduce using rule 93 (exp_10 -> STRING_V .)
    PONTO_VIRG      reduce using rule 93 (exp_10 -> STRING_V .)
    RECEBER         reduce using rule 93 (exp_10 -> STRING_V .)
    PARENT_FECHA    reduce using rule 93 (exp_10 -> STRING_V .)
    VIRGULA         reduce using rule 93 (exp_10 -> STRING_V .)


state 37

    (94) exp_10 -> THIS .

    MAIS_MAIS       reduce using rule 94 (exp_10 -> THIS .)
    MENOS_MENOS     reduce using rule 94 (exp_10 -> THIS .)
    PONTO           reduce using rule 94 (exp_10 -> THIS .)
    SETA            reduce using rule 94 (exp_10 -> THIS .)
    MULT            reduce using rule 94 (exp_10 -> THIS .)
    DIV             reduce using rule 94 (exp_10 -> THIS .)
    MODULO          reduce using rule 94 (exp_10 -> THIS .)
    SOMA            reduce using rule 94 (exp_10 -> THIS .)
    SUB             reduce using rule 94 (exp_10 -> THIS .)
    MENOR_Q         reduce using rule 94 (exp_10 -> THIS .)
    MAIOR_Q         reduce using rule 94 (exp_10 -> THIS .)
    MAIOR_IGUAL     reduce using rule 94 (exp_10 -> THIS .)
    MENOR_IGUAL     reduce using rule 94 (exp_10 -> THIS .)
    IGUAL           reduce using rule 94 (exp_10 -> THIS .)
    DIFERENTE       reduce using rule 94 (exp_10 -> THIS .)
    OP_OU_EX        reduce using rule 94 (exp_10 -> THIS .)
    XOR             reduce using rule 94 (exp_10 -> THIS .)
    OP_E            reduce using rule 94 (exp_10 -> THIS .)
    AND             reduce using rule 94 (exp_10 -> THIS .)
    OP_OU           reduce using rule 94 (exp_10 -> THIS .)
    OR              reduce using rule 94 (exp_10 -> THIS .)
    PONTO_VIRG      reduce using rule 94 (exp_10 -> THIS .)
    RECEBER         reduce using rule 94 (exp_10 -> THIS .)
    PARENT_FECHA    reduce using rule 94 (exp_10 -> THIS .)
    VIRGULA         reduce using rule 94 (exp_10 -> THIS .)


state 38

    (98) chamada_funcao -> TYPEID . PARENT_ABRE exp PARENT_FECHA

    PARENT_ABRE     shift and go to state 80


state 39

    (8) cpp -> decl_classe cpp .

    $end            reduce using rule 8 (cpp -> decl_classe cpp .)


state 40

    (9) cpp -> decl_funcao cpp .

    $end            reduce using rule 9 (cpp -> decl_funcao cpp .)


state 41

    (10) cpp -> decl_variavel cpp .

    $end            reduce using rule 10 (cpp -> decl_variavel cpp .)


state 42

    (11) cpp -> typedef cpp .

    $end            reduce using rule 11 (cpp -> typedef cpp .)


state 43

    (12) cpp -> using cpp .

    $end            reduce using rule 12 (cpp -> using cpp .)


state 44

    (6) cpp -> exp PONTO_VIRG .
    (7) cpp -> exp PONTO_VIRG . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . typedef
    (5) cpp -> . using
    (6) cpp -> . exp PONTO_VIRG
    (7) cpp -> . exp PONTO_VIRG cpp
    (8) cpp -> . decl_classe cpp
    (9) cpp -> . decl_funcao cpp
    (10) cpp -> . decl_variavel cpp
    (11) cpp -> . typedef cpp
    (12) cpp -> . using cpp
    (13) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    $end            reduce using rule 6 (cpp -> exp PONTO_VIRG .)
    CLASS           shift and go to state 8
    VOID            shift and go to state 12
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 7
    cpp                            shift and go to state 81
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    typedef                        shift and go to state 5
    using                          shift and go to state 6
    tipo                           shift and go to state 10
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 45

    (52) exp -> exp RECEBER . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_1                          shift and go to state 82
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 46

    (13) decl_classe -> CLASS ID . body_class PONTO_VIRG
    (14) body_class -> . CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA
    (15) body_class -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 84

    body_class                     shift and go to state 83

state 47

    (96) chamada_funcao -> ID PARENT_ABRE . parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> ID PARENT_ABRE . PARENT_FECHA
    (99) parametros_chamada -> . ID VIRGULA parametros_chamada
    (100) parametros_chamada -> . ID

    PARENT_FECHA    shift and go to state 87
    ID              shift and go to state 85

    parametros_chamada             shift and go to state 86

state 48

    (24) decl_funcao -> tipo ID . PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> tipo ID . PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> tipo ID . PARENT_ABRE VOID PARENT_FECHA body
    (32) decl_variavel -> tipo ID . PONTO_VIRG
    (33) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (34) decl_variavel -> tipo ID . decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n PONTO_VIRG
    (36) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (37) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (38) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (39) decl_variavel_n -> . VIRGULA ID

    PARENT_ABRE     shift and go to state 88
    PONTO_VIRG      shift and go to state 89
    RECEBER         shift and go to state 90
    VIRGULA         shift and go to state 92

    decl_variavel_n                shift and go to state 91

state 49

    (95) exp_10 -> PARENT_ABRE exp . PARENT_FECHA
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 93
    RECEBER         shift and go to state 45


state 50

    (88) exp_10 -> ID .
    (96) chamada_funcao -> ID . PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> ID . PARENT_ABRE PARENT_FECHA

    MAIS_MAIS       reduce using rule 88 (exp_10 -> ID .)
    MENOS_MENOS     reduce using rule 88 (exp_10 -> ID .)
    PONTO           reduce using rule 88 (exp_10 -> ID .)
    SETA            reduce using rule 88 (exp_10 -> ID .)
    MULT            reduce using rule 88 (exp_10 -> ID .)
    DIV             reduce using rule 88 (exp_10 -> ID .)
    MODULO          reduce using rule 88 (exp_10 -> ID .)
    SOMA            reduce using rule 88 (exp_10 -> ID .)
    SUB             reduce using rule 88 (exp_10 -> ID .)
    MENOR_Q         reduce using rule 88 (exp_10 -> ID .)
    MAIOR_Q         reduce using rule 88 (exp_10 -> ID .)
    MAIOR_IGUAL     reduce using rule 88 (exp_10 -> ID .)
    MENOR_IGUAL     reduce using rule 88 (exp_10 -> ID .)
    IGUAL           reduce using rule 88 (exp_10 -> ID .)
    DIFERENTE       reduce using rule 88 (exp_10 -> ID .)
    OP_OU_EX        reduce using rule 88 (exp_10 -> ID .)
    XOR             reduce using rule 88 (exp_10 -> ID .)
    OP_E            reduce using rule 88 (exp_10 -> ID .)
    AND             reduce using rule 88 (exp_10 -> ID .)
    OP_OU           reduce using rule 88 (exp_10 -> ID .)
    OR              reduce using rule 88 (exp_10 -> ID .)
    PARENT_FECHA    reduce using rule 88 (exp_10 -> ID .)
    RECEBER         reduce using rule 88 (exp_10 -> ID .)
    PONTO_VIRG      reduce using rule 88 (exp_10 -> ID .)
    VIRGULA         reduce using rule 88 (exp_10 -> ID .)
    PARENT_ABRE     shift and go to state 47


state 51

    (27) decl_funcao -> VOID ID . PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> VOID ID . PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> VOID ID . PARENT_ABRE VOID PARENT_FECHA body

    PARENT_ABRE     shift and go to state 94


state 52

    (40) typedef -> TYPEDEF tipo . ID PONTO_VIRG
    (41) typedef -> TYPEDEF tipo . ID decl_typedef_n PONTO_VIRG

    ID              shift and go to state 95


state 53

    (134) tipo -> ID .

    ID              reduce using rule 134 (tipo -> ID .)
    MULT            reduce using rule 134 (tipo -> ID .)
    DIV             reduce using rule 134 (tipo -> ID .)
    MODULO          reduce using rule 134 (tipo -> ID .)
    SOMA            reduce using rule 134 (tipo -> ID .)
    SUB             reduce using rule 134 (tipo -> ID .)
    MENOR_Q         reduce using rule 134 (tipo -> ID .)
    MAIOR_Q         reduce using rule 134 (tipo -> ID .)
    MAIOR_IGUAL     reduce using rule 134 (tipo -> ID .)
    MENOR_IGUAL     reduce using rule 134 (tipo -> ID .)
    IGUAL           reduce using rule 134 (tipo -> ID .)
    DIFERENTE       reduce using rule 134 (tipo -> ID .)
    OP_OU_EX        reduce using rule 134 (tipo -> ID .)
    XOR             reduce using rule 134 (tipo -> ID .)
    OP_E            reduce using rule 134 (tipo -> ID .)
    AND             reduce using rule 134 (tipo -> ID .)
    OP_OU           reduce using rule 134 (tipo -> ID .)
    OR              reduce using rule 134 (tipo -> ID .)
    PONTO_VIRG      reduce using rule 134 (tipo -> ID .)
    RECEBER         reduce using rule 134 (tipo -> ID .)
    PARENT_FECHA    reduce using rule 134 (tipo -> ID .)
    VIRGULA         reduce using rule 134 (tipo -> ID .)


state 54

    (44) using -> USING ID . 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> USING ID . ID PONTO_VIRG

    2X_DOIS_PONTOS  shift and go to state 97
    ID              shift and go to state 96


state 55

    (54) exp_1 -> exp_1 OP_OU . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_2                          shift and go to state 98
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 56

    (55) exp_1 -> exp_1 OR . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_2                          shift and go to state 99
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 57

    (57) exp_2 -> exp_2 OP_E . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_3                          shift and go to state 100
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 58

    (58) exp_2 -> exp_2 AND . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_3                          shift and go to state 101
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 59

    (60) exp_3 -> exp_3 OP_OU_EX . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_4                          shift and go to state 102
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 60

    (61) exp_3 -> exp_3 XOR . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_4                          shift and go to state 103
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 61

    (63) exp_4 -> exp_4 IGUAL . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_5                          shift and go to state 104
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 62

    (64) exp_4 -> exp_4 DIFERENTE . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_5                          shift and go to state 105
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 63

    (66) exp_5 -> exp_5 MENOR_Q . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_6                          shift and go to state 106
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 64

    (67) exp_5 -> exp_5 MAIOR_Q . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_6                          shift and go to state 107
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 65

    (68) exp_5 -> exp_5 MAIOR_IGUAL . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_6                          shift and go to state 108
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 66

    (69) exp_5 -> exp_5 MENOR_IGUAL . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_6                          shift and go to state 109
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 67

    (71) exp_6 -> exp_6 SOMA . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_7                          shift and go to state 110
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 68

    (72) exp_6 -> exp_6 SUB . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_7                          shift and go to state 111
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 69

    (74) exp_7 -> exp_7 MULT . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_8                          shift and go to state 112
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 70

    (75) exp_7 -> exp_7 DIV . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_8                          shift and go to state 113
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 71

    (76) exp_7 -> exp_7 MODULO . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_8                          shift and go to state 114
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 72

    (78) exp_8 -> OP_NOT exp_9 .
    (85) exp_9 -> exp_9 . PONTO exp_10
    (86) exp_9 -> exp_9 . SETA exp_10

    MULT            reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    DIV             reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    MODULO          reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    SOMA            reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    SUB             reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    MENOR_Q         reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    MAIOR_Q         reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    MAIOR_IGUAL     reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    MENOR_IGUAL     reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    IGUAL           reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    DIFERENTE       reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    OP_OU_EX        reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    XOR             reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    OP_E            reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    AND             reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    OP_OU           reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    OR              reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    PONTO_VIRG      reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    RECEBER         reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    PARENT_FECHA    reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    VIRGULA         reduce using rule 78 (exp_8 -> OP_NOT exp_9 .)
    PONTO           shift and go to state 75
    SETA            shift and go to state 76


state 73

    (80) exp_8 -> exp_9 MAIS_MAIS .

    MULT            reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    DIV             reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    MODULO          reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    SOMA            reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    SUB             reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    MENOR_Q         reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    MAIOR_Q         reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    MAIOR_IGUAL     reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    MENOR_IGUAL     reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    IGUAL           reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    DIFERENTE       reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_OU_EX        reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    XOR             reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_E            reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    AND             reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_OU           reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    OR              reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    PONTO_VIRG      reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    RECEBER         reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    PARENT_FECHA    reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)
    VIRGULA         reduce using rule 80 (exp_8 -> exp_9 MAIS_MAIS .)


state 74

    (81) exp_8 -> exp_9 MENOS_MENOS .

    MULT            reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    DIV             reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    MODULO          reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    SOMA            reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    SUB             reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    MENOR_Q         reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    MAIOR_Q         reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    MAIOR_IGUAL     reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    MENOR_IGUAL     reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    IGUAL           reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    DIFERENTE       reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_OU_EX        reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    XOR             reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_E            reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    AND             reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_OU           reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    OR              reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    PONTO_VIRG      reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    RECEBER         reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    PARENT_FECHA    reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)
    VIRGULA         reduce using rule 81 (exp_8 -> exp_9 MENOS_MENOS .)


state 75

    (85) exp_9 -> exp_9 PONTO . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_10                         shift and go to state 115
    chamada_funcao                 shift and go to state 35

state 76

    (86) exp_9 -> exp_9 SETA . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_10                         shift and go to state 116
    chamada_funcao                 shift and go to state 35

state 77

    (79) exp_8 -> NOT exp_9 .
    (85) exp_9 -> exp_9 . PONTO exp_10
    (86) exp_9 -> exp_9 . SETA exp_10

    MULT            reduce using rule 79 (exp_8 -> NOT exp_9 .)
    DIV             reduce using rule 79 (exp_8 -> NOT exp_9 .)
    MODULO          reduce using rule 79 (exp_8 -> NOT exp_9 .)
    SOMA            reduce using rule 79 (exp_8 -> NOT exp_9 .)
    SUB             reduce using rule 79 (exp_8 -> NOT exp_9 .)
    MENOR_Q         reduce using rule 79 (exp_8 -> NOT exp_9 .)
    MAIOR_Q         reduce using rule 79 (exp_8 -> NOT exp_9 .)
    MAIOR_IGUAL     reduce using rule 79 (exp_8 -> NOT exp_9 .)
    MENOR_IGUAL     reduce using rule 79 (exp_8 -> NOT exp_9 .)
    IGUAL           reduce using rule 79 (exp_8 -> NOT exp_9 .)
    DIFERENTE       reduce using rule 79 (exp_8 -> NOT exp_9 .)
    OP_OU_EX        reduce using rule 79 (exp_8 -> NOT exp_9 .)
    XOR             reduce using rule 79 (exp_8 -> NOT exp_9 .)
    OP_E            reduce using rule 79 (exp_8 -> NOT exp_9 .)
    AND             reduce using rule 79 (exp_8 -> NOT exp_9 .)
    OP_OU           reduce using rule 79 (exp_8 -> NOT exp_9 .)
    OR              reduce using rule 79 (exp_8 -> NOT exp_9 .)
    PONTO_VIRG      reduce using rule 79 (exp_8 -> NOT exp_9 .)
    RECEBER         reduce using rule 79 (exp_8 -> NOT exp_9 .)
    PARENT_FECHA    reduce using rule 79 (exp_8 -> NOT exp_9 .)
    VIRGULA         reduce using rule 79 (exp_8 -> NOT exp_9 .)
    PONTO           shift and go to state 75
    SETA            shift and go to state 76


state 78

    (82) exp_8 -> SIZEOF PARENT_ABRE . exp_9 PARENT_FECHA
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp_9                          shift and go to state 117
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 79

    (83) exp_8 -> NEW tipo .

    MULT            reduce using rule 83 (exp_8 -> NEW tipo .)
    DIV             reduce using rule 83 (exp_8 -> NEW tipo .)
    MODULO          reduce using rule 83 (exp_8 -> NEW tipo .)
    SOMA            reduce using rule 83 (exp_8 -> NEW tipo .)
    SUB             reduce using rule 83 (exp_8 -> NEW tipo .)
    MENOR_Q         reduce using rule 83 (exp_8 -> NEW tipo .)
    MAIOR_Q         reduce using rule 83 (exp_8 -> NEW tipo .)
    MAIOR_IGUAL     reduce using rule 83 (exp_8 -> NEW tipo .)
    MENOR_IGUAL     reduce using rule 83 (exp_8 -> NEW tipo .)
    IGUAL           reduce using rule 83 (exp_8 -> NEW tipo .)
    DIFERENTE       reduce using rule 83 (exp_8 -> NEW tipo .)
    OP_OU_EX        reduce using rule 83 (exp_8 -> NEW tipo .)
    XOR             reduce using rule 83 (exp_8 -> NEW tipo .)
    OP_E            reduce using rule 83 (exp_8 -> NEW tipo .)
    AND             reduce using rule 83 (exp_8 -> NEW tipo .)
    OP_OU           reduce using rule 83 (exp_8 -> NEW tipo .)
    OR              reduce using rule 83 (exp_8 -> NEW tipo .)
    PONTO_VIRG      reduce using rule 83 (exp_8 -> NEW tipo .)
    RECEBER         reduce using rule 83 (exp_8 -> NEW tipo .)
    PARENT_FECHA    reduce using rule 83 (exp_8 -> NEW tipo .)
    VIRGULA         reduce using rule 83 (exp_8 -> NEW tipo .)


state 80

    (98) chamada_funcao -> TYPEID PARENT_ABRE . exp PARENT_FECHA
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 118
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 81

    (7) cpp -> exp PONTO_VIRG cpp .

    $end            reduce using rule 7 (cpp -> exp PONTO_VIRG cpp .)


state 82

    (52) exp -> exp RECEBER exp_1 .
    (54) exp_1 -> exp_1 . OP_OU exp_2
    (55) exp_1 -> exp_1 . OR exp_2

    PONTO_VIRG      reduce using rule 52 (exp -> exp RECEBER exp_1 .)
    RECEBER         reduce using rule 52 (exp -> exp RECEBER exp_1 .)
    PARENT_FECHA    reduce using rule 52 (exp -> exp RECEBER exp_1 .)
    VIRGULA         reduce using rule 52 (exp -> exp RECEBER exp_1 .)
    OP_OU           shift and go to state 55
    OR              shift and go to state 56


state 83

    (13) decl_classe -> CLASS ID body_class . PONTO_VIRG

    PONTO_VIRG      shift and go to state 119


state 84

    (14) body_class -> CHAVE_ABRE . PUBLIC DOIS_PONTOS content_class CHAVE_FECHA
    (15) body_class -> CHAVE_ABRE . CHAVE_FECHA

    PUBLIC          shift and go to state 120
    CHAVE_FECHA     shift and go to state 121


state 85

    (99) parametros_chamada -> ID . VIRGULA parametros_chamada
    (100) parametros_chamada -> ID .

    VIRGULA         shift and go to state 122
    PARENT_FECHA    reduce using rule 100 (parametros_chamada -> ID .)


state 86

    (96) chamada_funcao -> ID PARENT_ABRE parametros_chamada . PARENT_FECHA

    PARENT_FECHA    shift and go to state 123


state 87

    (97) chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .

    MAIS_MAIS       reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PONTO           reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SETA            reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MULT            reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    DIV             reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MODULO          reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SOMA            reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SUB             reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOR_Q         reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MAIOR_Q         reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    IGUAL           reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    DIFERENTE       reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_OU_EX        reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    XOR             reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_E            reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    AND             reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_OU           reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OR              reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    RECEBER         reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    VIRGULA         reduce using rule 97 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)


state 88

    (24) decl_funcao -> tipo ID PARENT_ABRE . parametros PARENT_FECHA body
    (25) decl_funcao -> tipo ID PARENT_ABRE . PARENT_FECHA body
    (26) decl_funcao -> tipo ID PARENT_ABRE . VOID PARENT_FECHA body
    (30) parametros -> . tipo ID
    (31) parametros -> . tipo ID VIRGULA parametros
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    PARENT_FECHA    shift and go to state 126
    VOID            shift and go to state 127
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    tipo                           shift and go to state 124
    parametros                     shift and go to state 125

state 89

    (32) decl_variavel -> tipo ID PONTO_VIRG .

    CLASS           reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    VOID            reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    USING           reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    INT             reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    BOOL            reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    ID              reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    STRING          reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    OP_NOT          reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    NOT             reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    SIZEOF          reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    NEW             reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    INT_V           reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    TRUE            reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    FALSE           reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    STRING_V        reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    THIS            reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    TYPEID          reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    $end            reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    STATIC          reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    IF              reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    WHILE           reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    FOR             reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    RETURN          reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)
    ELSE            reduce using rule 32 (decl_variavel -> tipo ID PONTO_VIRG .)


state 90

    (33) decl_variavel -> tipo ID RECEBER . exp PONTO_VIRG
    (35) decl_variavel -> tipo ID RECEBER . exp decl_variavel_n PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 128
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 91

    (34) decl_variavel -> tipo ID decl_variavel_n . PONTO_VIRG

    PONTO_VIRG      shift and go to state 129


state 92

    (36) decl_variavel_n -> VIRGULA . ID decl_variavel_n
    (37) decl_variavel_n -> VIRGULA . ID RECEBER exp decl_variavel_n
    (38) decl_variavel_n -> VIRGULA . ID RECEBER exp
    (39) decl_variavel_n -> VIRGULA . ID

    ID              shift and go to state 130


state 93

    (95) exp_10 -> PARENT_ABRE exp PARENT_FECHA .

    MAIS_MAIS       reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    PONTO           reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    SETA            reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MULT            reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    DIV             reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MODULO          reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    SOMA            reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    SUB             reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOR_Q         reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_Q         reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    IGUAL           reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    DIFERENTE       reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_OU_EX        reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    XOR             reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_E            reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    AND             reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_OU           reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    OR              reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    RECEBER         reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)
    VIRGULA         reduce using rule 95 (exp_10 -> PARENT_ABRE exp PARENT_FECHA .)


state 94

    (27) decl_funcao -> VOID ID PARENT_ABRE . parametros PARENT_FECHA body
    (28) decl_funcao -> VOID ID PARENT_ABRE . PARENT_FECHA body
    (29) decl_funcao -> VOID ID PARENT_ABRE . VOID PARENT_FECHA body
    (30) parametros -> . tipo ID
    (31) parametros -> . tipo ID VIRGULA parametros
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    PARENT_FECHA    shift and go to state 133
    VOID            shift and go to state 131
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    parametros                     shift and go to state 132
    tipo                           shift and go to state 124

state 95

    (40) typedef -> TYPEDEF tipo ID . PONTO_VIRG
    (41) typedef -> TYPEDEF tipo ID . decl_typedef_n PONTO_VIRG
    (42) decl_typedef_n -> . VIRGULA ID decl_typedef_n
    (43) decl_typedef_n -> . VIRGULA ID

    PONTO_VIRG      shift and go to state 134
    VIRGULA         shift and go to state 136

    decl_typedef_n                 shift and go to state 135

state 96

    (45) using -> USING ID ID . PONTO_VIRG

    PONTO_VIRG      shift and go to state 137


state 97

    (44) using -> USING ID 2X_DOIS_PONTOS . ID PONTO_VIRG

    ID              shift and go to state 138


state 98

    (54) exp_1 -> exp_1 OP_OU exp_2 .
    (57) exp_2 -> exp_2 . OP_E exp_3
    (58) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 54 (exp_1 -> exp_1 OP_OU exp_2 .)
    OR              reduce using rule 54 (exp_1 -> exp_1 OP_OU exp_2 .)
    PONTO_VIRG      reduce using rule 54 (exp_1 -> exp_1 OP_OU exp_2 .)
    RECEBER         reduce using rule 54 (exp_1 -> exp_1 OP_OU exp_2 .)
    PARENT_FECHA    reduce using rule 54 (exp_1 -> exp_1 OP_OU exp_2 .)
    VIRGULA         reduce using rule 54 (exp_1 -> exp_1 OP_OU exp_2 .)
    OP_E            shift and go to state 57
    AND             shift and go to state 58


state 99

    (55) exp_1 -> exp_1 OR exp_2 .
    (57) exp_2 -> exp_2 . OP_E exp_3
    (58) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 55 (exp_1 -> exp_1 OR exp_2 .)
    OR              reduce using rule 55 (exp_1 -> exp_1 OR exp_2 .)
    PONTO_VIRG      reduce using rule 55 (exp_1 -> exp_1 OR exp_2 .)
    RECEBER         reduce using rule 55 (exp_1 -> exp_1 OR exp_2 .)
    PARENT_FECHA    reduce using rule 55 (exp_1 -> exp_1 OR exp_2 .)
    VIRGULA         reduce using rule 55 (exp_1 -> exp_1 OR exp_2 .)
    OP_E            shift and go to state 57
    AND             shift and go to state 58


state 100

    (57) exp_2 -> exp_2 OP_E exp_3 .
    (60) exp_3 -> exp_3 . OP_OU_EX exp_4
    (61) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 57 (exp_2 -> exp_2 OP_E exp_3 .)
    AND             reduce using rule 57 (exp_2 -> exp_2 OP_E exp_3 .)
    OP_OU           reduce using rule 57 (exp_2 -> exp_2 OP_E exp_3 .)
    OR              reduce using rule 57 (exp_2 -> exp_2 OP_E exp_3 .)
    PONTO_VIRG      reduce using rule 57 (exp_2 -> exp_2 OP_E exp_3 .)
    RECEBER         reduce using rule 57 (exp_2 -> exp_2 OP_E exp_3 .)
    PARENT_FECHA    reduce using rule 57 (exp_2 -> exp_2 OP_E exp_3 .)
    VIRGULA         reduce using rule 57 (exp_2 -> exp_2 OP_E exp_3 .)
    OP_OU_EX        shift and go to state 59
    XOR             shift and go to state 60


state 101

    (58) exp_2 -> exp_2 AND exp_3 .
    (60) exp_3 -> exp_3 . OP_OU_EX exp_4
    (61) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 58 (exp_2 -> exp_2 AND exp_3 .)
    AND             reduce using rule 58 (exp_2 -> exp_2 AND exp_3 .)
    OP_OU           reduce using rule 58 (exp_2 -> exp_2 AND exp_3 .)
    OR              reduce using rule 58 (exp_2 -> exp_2 AND exp_3 .)
    PONTO_VIRG      reduce using rule 58 (exp_2 -> exp_2 AND exp_3 .)
    RECEBER         reduce using rule 58 (exp_2 -> exp_2 AND exp_3 .)
    PARENT_FECHA    reduce using rule 58 (exp_2 -> exp_2 AND exp_3 .)
    VIRGULA         reduce using rule 58 (exp_2 -> exp_2 AND exp_3 .)
    OP_OU_EX        shift and go to state 59
    XOR             shift and go to state 60


state 102

    (60) exp_3 -> exp_3 OP_OU_EX exp_4 .
    (63) exp_4 -> exp_4 . IGUAL exp_5
    (64) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    XOR             reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OP_E            reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    AND             reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OP_OU           reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OR              reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    PONTO_VIRG      reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    RECEBER         reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    PARENT_FECHA    reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    VIRGULA         reduce using rule 60 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    IGUAL           shift and go to state 61
    DIFERENTE       shift and go to state 62


state 103

    (61) exp_3 -> exp_3 XOR exp_4 .
    (63) exp_4 -> exp_4 . IGUAL exp_5
    (64) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    XOR             reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    OP_E            reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    AND             reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    OP_OU           reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    OR              reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    PONTO_VIRG      reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    RECEBER         reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    PARENT_FECHA    reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    VIRGULA         reduce using rule 61 (exp_3 -> exp_3 XOR exp_4 .)
    IGUAL           shift and go to state 61
    DIFERENTE       shift and go to state 62


state 104

    (63) exp_4 -> exp_4 IGUAL exp_5 .
    (66) exp_5 -> exp_5 . MENOR_Q exp_6
    (67) exp_5 -> exp_5 . MAIOR_Q exp_6
    (68) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (69) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    DIFERENTE       reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_OU_EX        reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    XOR             reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_E            reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    AND             reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_OU           reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    OR              reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    PONTO_VIRG      reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    RECEBER         reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    PARENT_FECHA    reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    VIRGULA         reduce using rule 63 (exp_4 -> exp_4 IGUAL exp_5 .)
    MENOR_Q         shift and go to state 63
    MAIOR_Q         shift and go to state 64
    MAIOR_IGUAL     shift and go to state 65
    MENOR_IGUAL     shift and go to state 66


state 105

    (64) exp_4 -> exp_4 DIFERENTE exp_5 .
    (66) exp_5 -> exp_5 . MENOR_Q exp_6
    (67) exp_5 -> exp_5 . MAIOR_Q exp_6
    (68) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (69) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    DIFERENTE       reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_OU_EX        reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    XOR             reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_E            reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    AND             reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_OU           reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OR              reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    PONTO_VIRG      reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    RECEBER         reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    PARENT_FECHA    reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    VIRGULA         reduce using rule 64 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    MENOR_Q         shift and go to state 63
    MAIOR_Q         shift and go to state 64
    MAIOR_IGUAL     shift and go to state 65
    MENOR_IGUAL     shift and go to state 66


state 106

    (66) exp_5 -> exp_5 MENOR_Q exp_6 .
    (71) exp_6 -> exp_6 . SOMA exp_7
    (72) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MAIOR_Q         reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MAIOR_IGUAL     reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MENOR_IGUAL     reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    IGUAL           reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    DIFERENTE       reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_OU_EX        reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    XOR             reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_E            reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    AND             reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_OU           reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OR              reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    PONTO_VIRG      reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    RECEBER         reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    PARENT_FECHA    reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    VIRGULA         reduce using rule 66 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    SOMA            shift and go to state 67
    SUB             shift and go to state 68


state 107

    (67) exp_5 -> exp_5 MAIOR_Q exp_6 .
    (71) exp_6 -> exp_6 . SOMA exp_7
    (72) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MAIOR_Q         reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MAIOR_IGUAL     reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MENOR_IGUAL     reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    IGUAL           reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    DIFERENTE       reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_OU_EX        reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    XOR             reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_E            reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    AND             reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_OU           reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OR              reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    PONTO_VIRG      reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    RECEBER         reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    PARENT_FECHA    reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    VIRGULA         reduce using rule 67 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    SOMA            shift and go to state 67
    SUB             shift and go to state 68


state 108

    (68) exp_5 -> exp_5 MAIOR_IGUAL exp_6 .
    (71) exp_6 -> exp_6 . SOMA exp_7
    (72) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MAIOR_Q         reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MAIOR_IGUAL     reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MENOR_IGUAL     reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    IGUAL           reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    DIFERENTE       reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_OU_EX        reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    XOR             reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_E            reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    AND             reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_OU           reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OR              reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    PONTO_VIRG      reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    RECEBER         reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    PARENT_FECHA    reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    VIRGULA         reduce using rule 68 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    SOMA            shift and go to state 67
    SUB             shift and go to state 68


state 109

    (69) exp_5 -> exp_5 MENOR_IGUAL exp_6 .
    (71) exp_6 -> exp_6 . SOMA exp_7
    (72) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MAIOR_Q         reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MAIOR_IGUAL     reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MENOR_IGUAL     reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    IGUAL           reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    DIFERENTE       reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_OU_EX        reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    XOR             reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_E            reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    AND             reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_OU           reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OR              reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    PONTO_VIRG      reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    RECEBER         reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    PARENT_FECHA    reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    VIRGULA         reduce using rule 69 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    SOMA            shift and go to state 67
    SUB             shift and go to state 68


state 110

    (71) exp_6 -> exp_6 SOMA exp_7 .
    (74) exp_7 -> exp_7 . MULT exp_8
    (75) exp_7 -> exp_7 . DIV exp_8
    (76) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    SUB             reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    MENOR_Q         reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    MAIOR_Q         reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    MAIOR_IGUAL     reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    MENOR_IGUAL     reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    IGUAL           reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    DIFERENTE       reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_OU_EX        reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    XOR             reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_E            reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    AND             reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_OU           reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    OR              reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    PONTO_VIRG      reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    RECEBER         reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    PARENT_FECHA    reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    VIRGULA         reduce using rule 71 (exp_6 -> exp_6 SOMA exp_7 .)
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MODULO          shift and go to state 71


state 111

    (72) exp_6 -> exp_6 SUB exp_7 .
    (74) exp_7 -> exp_7 . MULT exp_8
    (75) exp_7 -> exp_7 . DIV exp_8
    (76) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    SUB             reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    MENOR_Q         reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    MAIOR_Q         reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    MAIOR_IGUAL     reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    MENOR_IGUAL     reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    IGUAL           reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    DIFERENTE       reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    OP_OU_EX        reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    XOR             reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    OP_E            reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    AND             reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    OP_OU           reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    OR              reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    PONTO_VIRG      reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    RECEBER         reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    PARENT_FECHA    reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    VIRGULA         reduce using rule 72 (exp_6 -> exp_6 SUB exp_7 .)
    MULT            shift and go to state 69
    DIV             shift and go to state 70
    MODULO          shift and go to state 71


state 112

    (74) exp_7 -> exp_7 MULT exp_8 .

    MULT            reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    DIV             reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    MODULO          reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    SOMA            reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    SUB             reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    MENOR_Q         reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    MAIOR_Q         reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    MAIOR_IGUAL     reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    MENOR_IGUAL     reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    IGUAL           reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    DIFERENTE       reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    OP_OU_EX        reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    XOR             reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    OP_E            reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    AND             reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    OP_OU           reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    OR              reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    PONTO_VIRG      reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    RECEBER         reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    PARENT_FECHA    reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)
    VIRGULA         reduce using rule 74 (exp_7 -> exp_7 MULT exp_8 .)


state 113

    (75) exp_7 -> exp_7 DIV exp_8 .

    MULT            reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    DIV             reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    MODULO          reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    SOMA            reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    SUB             reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    MENOR_Q         reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    MAIOR_Q         reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    MAIOR_IGUAL     reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    MENOR_IGUAL     reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    IGUAL           reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    DIFERENTE       reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    OP_OU_EX        reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    XOR             reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    OP_E            reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    AND             reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    OP_OU           reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    OR              reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    PONTO_VIRG      reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    RECEBER         reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    PARENT_FECHA    reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)
    VIRGULA         reduce using rule 75 (exp_7 -> exp_7 DIV exp_8 .)


state 114

    (76) exp_7 -> exp_7 MODULO exp_8 .

    MULT            reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    DIV             reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    MODULO          reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    SOMA            reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    SUB             reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    MENOR_Q         reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    MAIOR_Q         reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    MAIOR_IGUAL     reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    MENOR_IGUAL     reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    IGUAL           reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    DIFERENTE       reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_OU_EX        reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    XOR             reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_E            reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    AND             reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_OU           reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    OR              reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    PONTO_VIRG      reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    RECEBER         reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    PARENT_FECHA    reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)
    VIRGULA         reduce using rule 76 (exp_7 -> exp_7 MODULO exp_8 .)


state 115

    (85) exp_9 -> exp_9 PONTO exp_10 .

    MAIS_MAIS       reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    MENOS_MENOS     reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    PONTO           reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    SETA            reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    MULT            reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    DIV             reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    MODULO          reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    SOMA            reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    SUB             reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    MENOR_Q         reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    MAIOR_Q         reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    MAIOR_IGUAL     reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    MENOR_IGUAL     reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    IGUAL           reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    DIFERENTE       reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    OP_OU_EX        reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    XOR             reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    OP_E            reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    AND             reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    OP_OU           reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    OR              reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    PONTO_VIRG      reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    RECEBER         reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    PARENT_FECHA    reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)
    VIRGULA         reduce using rule 85 (exp_9 -> exp_9 PONTO exp_10 .)


state 116

    (86) exp_9 -> exp_9 SETA exp_10 .

    MAIS_MAIS       reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    MENOS_MENOS     reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    PONTO           reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    SETA            reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    MULT            reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    DIV             reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    MODULO          reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    SOMA            reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    SUB             reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    MENOR_Q         reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    MAIOR_Q         reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    MAIOR_IGUAL     reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    MENOR_IGUAL     reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    IGUAL           reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    DIFERENTE       reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    OP_OU_EX        reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    XOR             reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    OP_E            reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    AND             reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    OP_OU           reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    OR              reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    PONTO_VIRG      reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    RECEBER         reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    PARENT_FECHA    reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)
    VIRGULA         reduce using rule 86 (exp_9 -> exp_9 SETA exp_10 .)


state 117

    (82) exp_8 -> SIZEOF PARENT_ABRE exp_9 . PARENT_FECHA
    (85) exp_9 -> exp_9 . PONTO exp_10
    (86) exp_9 -> exp_9 . SETA exp_10

    PARENT_FECHA    shift and go to state 139
    PONTO           shift and go to state 75
    SETA            shift and go to state 76


state 118

    (98) chamada_funcao -> TYPEID PARENT_ABRE exp . PARENT_FECHA
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 140
    RECEBER         shift and go to state 45


state 119

    (13) decl_classe -> CLASS ID body_class PONTO_VIRG .

    CLASS           reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    VOID            reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    TYPEDEF         reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    USING           reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    INT             reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    BOOL            reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    ID              reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    STRING          reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    OP_NOT          reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    NOT             reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    SIZEOF          reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    NEW             reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    INT_V           reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    TRUE            reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    FALSE           reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    STRING_V        reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    THIS            reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    TYPEID          reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    $end            reduce using rule 13 (decl_classe -> CLASS ID body_class PONTO_VIRG .)


state 120

    (14) body_class -> CHAVE_ABRE PUBLIC . DOIS_PONTOS content_class CHAVE_FECHA

    DOIS_PONTOS     shift and go to state 141


state 121

    (15) body_class -> CHAVE_ABRE CHAVE_FECHA .

    PONTO_VIRG      reduce using rule 15 (body_class -> CHAVE_ABRE CHAVE_FECHA .)


state 122

    (99) parametros_chamada -> ID VIRGULA . parametros_chamada
    (99) parametros_chamada -> . ID VIRGULA parametros_chamada
    (100) parametros_chamada -> . ID

    ID              shift and go to state 85

    parametros_chamada             shift and go to state 142

state 123

    (96) chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .

    MAIS_MAIS       reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    PONTO           reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    SETA            reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MULT            reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    DIV             reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MODULO          reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    SOMA            reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    SUB             reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MENOR_Q         reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MAIOR_Q         reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    IGUAL           reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    DIFERENTE       reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    OP_OU_EX        reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    XOR             reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    OP_E            reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    AND             reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    OP_OU           reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    OR              reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    RECEBER         reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)
    VIRGULA         reduce using rule 96 (chamada_funcao -> ID PARENT_ABRE parametros_chamada PARENT_FECHA .)


state 124

    (30) parametros -> tipo . ID
    (31) parametros -> tipo . ID VIRGULA parametros

    ID              shift and go to state 143


state 125

    (24) decl_funcao -> tipo ID PARENT_ABRE parametros . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 144


state 126

    (25) decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA . body
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 146

    body                           shift and go to state 145

state 127

    (26) decl_funcao -> tipo ID PARENT_ABRE VOID . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 147


state 128

    (33) decl_variavel -> tipo ID RECEBER exp . PONTO_VIRG
    (35) decl_variavel -> tipo ID RECEBER exp . decl_variavel_n PONTO_VIRG
    (52) exp -> exp . RECEBER exp_1
    (36) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (37) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (38) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (39) decl_variavel_n -> . VIRGULA ID

    PONTO_VIRG      shift and go to state 148
    RECEBER         shift and go to state 45
    VIRGULA         shift and go to state 92

    decl_variavel_n                shift and go to state 149

state 129

    (34) decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .

    CLASS           reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    VOID            reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    TYPEDEF         reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    USING           reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    INT             reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    BOOL            reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    ID              reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    STRING          reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    OP_NOT          reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    NOT             reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    SIZEOF          reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    NEW             reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    INT_V           reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    TRUE            reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    FALSE           reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    STRING_V        reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    THIS            reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    TYPEID          reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    $end            reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    STATIC          reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    IF              reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    WHILE           reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    FOR             reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    RETURN          reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)
    ELSE            reduce using rule 34 (decl_variavel -> tipo ID decl_variavel_n PONTO_VIRG .)


state 130

    (36) decl_variavel_n -> VIRGULA ID . decl_variavel_n
    (37) decl_variavel_n -> VIRGULA ID . RECEBER exp decl_variavel_n
    (38) decl_variavel_n -> VIRGULA ID . RECEBER exp
    (39) decl_variavel_n -> VIRGULA ID .
    (36) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (37) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (38) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (39) decl_variavel_n -> . VIRGULA ID

    RECEBER         shift and go to state 151
    PONTO_VIRG      reduce using rule 39 (decl_variavel_n -> VIRGULA ID .)
    VIRGULA         shift and go to state 92

    decl_variavel_n                shift and go to state 150

state 131

    (29) decl_funcao -> VOID ID PARENT_ABRE VOID . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 152


state 132

    (27) decl_funcao -> VOID ID PARENT_ABRE parametros . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 153


state 133

    (28) decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA . body
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 146

    body                           shift and go to state 154

state 134

    (40) typedef -> TYPEDEF tipo ID PONTO_VIRG .

    CLASS           reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    VOID            reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    USING           reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    INT             reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    BOOL            reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    ID              reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    STRING          reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    OP_NOT          reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    NOT             reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    SIZEOF          reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    NEW             reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    INT_V           reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    TRUE            reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    FALSE           reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    STRING_V        reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    THIS            reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    TYPEID          reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    $end            reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    IF              reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    WHILE           reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    FOR             reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    RETURN          reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)
    ELSE            reduce using rule 40 (typedef -> TYPEDEF tipo ID PONTO_VIRG .)


state 135

    (41) typedef -> TYPEDEF tipo ID decl_typedef_n . PONTO_VIRG

    PONTO_VIRG      shift and go to state 155


state 136

    (42) decl_typedef_n -> VIRGULA . ID decl_typedef_n
    (43) decl_typedef_n -> VIRGULA . ID

    ID              shift and go to state 156


state 137

    (45) using -> USING ID ID PONTO_VIRG .

    CLASS           reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    VOID            reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    USING           reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    INT             reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    BOOL            reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    ID              reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    STRING          reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    OP_NOT          reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    NOT             reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    SIZEOF          reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    NEW             reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    INT_V           reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    TRUE            reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    FALSE           reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    STRING_V        reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    THIS            reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    TYPEID          reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    $end            reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    IF              reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    WHILE           reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    FOR             reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    RETURN          reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)
    ELSE            reduce using rule 45 (using -> USING ID ID PONTO_VIRG .)


state 138

    (44) using -> USING ID 2X_DOIS_PONTOS ID . PONTO_VIRG

    PONTO_VIRG      shift and go to state 157


state 139

    (82) exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .

    MULT            reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    DIV             reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MODULO          reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    SOMA            reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    SUB             reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MENOR_Q         reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MAIOR_Q         reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    IGUAL           reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    DIFERENTE       reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_OU_EX        reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    XOR             reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_E            reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    AND             reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_OU           reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OR              reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    RECEBER         reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    VIRGULA         reduce using rule 82 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)


state 140

    (98) chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .

    MAIS_MAIS       reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PONTO           reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SETA            reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MULT            reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    DIV             reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MODULO          reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SOMA            reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SUB             reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOR_Q         reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_Q         reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    IGUAL           reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    DIFERENTE       reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_OU_EX        reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    XOR             reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_E            reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    AND             reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_OU           reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OR              reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    RECEBER         reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    VIRGULA         reduce using rule 98 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)


state 141

    (14) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS . content_class CHAVE_FECHA
    (16) content_class -> . decl_variavel
    (17) content_class -> . decl_funcao
    (18) content_class -> . STATIC decl_variavel
    (19) content_class -> . STATIC decl_funcao
    (20) content_class -> . decl_variavel content_class
    (21) content_class -> . decl_funcao content_class
    (22) content_class -> . STATIC decl_variavel content_class
    (23) content_class -> . STATIC decl_funcao content_class
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    STATIC          shift and go to state 161
    VOID            shift and go to state 12
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    content_class                  shift and go to state 158
    decl_variavel                  shift and go to state 159
    decl_funcao                    shift and go to state 160
    tipo                           shift and go to state 162

state 142

    (99) parametros_chamada -> ID VIRGULA parametros_chamada .

    PARENT_FECHA    reduce using rule 99 (parametros_chamada -> ID VIRGULA parametros_chamada .)


state 143

    (30) parametros -> tipo ID .
    (31) parametros -> tipo ID . VIRGULA parametros

    PARENT_FECHA    reduce using rule 30 (parametros -> tipo ID .)
    VIRGULA         shift and go to state 163


state 144

    (24) decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA . body
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 146

    body                           shift and go to state 164

state 145

    (25) decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .

    CLASS           reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    VOID            reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    TYPEDEF         reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    USING           reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    INT             reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    BOOL            reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    ID              reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    STRING          reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    OP_NOT          reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    NOT             reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    SIZEOF          reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    NEW             reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    INT_V           reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    TRUE            reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    FALSE           reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    STRING_V        reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    THIS            reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    TYPEID          reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    $end            reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    STATIC          reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 25 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)


state 146

    (46) body -> CHAVE_ABRE . comandos CHAVE_FECHA
    (47) body -> CHAVE_ABRE . CHAVE_FECHA
    (48) comandos -> . comando
    (49) comandos -> . comando comandos
    (50) comando -> . condicional_1
    (51) comando -> . condicional_2
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (114) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_FECHA     shift and go to state 166
    IF              shift and go to state 170
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    comandos                       shift and go to state 165
    comando                        shift and go to state 167
    condicional_1                  shift and go to state 168
    condicional_2                  shift and go to state 169
    exp                            shift and go to state 171
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 147

    (26) decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA . body
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 146

    body                           shift and go to state 179

state 148

    (33) decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .

    CLASS           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    VOID            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TYPEDEF         reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    USING           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    INT             reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    BOOL            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    ID              reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    STRING          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    OP_NOT          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    NOT             reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    SIZEOF          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    NEW             reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    INT_V           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TRUE            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    FALSE           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    STRING_V        reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    THIS            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TYPEID          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    $end            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    STATIC          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    IF              reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    WHILE           reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    FOR             reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    RETURN          reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    ELSE            reduce using rule 33 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)


state 149

    (35) decl_variavel -> tipo ID RECEBER exp decl_variavel_n . PONTO_VIRG

    PONTO_VIRG      shift and go to state 180


state 150

    (36) decl_variavel_n -> VIRGULA ID decl_variavel_n .

    PONTO_VIRG      reduce using rule 36 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)


state 151

    (37) decl_variavel_n -> VIRGULA ID RECEBER . exp decl_variavel_n
    (38) decl_variavel_n -> VIRGULA ID RECEBER . exp
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 181
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 152

    (29) decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA . body
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 146

    body                           shift and go to state 182

state 153

    (27) decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA . body
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 146

    body                           shift and go to state 183

state 154

    (28) decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .

    CLASS           reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    VOID            reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    TYPEDEF         reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    USING           reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    INT             reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    BOOL            reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    ID              reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    STRING          reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    OP_NOT          reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    NOT             reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    SIZEOF          reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    NEW             reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    INT_V           reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    TRUE            reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    FALSE           reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    STRING_V        reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    THIS            reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    TYPEID          reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    $end            reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    STATIC          reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 28 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)


state 155

    (41) typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .

    CLASS           reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    VOID            reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    TYPEDEF         reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    USING           reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    INT             reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    BOOL            reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    ID              reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    STRING          reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    OP_NOT          reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    NOT             reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    SIZEOF          reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    NEW             reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    INT_V           reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    TRUE            reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    FALSE           reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    STRING_V        reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    THIS            reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    TYPEID          reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    $end            reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    IF              reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    WHILE           reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    FOR             reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    RETURN          reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)
    ELSE            reduce using rule 41 (typedef -> TYPEDEF tipo ID decl_typedef_n PONTO_VIRG .)


state 156

    (42) decl_typedef_n -> VIRGULA ID . decl_typedef_n
    (43) decl_typedef_n -> VIRGULA ID .
    (42) decl_typedef_n -> . VIRGULA ID decl_typedef_n
    (43) decl_typedef_n -> . VIRGULA ID

    PONTO_VIRG      reduce using rule 43 (decl_typedef_n -> VIRGULA ID .)
    VIRGULA         shift and go to state 136

    decl_typedef_n                 shift and go to state 184

state 157

    (44) using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .

    CLASS           reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    VOID            reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    USING           reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    INT             reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    BOOL            reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    ID              reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    STRING          reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    OP_NOT          reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    NOT             reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    SIZEOF          reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    NEW             reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    INT_V           reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    TRUE            reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    FALSE           reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    STRING_V        reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    THIS            reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    TYPEID          reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    $end            reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    IF              reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    WHILE           reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    FOR             reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    RETURN          reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)
    ELSE            reduce using rule 44 (using -> USING ID 2X_DOIS_PONTOS ID PONTO_VIRG .)


state 158

    (14) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class . CHAVE_FECHA

    CHAVE_FECHA     shift and go to state 185


state 159

    (16) content_class -> decl_variavel .
    (20) content_class -> decl_variavel . content_class
    (16) content_class -> . decl_variavel
    (17) content_class -> . decl_funcao
    (18) content_class -> . STATIC decl_variavel
    (19) content_class -> . STATIC decl_funcao
    (20) content_class -> . decl_variavel content_class
    (21) content_class -> . decl_funcao content_class
    (22) content_class -> . STATIC decl_variavel content_class
    (23) content_class -> . STATIC decl_funcao content_class
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    CHAVE_FECHA     reduce using rule 16 (content_class -> decl_variavel .)
    STATIC          shift and go to state 161
    VOID            shift and go to state 12
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    decl_variavel                  shift and go to state 159
    content_class                  shift and go to state 186
    decl_funcao                    shift and go to state 160
    tipo                           shift and go to state 162

state 160

    (17) content_class -> decl_funcao .
    (21) content_class -> decl_funcao . content_class
    (16) content_class -> . decl_variavel
    (17) content_class -> . decl_funcao
    (18) content_class -> . STATIC decl_variavel
    (19) content_class -> . STATIC decl_funcao
    (20) content_class -> . decl_variavel content_class
    (21) content_class -> . decl_funcao content_class
    (22) content_class -> . STATIC decl_variavel content_class
    (23) content_class -> . STATIC decl_funcao content_class
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    CHAVE_FECHA     reduce using rule 17 (content_class -> decl_funcao .)
    STATIC          shift and go to state 161
    VOID            shift and go to state 12
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    decl_funcao                    shift and go to state 160
    content_class                  shift and go to state 187
    decl_variavel                  shift and go to state 159
    tipo                           shift and go to state 162

state 161

    (18) content_class -> STATIC . decl_variavel
    (19) content_class -> STATIC . decl_funcao
    (22) content_class -> STATIC . decl_variavel content_class
    (23) content_class -> STATIC . decl_funcao content_class
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    VOID            shift and go to state 12
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    decl_variavel                  shift and go to state 188
    decl_funcao                    shift and go to state 189
    tipo                           shift and go to state 162

state 162

    (32) decl_variavel -> tipo . ID PONTO_VIRG
    (33) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> tipo . ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n PONTO_VIRG
    (24) decl_funcao -> tipo . ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> tipo . ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> tipo . ID PARENT_ABRE VOID PARENT_FECHA body

    ID              shift and go to state 190


state 163

    (31) parametros -> tipo ID VIRGULA . parametros
    (30) parametros -> . tipo ID
    (31) parametros -> . tipo ID VIRGULA parametros
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    tipo                           shift and go to state 124
    parametros                     shift and go to state 191

state 164

    (24) decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .

    CLASS           reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    VOID            reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    TYPEDEF         reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    USING           reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    INT             reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    BOOL            reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    ID              reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    STRING          reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    OP_NOT          reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    NOT             reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    SIZEOF          reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    NEW             reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    INT_V           reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    TRUE            reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    FALSE           reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    STRING_V        reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    THIS            reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    TYPEID          reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    $end            reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    STATIC          reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 24 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)


state 165

    (46) body -> CHAVE_ABRE comandos . CHAVE_FECHA

    CHAVE_FECHA     shift and go to state 192


state 166

    (47) body -> CHAVE_ABRE CHAVE_FECHA .

    CLASS           reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    VOID            reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TYPEDEF         reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    USING           reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    INT             reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    BOOL            reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    ID              reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    STRING          reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    OP_NOT          reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    NOT             reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    SIZEOF          reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    NEW             reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    INT_V           reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TRUE            reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    FALSE           reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    STRING_V        reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    THIS            reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    PARENT_ABRE     reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TYPEID          reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    $end            reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    STATIC          reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    CHAVE_FECHA     reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    ELSE            reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    IF              reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    WHILE           reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    FOR             reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)
    RETURN          reduce using rule 47 (body -> CHAVE_ABRE CHAVE_FECHA .)


state 167

    (48) comandos -> comando .
    (49) comandos -> comando . comandos
    (48) comandos -> . comando
    (49) comandos -> . comando comandos
    (50) comando -> . condicional_1
    (51) comando -> . condicional_2
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (114) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_FECHA     reduce using rule 48 (comandos -> comando .)
    IF              shift and go to state 170
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    comando                        shift and go to state 167
    comandos                       shift and go to state 193
    condicional_1                  shift and go to state 168
    condicional_2                  shift and go to state 169
    exp                            shift and go to state 171
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 168

    (50) comando -> condicional_1 .

    IF              reduce using rule 50 (comando -> condicional_1 .)
    WHILE           reduce using rule 50 (comando -> condicional_1 .)
    FOR             reduce using rule 50 (comando -> condicional_1 .)
    RETURN          reduce using rule 50 (comando -> condicional_1 .)
    TYPEDEF         reduce using rule 50 (comando -> condicional_1 .)
    USING           reduce using rule 50 (comando -> condicional_1 .)
    INT             reduce using rule 50 (comando -> condicional_1 .)
    BOOL            reduce using rule 50 (comando -> condicional_1 .)
    ID              reduce using rule 50 (comando -> condicional_1 .)
    STRING          reduce using rule 50 (comando -> condicional_1 .)
    OP_NOT          reduce using rule 50 (comando -> condicional_1 .)
    NOT             reduce using rule 50 (comando -> condicional_1 .)
    SIZEOF          reduce using rule 50 (comando -> condicional_1 .)
    NEW             reduce using rule 50 (comando -> condicional_1 .)
    INT_V           reduce using rule 50 (comando -> condicional_1 .)
    TRUE            reduce using rule 50 (comando -> condicional_1 .)
    FALSE           reduce using rule 50 (comando -> condicional_1 .)
    STRING_V        reduce using rule 50 (comando -> condicional_1 .)
    THIS            reduce using rule 50 (comando -> condicional_1 .)
    PARENT_ABRE     reduce using rule 50 (comando -> condicional_1 .)
    TYPEID          reduce using rule 50 (comando -> condicional_1 .)
    CHAVE_FECHA     reduce using rule 50 (comando -> condicional_1 .)


state 169

    (51) comando -> condicional_2 .

    IF              reduce using rule 51 (comando -> condicional_2 .)
    WHILE           reduce using rule 51 (comando -> condicional_2 .)
    FOR             reduce using rule 51 (comando -> condicional_2 .)
    RETURN          reduce using rule 51 (comando -> condicional_2 .)
    TYPEDEF         reduce using rule 51 (comando -> condicional_2 .)
    USING           reduce using rule 51 (comando -> condicional_2 .)
    INT             reduce using rule 51 (comando -> condicional_2 .)
    BOOL            reduce using rule 51 (comando -> condicional_2 .)
    ID              reduce using rule 51 (comando -> condicional_2 .)
    STRING          reduce using rule 51 (comando -> condicional_2 .)
    OP_NOT          reduce using rule 51 (comando -> condicional_2 .)
    NOT             reduce using rule 51 (comando -> condicional_2 .)
    SIZEOF          reduce using rule 51 (comando -> condicional_2 .)
    NEW             reduce using rule 51 (comando -> condicional_2 .)
    INT_V           reduce using rule 51 (comando -> condicional_2 .)
    TRUE            reduce using rule 51 (comando -> condicional_2 .)
    FALSE           reduce using rule 51 (comando -> condicional_2 .)
    STRING_V        reduce using rule 51 (comando -> condicional_2 .)
    THIS            reduce using rule 51 (comando -> condicional_2 .)
    PARENT_ABRE     reduce using rule 51 (comando -> condicional_2 .)
    TYPEID          reduce using rule 51 (comando -> condicional_2 .)
    CHAVE_FECHA     reduce using rule 51 (comando -> condicional_2 .)


state 170

    (101) condicional_1 -> IF . PARENT_ABRE exp PARENT_FECHA rest_if
    (112) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body
    (113) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA comando
    (114) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2

    PARENT_ABRE     shift and go to state 194


state 171

    (102) condicional_1 -> exp . PONTO_VIRG
    (52) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 195
    RECEBER         shift and go to state 45


state 172

    (103) condicional_1 -> decl_variavel .

    IF              reduce using rule 103 (condicional_1 -> decl_variavel .)
    WHILE           reduce using rule 103 (condicional_1 -> decl_variavel .)
    FOR             reduce using rule 103 (condicional_1 -> decl_variavel .)
    RETURN          reduce using rule 103 (condicional_1 -> decl_variavel .)
    TYPEDEF         reduce using rule 103 (condicional_1 -> decl_variavel .)
    USING           reduce using rule 103 (condicional_1 -> decl_variavel .)
    INT             reduce using rule 103 (condicional_1 -> decl_variavel .)
    BOOL            reduce using rule 103 (condicional_1 -> decl_variavel .)
    ID              reduce using rule 103 (condicional_1 -> decl_variavel .)
    STRING          reduce using rule 103 (condicional_1 -> decl_variavel .)
    OP_NOT          reduce using rule 103 (condicional_1 -> decl_variavel .)
    NOT             reduce using rule 103 (condicional_1 -> decl_variavel .)
    SIZEOF          reduce using rule 103 (condicional_1 -> decl_variavel .)
    NEW             reduce using rule 103 (condicional_1 -> decl_variavel .)
    INT_V           reduce using rule 103 (condicional_1 -> decl_variavel .)
    TRUE            reduce using rule 103 (condicional_1 -> decl_variavel .)
    FALSE           reduce using rule 103 (condicional_1 -> decl_variavel .)
    STRING_V        reduce using rule 103 (condicional_1 -> decl_variavel .)
    THIS            reduce using rule 103 (condicional_1 -> decl_variavel .)
    PARENT_ABRE     reduce using rule 103 (condicional_1 -> decl_variavel .)
    TYPEID          reduce using rule 103 (condicional_1 -> decl_variavel .)
    CHAVE_FECHA     reduce using rule 103 (condicional_1 -> decl_variavel .)
    ELSE            reduce using rule 103 (condicional_1 -> decl_variavel .)


state 173

    (104) condicional_1 -> typedef .

    IF              reduce using rule 104 (condicional_1 -> typedef .)
    WHILE           reduce using rule 104 (condicional_1 -> typedef .)
    FOR             reduce using rule 104 (condicional_1 -> typedef .)
    RETURN          reduce using rule 104 (condicional_1 -> typedef .)
    TYPEDEF         reduce using rule 104 (condicional_1 -> typedef .)
    USING           reduce using rule 104 (condicional_1 -> typedef .)
    INT             reduce using rule 104 (condicional_1 -> typedef .)
    BOOL            reduce using rule 104 (condicional_1 -> typedef .)
    ID              reduce using rule 104 (condicional_1 -> typedef .)
    STRING          reduce using rule 104 (condicional_1 -> typedef .)
    OP_NOT          reduce using rule 104 (condicional_1 -> typedef .)
    NOT             reduce using rule 104 (condicional_1 -> typedef .)
    SIZEOF          reduce using rule 104 (condicional_1 -> typedef .)
    NEW             reduce using rule 104 (condicional_1 -> typedef .)
    INT_V           reduce using rule 104 (condicional_1 -> typedef .)
    TRUE            reduce using rule 104 (condicional_1 -> typedef .)
    FALSE           reduce using rule 104 (condicional_1 -> typedef .)
    STRING_V        reduce using rule 104 (condicional_1 -> typedef .)
    THIS            reduce using rule 104 (condicional_1 -> typedef .)
    PARENT_ABRE     reduce using rule 104 (condicional_1 -> typedef .)
    TYPEID          reduce using rule 104 (condicional_1 -> typedef .)
    CHAVE_FECHA     reduce using rule 104 (condicional_1 -> typedef .)
    ELSE            reduce using rule 104 (condicional_1 -> typedef .)


state 174

    (105) condicional_1 -> using .

    IF              reduce using rule 105 (condicional_1 -> using .)
    WHILE           reduce using rule 105 (condicional_1 -> using .)
    FOR             reduce using rule 105 (condicional_1 -> using .)
    RETURN          reduce using rule 105 (condicional_1 -> using .)
    TYPEDEF         reduce using rule 105 (condicional_1 -> using .)
    USING           reduce using rule 105 (condicional_1 -> using .)
    INT             reduce using rule 105 (condicional_1 -> using .)
    BOOL            reduce using rule 105 (condicional_1 -> using .)
    ID              reduce using rule 105 (condicional_1 -> using .)
    STRING          reduce using rule 105 (condicional_1 -> using .)
    OP_NOT          reduce using rule 105 (condicional_1 -> using .)
    NOT             reduce using rule 105 (condicional_1 -> using .)
    SIZEOF          reduce using rule 105 (condicional_1 -> using .)
    NEW             reduce using rule 105 (condicional_1 -> using .)
    INT_V           reduce using rule 105 (condicional_1 -> using .)
    TRUE            reduce using rule 105 (condicional_1 -> using .)
    FALSE           reduce using rule 105 (condicional_1 -> using .)
    STRING_V        reduce using rule 105 (condicional_1 -> using .)
    THIS            reduce using rule 105 (condicional_1 -> using .)
    PARENT_ABRE     reduce using rule 105 (condicional_1 -> using .)
    TYPEID          reduce using rule 105 (condicional_1 -> using .)
    CHAVE_FECHA     reduce using rule 105 (condicional_1 -> using .)
    ELSE            reduce using rule 105 (condicional_1 -> using .)


state 175

    (106) condicional_1 -> WHILE . PARENT_ABRE exp PARENT_FECHA body
    (108) condicional_1 -> WHILE . PARENT_ABRE exp PARENT_FECHA condicional_1

    PARENT_ABRE     shift and go to state 196


state 176

    (107) condicional_1 -> FOR . PARENT_ABRE for_log PARENT_FECHA body
    (109) condicional_1 -> FOR . PARENT_ABRE for_log PARENT_FECHA condicional_1

    PARENT_ABRE     shift and go to state 197


state 177

    (110) condicional_1 -> RETURN . exp PONTO_VIRG
    (111) condicional_1 -> RETURN . PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 199
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 198
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 178

    (32) decl_variavel -> tipo . ID PONTO_VIRG
    (33) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> tipo . ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n PONTO_VIRG

    ID              shift and go to state 200


state 179

    (26) decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .

    CLASS           reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    VOID            reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    TYPEDEF         reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    USING           reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    INT             reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    BOOL            reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    ID              reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    STRING          reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    OP_NOT          reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    NOT             reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    SIZEOF          reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    NEW             reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    INT_V           reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    TRUE            reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    FALSE           reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    STRING_V        reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    THIS            reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    TYPEID          reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    $end            reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    STATIC          reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 26 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)


state 180

    (35) decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .

    CLASS           reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    VOID            reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    TYPEDEF         reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    USING           reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    INT             reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    BOOL            reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    ID              reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    STRING          reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    OP_NOT          reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    NOT             reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    SIZEOF          reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    NEW             reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    INT_V           reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    TRUE            reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    FALSE           reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    STRING_V        reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    THIS            reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    TYPEID          reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    $end            reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    STATIC          reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    IF              reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    WHILE           reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    FOR             reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    RETURN          reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)
    ELSE            reduce using rule 35 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n PONTO_VIRG .)


state 181

    (37) decl_variavel_n -> VIRGULA ID RECEBER exp . decl_variavel_n
    (38) decl_variavel_n -> VIRGULA ID RECEBER exp .
    (52) exp -> exp . RECEBER exp_1
    (36) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (37) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (38) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (39) decl_variavel_n -> . VIRGULA ID

    PONTO_VIRG      reduce using rule 38 (decl_variavel_n -> VIRGULA ID RECEBER exp .)
    RECEBER         shift and go to state 45
    VIRGULA         shift and go to state 92

    decl_variavel_n                shift and go to state 201

state 182

    (29) decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .

    CLASS           reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    VOID            reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    TYPEDEF         reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    USING           reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    INT             reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    BOOL            reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    ID              reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    STRING          reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    OP_NOT          reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    NOT             reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    SIZEOF          reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    NEW             reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    INT_V           reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    TRUE            reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    FALSE           reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    STRING_V        reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    THIS            reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    TYPEID          reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    $end            reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    STATIC          reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 29 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)


state 183

    (27) decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .

    CLASS           reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    VOID            reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    TYPEDEF         reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    USING           reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    INT             reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    BOOL            reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    ID              reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    STRING          reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    OP_NOT          reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    NOT             reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    SIZEOF          reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    NEW             reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    INT_V           reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    TRUE            reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    FALSE           reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    STRING_V        reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    THIS            reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    TYPEID          reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    $end            reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    STATIC          reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 27 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)


state 184

    (42) decl_typedef_n -> VIRGULA ID decl_typedef_n .

    PONTO_VIRG      reduce using rule 42 (decl_typedef_n -> VIRGULA ID decl_typedef_n .)


state 185

    (14) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA .

    PONTO_VIRG      reduce using rule 14 (body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA .)


state 186

    (20) content_class -> decl_variavel content_class .

    CHAVE_FECHA     reduce using rule 20 (content_class -> decl_variavel content_class .)


state 187

    (21) content_class -> decl_funcao content_class .

    CHAVE_FECHA     reduce using rule 21 (content_class -> decl_funcao content_class .)


state 188

    (18) content_class -> STATIC decl_variavel .
    (22) content_class -> STATIC decl_variavel . content_class
    (16) content_class -> . decl_variavel
    (17) content_class -> . decl_funcao
    (18) content_class -> . STATIC decl_variavel
    (19) content_class -> . STATIC decl_funcao
    (20) content_class -> . decl_variavel content_class
    (21) content_class -> . decl_funcao content_class
    (22) content_class -> . STATIC decl_variavel content_class
    (23) content_class -> . STATIC decl_funcao content_class
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    CHAVE_FECHA     reduce using rule 18 (content_class -> STATIC decl_variavel .)
    STATIC          shift and go to state 161
    VOID            shift and go to state 12
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    decl_variavel                  shift and go to state 159
    content_class                  shift and go to state 202
    decl_funcao                    shift and go to state 160
    tipo                           shift and go to state 162

state 189

    (19) content_class -> STATIC decl_funcao .
    (23) content_class -> STATIC decl_funcao . content_class
    (16) content_class -> . decl_variavel
    (17) content_class -> . decl_funcao
    (18) content_class -> . STATIC decl_variavel
    (19) content_class -> . STATIC decl_funcao
    (20) content_class -> . decl_variavel content_class
    (21) content_class -> . decl_funcao content_class
    (22) content_class -> . STATIC decl_variavel content_class
    (23) content_class -> . STATIC decl_funcao content_class
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (24) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (27) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (28) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (29) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING

    CHAVE_FECHA     reduce using rule 19 (content_class -> STATIC decl_funcao .)
    STATIC          shift and go to state 161
    VOID            shift and go to state 12
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 53
    STRING          shift and go to state 18

    decl_funcao                    shift and go to state 160
    content_class                  shift and go to state 203
    decl_variavel                  shift and go to state 159
    tipo                           shift and go to state 162

state 190

    (32) decl_variavel -> tipo ID . PONTO_VIRG
    (33) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (34) decl_variavel -> tipo ID . decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n PONTO_VIRG
    (24) decl_funcao -> tipo ID . PARENT_ABRE parametros PARENT_FECHA body
    (25) decl_funcao -> tipo ID . PARENT_ABRE PARENT_FECHA body
    (26) decl_funcao -> tipo ID . PARENT_ABRE VOID PARENT_FECHA body
    (36) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (37) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (38) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (39) decl_variavel_n -> . VIRGULA ID

    PONTO_VIRG      shift and go to state 89
    RECEBER         shift and go to state 90
    PARENT_ABRE     shift and go to state 88
    VIRGULA         shift and go to state 92

    decl_variavel_n                shift and go to state 91

state 191

    (31) parametros -> tipo ID VIRGULA parametros .

    PARENT_FECHA    reduce using rule 31 (parametros -> tipo ID VIRGULA parametros .)


state 192

    (46) body -> CHAVE_ABRE comandos CHAVE_FECHA .

    CLASS           reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    VOID            reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TYPEDEF         reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    USING           reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    INT             reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    BOOL            reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    ID              reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    STRING          reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    OP_NOT          reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    NOT             reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    SIZEOF          reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    NEW             reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    INT_V           reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TRUE            reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    FALSE           reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    STRING_V        reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    THIS            reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    PARENT_ABRE     reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TYPEID          reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    $end            reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    STATIC          reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    CHAVE_FECHA     reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    ELSE            reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    IF              reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    WHILE           reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    FOR             reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    RETURN          reduce using rule 46 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)


state 193

    (49) comandos -> comando comandos .

    CHAVE_FECHA     reduce using rule 49 (comandos -> comando comandos .)


state 194

    (101) condicional_1 -> IF PARENT_ABRE . exp PARENT_FECHA rest_if
    (112) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body
    (113) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA comando
    (114) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body ELSE condicional_2
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 204
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 195

    (102) condicional_1 -> exp PONTO_VIRG .

    IF              reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    WHILE           reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    FOR             reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    RETURN          reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    TYPEDEF         reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    USING           reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    INT             reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    BOOL            reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    ID              reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    STRING          reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    OP_NOT          reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    NOT             reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    SIZEOF          reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    NEW             reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    INT_V           reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    TRUE            reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    FALSE           reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    STRING_V        reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    THIS            reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    TYPEID          reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)
    ELSE            reduce using rule 102 (condicional_1 -> exp PONTO_VIRG .)


state 196

    (106) condicional_1 -> WHILE PARENT_ABRE . exp PARENT_FECHA body
    (108) condicional_1 -> WHILE PARENT_ABRE . exp PARENT_FECHA condicional_1
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 205
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 197

    (107) condicional_1 -> FOR PARENT_ABRE . for_log PARENT_FECHA body
    (109) condicional_1 -> FOR PARENT_ABRE . for_log PARENT_FECHA condicional_1
    (120) for_log -> . decl_variavel PONTO_VIRG
    (121) for_log -> . decl_variavel exp PONTO_VIRG
    (122) for_log -> . decl_variavel exp PONTO_VIRG exp
    (123) for_log -> . decl_variavel PONTO_VIRG exp
    (124) for_log -> . exp PONTO_VIRG PONTO_VIRG exp
    (125) for_log -> . exp PONTO_VIRG exp PONTO_VIRG exp
    (126) for_log -> . exp PONTO_VIRG PONTO_VIRG
    (127) for_log -> . exp PONTO_VIRG exp PONTO_VIRG
    (128) for_log -> . PONTO_VIRG exp PONTO_VIRG exp
    (129) for_log -> . PONTO_VIRG exp PONTO_VIRG
    (130) for_log -> . PONTO_VIRG PONTO_VIRG exp
    (131) for_log -> . PONTO_VIRG PONTO_VIRG
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 208
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    for_log                        shift and go to state 206
    decl_variavel                  shift and go to state 207
    exp                            shift and go to state 209
    tipo                           shift and go to state 178
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 198

    (110) condicional_1 -> RETURN exp . PONTO_VIRG
    (52) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 210
    RECEBER         shift and go to state 45


state 199

    (111) condicional_1 -> RETURN PONTO_VIRG .

    IF              reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    WHILE           reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    FOR             reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    RETURN          reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    TYPEDEF         reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    USING           reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    INT             reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    BOOL            reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    ID              reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    STRING          reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    OP_NOT          reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    NOT             reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    SIZEOF          reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    NEW             reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    INT_V           reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    TRUE            reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    FALSE           reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    STRING_V        reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    THIS            reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    TYPEID          reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)
    ELSE            reduce using rule 111 (condicional_1 -> RETURN PONTO_VIRG .)


state 200

    (32) decl_variavel -> tipo ID . PONTO_VIRG
    (33) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (34) decl_variavel -> tipo ID . decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n PONTO_VIRG
    (36) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (37) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (38) decl_variavel_n -> . VIRGULA ID RECEBER exp
    (39) decl_variavel_n -> . VIRGULA ID

    PONTO_VIRG      shift and go to state 89
    RECEBER         shift and go to state 90
    VIRGULA         shift and go to state 92

    decl_variavel_n                shift and go to state 91

state 201

    (37) decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .

    PONTO_VIRG      reduce using rule 37 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)


state 202

    (22) content_class -> STATIC decl_variavel content_class .

    CHAVE_FECHA     reduce using rule 22 (content_class -> STATIC decl_variavel content_class .)


state 203

    (23) content_class -> STATIC decl_funcao content_class .

    CHAVE_FECHA     reduce using rule 23 (content_class -> STATIC decl_funcao content_class .)


state 204

    (101) condicional_1 -> IF PARENT_ABRE exp . PARENT_FECHA rest_if
    (112) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body
    (113) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA comando
    (114) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body ELSE condicional_2
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 211
    RECEBER         shift and go to state 45


state 205

    (106) condicional_1 -> WHILE PARENT_ABRE exp . PARENT_FECHA body
    (108) condicional_1 -> WHILE PARENT_ABRE exp . PARENT_FECHA condicional_1
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 212
    RECEBER         shift and go to state 45


state 206

    (107) condicional_1 -> FOR PARENT_ABRE for_log . PARENT_FECHA body
    (109) condicional_1 -> FOR PARENT_ABRE for_log . PARENT_FECHA condicional_1

    PARENT_FECHA    shift and go to state 213


state 207

    (120) for_log -> decl_variavel . PONTO_VIRG
    (121) for_log -> decl_variavel . exp PONTO_VIRG
    (122) for_log -> decl_variavel . exp PONTO_VIRG exp
    (123) for_log -> decl_variavel . PONTO_VIRG exp
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 214
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 215
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 208

    (128) for_log -> PONTO_VIRG . exp PONTO_VIRG exp
    (129) for_log -> PONTO_VIRG . exp PONTO_VIRG
    (130) for_log -> PONTO_VIRG . PONTO_VIRG exp
    (131) for_log -> PONTO_VIRG . PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 216
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 217
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 209

    (124) for_log -> exp . PONTO_VIRG PONTO_VIRG exp
    (125) for_log -> exp . PONTO_VIRG exp PONTO_VIRG exp
    (126) for_log -> exp . PONTO_VIRG PONTO_VIRG
    (127) for_log -> exp . PONTO_VIRG exp PONTO_VIRG
    (52) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 218
    RECEBER         shift and go to state 45


state 210

    (110) condicional_1 -> RETURN exp PONTO_VIRG .

    IF              reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    WHILE           reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    FOR             reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    RETURN          reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    TYPEDEF         reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    USING           reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    INT             reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    BOOL            reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    ID              reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    STRING          reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    OP_NOT          reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    NOT             reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    SIZEOF          reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    NEW             reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    INT_V           reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    TRUE            reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    FALSE           reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    STRING_V        reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    THIS            reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    TYPEID          reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)
    ELSE            reduce using rule 110 (condicional_1 -> RETURN exp PONTO_VIRG .)


state 211

    (101) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA . rest_if
    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body
    (113) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . comando
    (114) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . condicional_1 ELSE condicional_2
    (115) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body ELSE condicional_2
    (116) rest_if -> . condicional_1 ELSE condicional_1
    (117) rest_if -> . body ELSE body
    (118) rest_if -> . condicional_1 ELSE body
    (119) rest_if -> . body ELSE condicional_1
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (50) comando -> . condicional_1
    (51) comando -> . condicional_2
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (114) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 146
    IF              shift and go to state 170
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 171
    rest_if                        shift and go to state 219
    body                           shift and go to state 220
    comando                        shift and go to state 221
    condicional_1                  shift and go to state 222
    condicional_2                  shift and go to state 169
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 212

    (106) condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA . body
    (108) condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA . condicional_1
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 146
    IF              shift and go to state 225
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 171
    body                           shift and go to state 223
    condicional_1                  shift and go to state 224
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 213

    (107) condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA . body
    (109) condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA . condicional_1
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 146
    IF              shift and go to state 225
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    body                           shift and go to state 226
    condicional_1                  shift and go to state 227
    exp                            shift and go to state 171
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 214

    (120) for_log -> decl_variavel PONTO_VIRG .
    (123) for_log -> decl_variavel PONTO_VIRG . exp
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 120 (for_log -> decl_variavel PONTO_VIRG .)
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 228
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 215

    (121) for_log -> decl_variavel exp . PONTO_VIRG
    (122) for_log -> decl_variavel exp . PONTO_VIRG exp
    (52) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 229
    RECEBER         shift and go to state 45


state 216

    (130) for_log -> PONTO_VIRG PONTO_VIRG . exp
    (131) for_log -> PONTO_VIRG PONTO_VIRG .
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 131 (for_log -> PONTO_VIRG PONTO_VIRG .)
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 230
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 217

    (128) for_log -> PONTO_VIRG exp . PONTO_VIRG exp
    (129) for_log -> PONTO_VIRG exp . PONTO_VIRG
    (52) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 231
    RECEBER         shift and go to state 45


state 218

    (124) for_log -> exp PONTO_VIRG . PONTO_VIRG exp
    (125) for_log -> exp PONTO_VIRG . exp PONTO_VIRG exp
    (126) for_log -> exp PONTO_VIRG . PONTO_VIRG
    (127) for_log -> exp PONTO_VIRG . exp PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PONTO_VIRG      shift and go to state 233
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 232
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 219

    (101) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .

    IF              reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    WHILE           reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    FOR             reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    RETURN          reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    TYPEDEF         reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    USING           reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    INT             reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    BOOL            reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    ID              reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    STRING          reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    OP_NOT          reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    NOT             reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    SIZEOF          reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    NEW             reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    INT_V           reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    TRUE            reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    FALSE           reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    STRING_V        reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    THIS            reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    PARENT_ABRE     reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    TYPEID          reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    CHAVE_FECHA     reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)
    ELSE            reduce using rule 101 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA rest_if .)


state 220

    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .
    (115) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body . ELSE condicional_2
    (117) rest_if -> body . ELSE body
    (119) rest_if -> body . ELSE condicional_1

    IF              reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    WHILE           reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    FOR             reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    RETURN          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    TYPEDEF         reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    USING           reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    INT             reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    BOOL            reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    ID              reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    STRING          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    OP_NOT          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    NOT             reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    SIZEOF          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    NEW             reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    INT_V           reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    TRUE            reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    FALSE           reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    STRING_V        reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    THIS            reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    TYPEID          reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 112 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body .)
    ELSE            shift and go to state 234


state 221

    (113) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .

    IF              reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    WHILE           reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    FOR             reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    RETURN          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    TYPEDEF         reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    USING           reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    INT             reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    BOOL            reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    ID              reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    STRING          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    OP_NOT          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    NOT             reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    SIZEOF          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    NEW             reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    INT_V           reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    TRUE            reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    FALSE           reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    STRING_V        reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    THIS            reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    PARENT_ABRE     reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    TYPEID          reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)
    CHAVE_FECHA     reduce using rule 113 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA comando .)


state 222

    (114) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 . ELSE condicional_2
    (116) rest_if -> condicional_1 . ELSE condicional_1
    (118) rest_if -> condicional_1 . ELSE body
    (50) comando -> condicional_1 .

    ELSE            shift and go to state 235
    IF              reduce using rule 50 (comando -> condicional_1 .)
    WHILE           reduce using rule 50 (comando -> condicional_1 .)
    FOR             reduce using rule 50 (comando -> condicional_1 .)
    RETURN          reduce using rule 50 (comando -> condicional_1 .)
    TYPEDEF         reduce using rule 50 (comando -> condicional_1 .)
    USING           reduce using rule 50 (comando -> condicional_1 .)
    INT             reduce using rule 50 (comando -> condicional_1 .)
    BOOL            reduce using rule 50 (comando -> condicional_1 .)
    ID              reduce using rule 50 (comando -> condicional_1 .)
    STRING          reduce using rule 50 (comando -> condicional_1 .)
    OP_NOT          reduce using rule 50 (comando -> condicional_1 .)
    NOT             reduce using rule 50 (comando -> condicional_1 .)
    SIZEOF          reduce using rule 50 (comando -> condicional_1 .)
    NEW             reduce using rule 50 (comando -> condicional_1 .)
    INT_V           reduce using rule 50 (comando -> condicional_1 .)
    TRUE            reduce using rule 50 (comando -> condicional_1 .)
    FALSE           reduce using rule 50 (comando -> condicional_1 .)
    STRING_V        reduce using rule 50 (comando -> condicional_1 .)
    THIS            reduce using rule 50 (comando -> condicional_1 .)
    PARENT_ABRE     reduce using rule 50 (comando -> condicional_1 .)
    TYPEID          reduce using rule 50 (comando -> condicional_1 .)
    CHAVE_FECHA     reduce using rule 50 (comando -> condicional_1 .)


state 223

    (106) condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .

    IF              reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    WHILE           reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    FOR             reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    RETURN          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    TYPEDEF         reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    USING           reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    INT             reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    BOOL            reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    ID              reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    STRING          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    OP_NOT          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    NOT             reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    SIZEOF          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    NEW             reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    INT_V           reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    TRUE            reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    FALSE           reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    STRING_V        reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    THIS            reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    TYPEID          reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    ELSE            reduce using rule 106 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA body .)


state 224

    (108) condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .

    IF              reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    WHILE           reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    FOR             reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    RETURN          reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    TYPEDEF         reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    USING           reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    INT             reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    BOOL            reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    ID              reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    STRING          reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    OP_NOT          reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    NOT             reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    SIZEOF          reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    NEW             reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    INT_V           reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    TRUE            reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    FALSE           reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    STRING_V        reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    THIS            reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    PARENT_ABRE     reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    TYPEID          reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    CHAVE_FECHA     reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)
    ELSE            reduce using rule 108 (condicional_1 -> WHILE PARENT_ABRE exp PARENT_FECHA condicional_1 .)


state 225

    (101) condicional_1 -> IF . PARENT_ABRE exp PARENT_FECHA rest_if

    PARENT_ABRE     shift and go to state 236


state 226

    (107) condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .

    IF              reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    WHILE           reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    FOR             reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    RETURN          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    TYPEDEF         reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    USING           reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    INT             reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    BOOL            reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    ID              reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    STRING          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    OP_NOT          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    NOT             reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    SIZEOF          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    NEW             reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    INT_V           reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    TRUE            reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    FALSE           reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    STRING_V        reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    THIS            reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    PARENT_ABRE     reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    TYPEID          reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    ELSE            reduce using rule 107 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA body .)


state 227

    (109) condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .

    IF              reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    WHILE           reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    FOR             reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    RETURN          reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    TYPEDEF         reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    USING           reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    INT             reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    BOOL            reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    ID              reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    STRING          reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    OP_NOT          reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    NOT             reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    SIZEOF          reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    NEW             reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    INT_V           reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    TRUE            reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    FALSE           reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    STRING_V        reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    THIS            reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    PARENT_ABRE     reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    TYPEID          reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    CHAVE_FECHA     reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)
    ELSE            reduce using rule 109 (condicional_1 -> FOR PARENT_ABRE for_log PARENT_FECHA condicional_1 .)


state 228

    (123) for_log -> decl_variavel PONTO_VIRG exp .
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 123 (for_log -> decl_variavel PONTO_VIRG exp .)
    RECEBER         shift and go to state 45


state 229

    (121) for_log -> decl_variavel exp PONTO_VIRG .
    (122) for_log -> decl_variavel exp PONTO_VIRG . exp
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 121 (for_log -> decl_variavel exp PONTO_VIRG .)
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 237
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 230

    (130) for_log -> PONTO_VIRG PONTO_VIRG exp .
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 130 (for_log -> PONTO_VIRG PONTO_VIRG exp .)
    RECEBER         shift and go to state 45


state 231

    (128) for_log -> PONTO_VIRG exp PONTO_VIRG . exp
    (129) for_log -> PONTO_VIRG exp PONTO_VIRG .
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 129 (for_log -> PONTO_VIRG exp PONTO_VIRG .)
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 238
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 232

    (125) for_log -> exp PONTO_VIRG exp . PONTO_VIRG exp
    (127) for_log -> exp PONTO_VIRG exp . PONTO_VIRG
    (52) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 239
    RECEBER         shift and go to state 45


state 233

    (124) for_log -> exp PONTO_VIRG PONTO_VIRG . exp
    (126) for_log -> exp PONTO_VIRG PONTO_VIRG .
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 126 (for_log -> exp PONTO_VIRG PONTO_VIRG .)
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 240
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 234

    (115) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE . condicional_2
    (117) rest_if -> body ELSE . body
    (119) rest_if -> body ELSE . condicional_1
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (114) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 241
    CHAVE_ABRE      shift and go to state 146
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 171
    body                           shift and go to state 242
    condicional_2                  shift and go to state 243
    condicional_1                  shift and go to state 244
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 235

    (114) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE . condicional_2
    (116) rest_if -> condicional_1 ELSE . condicional_1
    (118) rest_if -> condicional_1 ELSE . body
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (114) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 241
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    CHAVE_ABRE      shift and go to state 146
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 171
    condicional_1                  shift and go to state 245
    condicional_2                  shift and go to state 246
    body                           shift and go to state 247
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 236

    (101) condicional_1 -> IF PARENT_ABRE . exp PARENT_FECHA rest_if
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 248
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 237

    (122) for_log -> decl_variavel exp PONTO_VIRG exp .
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 122 (for_log -> decl_variavel exp PONTO_VIRG exp .)
    RECEBER         shift and go to state 45


state 238

    (128) for_log -> PONTO_VIRG exp PONTO_VIRG exp .
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 128 (for_log -> PONTO_VIRG exp PONTO_VIRG exp .)
    RECEBER         shift and go to state 45


state 239

    (125) for_log -> exp PONTO_VIRG exp PONTO_VIRG . exp
    (127) for_log -> exp PONTO_VIRG exp PONTO_VIRG .
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    PARENT_FECHA    reduce using rule 127 (for_log -> exp PONTO_VIRG exp PONTO_VIRG .)
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 249
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 240

    (124) for_log -> exp PONTO_VIRG PONTO_VIRG exp .
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 124 (for_log -> exp PONTO_VIRG PONTO_VIRG exp .)
    RECEBER         shift and go to state 45


state 241

    (112) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body
    (113) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA comando
    (114) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (101) condicional_1 -> IF . PARENT_ABRE exp PARENT_FECHA rest_if

    PARENT_ABRE     shift and go to state 250


state 242

    (117) rest_if -> body ELSE body .

    IF              reduce using rule 117 (rest_if -> body ELSE body .)
    WHILE           reduce using rule 117 (rest_if -> body ELSE body .)
    FOR             reduce using rule 117 (rest_if -> body ELSE body .)
    RETURN          reduce using rule 117 (rest_if -> body ELSE body .)
    TYPEDEF         reduce using rule 117 (rest_if -> body ELSE body .)
    USING           reduce using rule 117 (rest_if -> body ELSE body .)
    INT             reduce using rule 117 (rest_if -> body ELSE body .)
    BOOL            reduce using rule 117 (rest_if -> body ELSE body .)
    ID              reduce using rule 117 (rest_if -> body ELSE body .)
    STRING          reduce using rule 117 (rest_if -> body ELSE body .)
    OP_NOT          reduce using rule 117 (rest_if -> body ELSE body .)
    NOT             reduce using rule 117 (rest_if -> body ELSE body .)
    SIZEOF          reduce using rule 117 (rest_if -> body ELSE body .)
    NEW             reduce using rule 117 (rest_if -> body ELSE body .)
    INT_V           reduce using rule 117 (rest_if -> body ELSE body .)
    TRUE            reduce using rule 117 (rest_if -> body ELSE body .)
    FALSE           reduce using rule 117 (rest_if -> body ELSE body .)
    STRING_V        reduce using rule 117 (rest_if -> body ELSE body .)
    THIS            reduce using rule 117 (rest_if -> body ELSE body .)
    PARENT_ABRE     reduce using rule 117 (rest_if -> body ELSE body .)
    TYPEID          reduce using rule 117 (rest_if -> body ELSE body .)
    CHAVE_FECHA     reduce using rule 117 (rest_if -> body ELSE body .)
    ELSE            reduce using rule 117 (rest_if -> body ELSE body .)


state 243

    (115) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .

    IF              reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    WHILE           reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    FOR             reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    RETURN          reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    TYPEDEF         reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    USING           reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    INT             reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    BOOL            reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    ID              reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    STRING          reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    OP_NOT          reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    NOT             reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    SIZEOF          reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    NEW             reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    INT_V           reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    TRUE            reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    FALSE           reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    STRING_V        reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    THIS            reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    PARENT_ABRE     reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    TYPEID          reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)
    CHAVE_FECHA     reduce using rule 115 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2 .)


state 244

    (119) rest_if -> body ELSE condicional_1 .

    IF              reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    WHILE           reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    FOR             reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    RETURN          reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    TYPEDEF         reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    USING           reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    INT             reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    BOOL            reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    ID              reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    STRING          reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    OP_NOT          reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    NOT             reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    SIZEOF          reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    NEW             reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    INT_V           reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    TRUE            reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    FALSE           reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    STRING_V        reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    THIS            reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    PARENT_ABRE     reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    TYPEID          reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    CHAVE_FECHA     reduce using rule 119 (rest_if -> body ELSE condicional_1 .)
    ELSE            reduce using rule 119 (rest_if -> body ELSE condicional_1 .)


state 245

    (116) rest_if -> condicional_1 ELSE condicional_1 .

    IF              reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    WHILE           reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    FOR             reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    RETURN          reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    TYPEDEF         reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    USING           reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    INT             reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    BOOL            reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    ID              reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    STRING          reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    OP_NOT          reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    NOT             reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    SIZEOF          reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    NEW             reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    INT_V           reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    TRUE            reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    FALSE           reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    STRING_V        reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    THIS            reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    PARENT_ABRE     reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    TYPEID          reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    CHAVE_FECHA     reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)
    ELSE            reduce using rule 116 (rest_if -> condicional_1 ELSE condicional_1 .)


state 246

    (114) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .

    IF              reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    WHILE           reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    FOR             reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    RETURN          reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    TYPEDEF         reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    USING           reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    INT             reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    BOOL            reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    ID              reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    STRING          reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    OP_NOT          reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    NOT             reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    SIZEOF          reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    NEW             reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    INT_V           reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    TRUE            reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    FALSE           reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    STRING_V        reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    THIS            reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    PARENT_ABRE     reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    TYPEID          reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)
    CHAVE_FECHA     reduce using rule 114 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2 .)


state 247

    (118) rest_if -> condicional_1 ELSE body .

    IF              reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    WHILE           reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    FOR             reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    RETURN          reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    TYPEDEF         reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    USING           reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    INT             reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    BOOL            reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    ID              reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    STRING          reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    OP_NOT          reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    NOT             reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    SIZEOF          reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    NEW             reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    INT_V           reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    TRUE            reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    FALSE           reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    STRING_V        reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    THIS            reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    PARENT_ABRE     reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    TYPEID          reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    CHAVE_FECHA     reduce using rule 118 (rest_if -> condicional_1 ELSE body .)
    ELSE            reduce using rule 118 (rest_if -> condicional_1 ELSE body .)


state 248

    (101) condicional_1 -> IF PARENT_ABRE exp . PARENT_FECHA rest_if
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 251
    RECEBER         shift and go to state 45


state 249

    (125) for_log -> exp PONTO_VIRG exp PONTO_VIRG exp .
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 125 (for_log -> exp PONTO_VIRG exp PONTO_VIRG exp .)
    RECEBER         shift and go to state 45


state 250

    (112) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body
    (113) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA comando
    (114) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body ELSE condicional_2
    (101) condicional_1 -> IF PARENT_ABRE . exp PARENT_FECHA rest_if
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    ID              shift and go to state 50
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 252
    exp_1                          shift and go to state 15
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 251

    (101) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA . rest_if
    (116) rest_if -> . condicional_1 ELSE condicional_1
    (117) rest_if -> . body ELSE body
    (118) rest_if -> . condicional_1 ELSE body
    (119) rest_if -> . body ELSE condicional_1
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 225
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    CHAVE_ABRE      shift and go to state 146
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 171
    rest_if                        shift and go to state 219
    condicional_1                  shift and go to state 253
    body                           shift and go to state 254
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 252

    (112) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body
    (113) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA comando
    (114) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body ELSE condicional_2
    (101) condicional_1 -> IF PARENT_ABRE exp . PARENT_FECHA rest_if
    (52) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 255
    RECEBER         shift and go to state 45


state 253

    (116) rest_if -> condicional_1 . ELSE condicional_1
    (118) rest_if -> condicional_1 . ELSE body

    ELSE            shift and go to state 256


state 254

    (117) rest_if -> body . ELSE body
    (119) rest_if -> body . ELSE condicional_1

    ELSE            shift and go to state 257


state 255

    (112) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body
    (113) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . comando
    (114) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . condicional_1 ELSE condicional_2
    (115) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body ELSE condicional_2
    (101) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA . rest_if
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (50) comando -> . condicional_1
    (51) comando -> . condicional_2
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (116) rest_if -> . condicional_1 ELSE condicional_1
    (117) rest_if -> . body ELSE body
    (118) rest_if -> . condicional_1 ELSE body
    (119) rest_if -> . body ELSE condicional_1
    (112) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body
    (113) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA comando
    (114) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 ELSE condicional_2
    (115) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body ELSE condicional_2
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 146
    IF              shift and go to state 170
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    exp                            shift and go to state 171
    body                           shift and go to state 220
    comando                        shift and go to state 221
    condicional_1                  shift and go to state 258
    condicional_2                  shift and go to state 169
    rest_if                        shift and go to state 219
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 256

    (116) rest_if -> condicional_1 ELSE . condicional_1
    (118) rest_if -> condicional_1 ELSE . body
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 225
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    CHAVE_ABRE      shift and go to state 146
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    condicional_1                  shift and go to state 245
    body                           shift and go to state 247
    exp                            shift and go to state 171
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 257

    (117) rest_if -> body ELSE . body
    (119) rest_if -> body ELSE . condicional_1
    (46) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (47) body -> . CHAVE_ABRE CHAVE_FECHA
    (101) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA rest_if
    (102) condicional_1 -> . exp PONTO_VIRG
    (103) condicional_1 -> . decl_variavel
    (104) condicional_1 -> . typedef
    (105) condicional_1 -> . using
    (106) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (107) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (108) condicional_1 -> . WHILE PARENT_ABRE exp PARENT_FECHA condicional_1
    (109) condicional_1 -> . FOR PARENT_ABRE for_log PARENT_FECHA condicional_1
    (110) condicional_1 -> . RETURN exp PONTO_VIRG
    (111) condicional_1 -> . RETURN PONTO_VIRG
    (52) exp -> . exp RECEBER exp_1
    (53) exp -> . exp_1
    (32) decl_variavel -> . tipo ID PONTO_VIRG
    (33) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (34) decl_variavel -> . tipo ID decl_variavel_n PONTO_VIRG
    (35) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n PONTO_VIRG
    (40) typedef -> . TYPEDEF tipo ID PONTO_VIRG
    (41) typedef -> . TYPEDEF tipo ID decl_typedef_n PONTO_VIRG
    (44) using -> . USING ID 2X_DOIS_PONTOS ID PONTO_VIRG
    (45) using -> . USING ID ID PONTO_VIRG
    (54) exp_1 -> . exp_1 OP_OU exp_2
    (55) exp_1 -> . exp_1 OR exp_2
    (56) exp_1 -> . exp_2
    (132) tipo -> . INT
    (133) tipo -> . BOOL
    (134) tipo -> . ID
    (135) tipo -> . STRING
    (57) exp_2 -> . exp_2 OP_E exp_3
    (58) exp_2 -> . exp_2 AND exp_3
    (59) exp_2 -> . exp_3
    (60) exp_3 -> . exp_3 OP_OU_EX exp_4
    (61) exp_3 -> . exp_3 XOR exp_4
    (62) exp_3 -> . exp_4
    (63) exp_4 -> . exp_4 IGUAL exp_5
    (64) exp_4 -> . exp_4 DIFERENTE exp_5
    (65) exp_4 -> . exp_5
    (66) exp_5 -> . exp_5 MENOR_Q exp_6
    (67) exp_5 -> . exp_5 MAIOR_Q exp_6
    (68) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (69) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (70) exp_5 -> . exp_6
    (71) exp_6 -> . exp_6 SOMA exp_7
    (72) exp_6 -> . exp_6 SUB exp_7
    (73) exp_6 -> . exp_7
    (74) exp_7 -> . exp_7 MULT exp_8
    (75) exp_7 -> . exp_7 DIV exp_8
    (76) exp_7 -> . exp_7 MODULO exp_8
    (77) exp_7 -> . exp_8
    (78) exp_8 -> . OP_NOT exp_9
    (79) exp_8 -> . NOT exp_9
    (80) exp_8 -> . exp_9 MAIS_MAIS
    (81) exp_8 -> . exp_9 MENOS_MENOS
    (82) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (83) exp_8 -> . NEW tipo
    (84) exp_8 -> . exp_9
    (85) exp_9 -> . exp_9 PONTO exp_10
    (86) exp_9 -> . exp_9 SETA exp_10
    (87) exp_9 -> . exp_10
    (88) exp_10 -> . ID
    (89) exp_10 -> . INT_V
    (90) exp_10 -> . TRUE
    (91) exp_10 -> . FALSE
    (92) exp_10 -> . chamada_funcao
    (93) exp_10 -> . STRING_V
    (94) exp_10 -> . THIS
    (95) exp_10 -> . PARENT_ABRE exp PARENT_FECHA
    (96) chamada_funcao -> . ID PARENT_ABRE parametros_chamada PARENT_FECHA
    (97) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (98) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_ABRE      shift and go to state 146
    IF              shift and go to state 225
    WHILE           shift and go to state 175
    FOR             shift and go to state 176
    RETURN          shift and go to state 177
    TYPEDEF         shift and go to state 13
    USING           shift and go to state 14
    INT             shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 9
    STRING          shift and go to state 18
    OP_NOT          shift and go to state 26
    NOT             shift and go to state 28
    SIZEOF          shift and go to state 29
    NEW             shift and go to state 30
    INT_V           shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34
    STRING_V        shift and go to state 36
    THIS            shift and go to state 37
    PARENT_ABRE     shift and go to state 11
    TYPEID          shift and go to state 38

    body                           shift and go to state 242
    condicional_1                  shift and go to state 244
    exp                            shift and go to state 171
    decl_variavel                  shift and go to state 172
    typedef                        shift and go to state 173
    using                          shift and go to state 174
    exp_1                          shift and go to state 15
    tipo                           shift and go to state 178
    exp_2                          shift and go to state 19
    exp_3                          shift and go to state 20
    exp_4                          shift and go to state 21
    exp_5                          shift and go to state 22
    exp_6                          shift and go to state 23
    exp_7                          shift and go to state 24
    exp_8                          shift and go to state 25
    exp_9                          shift and go to state 27
    exp_10                         shift and go to state 31
    chamada_funcao                 shift and go to state 35

state 258

    (114) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 . ELSE condicional_2
    (50) comando -> condicional_1 .
    (116) rest_if -> condicional_1 . ELSE condicional_1
    (118) rest_if -> condicional_1 . ELSE body

    ELSE            shift and go to state 235
    IF              reduce using rule 50 (comando -> condicional_1 .)
    WHILE           reduce using rule 50 (comando -> condicional_1 .)
    FOR             reduce using rule 50 (comando -> condicional_1 .)
    RETURN          reduce using rule 50 (comando -> condicional_1 .)
    TYPEDEF         reduce using rule 50 (comando -> condicional_1 .)
    USING           reduce using rule 50 (comando -> condicional_1 .)
    INT             reduce using rule 50 (comando -> condicional_1 .)
    BOOL            reduce using rule 50 (comando -> condicional_1 .)
    ID              reduce using rule 50 (comando -> condicional_1 .)
    STRING          reduce using rule 50 (comando -> condicional_1 .)
    OP_NOT          reduce using rule 50 (comando -> condicional_1 .)
    NOT             reduce using rule 50 (comando -> condicional_1 .)
    SIZEOF          reduce using rule 50 (comando -> condicional_1 .)
    NEW             reduce using rule 50 (comando -> condicional_1 .)
    INT_V           reduce using rule 50 (comando -> condicional_1 .)
    TRUE            reduce using rule 50 (comando -> condicional_1 .)
    FALSE           reduce using rule 50 (comando -> condicional_1 .)
    STRING_V        reduce using rule 50 (comando -> condicional_1 .)
    THIS            reduce using rule 50 (comando -> condicional_1 .)
    PARENT_ABRE     reduce using rule 50 (comando -> condicional_1 .)
    TYPEID          reduce using rule 50 (comando -> condicional_1 .)
    CHAVE_FECHA     reduce using rule 50 (comando -> condicional_1 .)

