Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLCHETE_ABRE
    COLCHETE_FECHA
    COMENTARIO
    ENDERECO
    NAMESPACE
    NEW
    PONTO
    SETA
    STATIC
    STRUCT
    THIS
    TRY
    USING

Grammar

Rule 0     S' -> cpp
Rule 1     cpp -> decl_classe
Rule 2     cpp -> decl_funcao
Rule 3     cpp -> decl_variavel
Rule 4     cpp -> decl_classe cpp
Rule 5     cpp -> decl_funcao cpp
Rule 6     cpp -> decl_variavel cpp
Rule 7     decl_classe -> CLASS ID body_class PONTO_VIRG
Rule 8     body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA
Rule 9     content_class -> decl_variavel
Rule 10    content_class -> decl_funcao
Rule 11    decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body
Rule 12    decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body
Rule 13    decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body
Rule 14    decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body
Rule 15    decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body
Rule 16    decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body
Rule 17    parametros -> tipo ID
Rule 18    parametros -> tipo ID VIRGULA parametros
Rule 19    decl_variavel -> tipo ID PONTO_VIRG
Rule 20    decl_variavel -> tipo ID RECEBER exp PONTO_VIRG
Rule 21    decl_variavel -> tipo ID decl_variavel_n
Rule 22    decl_variavel -> tipo ID RECEBER exp decl_variavel_n
Rule 23    decl_variavel -> TYPEDEF tipo ID PONTO_VIRG
Rule 24    decl_variavel -> TYPEDEF tipo ID decl_variavel_n
Rule 25    decl_variavel_n -> VIRGULA ID decl_variavel_n
Rule 26    decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n
Rule 27    decl_variavel_n -> PONTO_VIRG
Rule 28    body -> CHAVE_ABRE comandos CHAVE_FECHA
Rule 29    body -> CHAVE_ABRE CHAVE_FECHA
Rule 30    body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
Rule 31    body -> CHAVE_ABRE CHAVE_FECHA RETURN exp
Rule 32    comandos -> condicional_1
Rule 33    comandos -> condicional_2
Rule 34    comandos -> exp PONTO_VIRG comandos
Rule 35    comandos -> exp PONTO_VIRG
Rule 36    exp -> exp RECEBER exp_1
Rule 37    exp -> exp_1
Rule 38    exp_1 -> exp_1 OP_OU exp_2
Rule 39    exp_1 -> exp_1 OR exp_2
Rule 40    exp_1 -> exp_2
Rule 41    exp_2 -> exp_2 OP_E exp_3
Rule 42    exp_2 -> exp_2 AND exp_3
Rule 43    exp_2 -> exp_3
Rule 44    exp_3 -> exp_3 OP_OU_EX exp_4
Rule 45    exp_3 -> exp_3 XOR exp_4
Rule 46    exp_3 -> exp_4
Rule 47    exp_4 -> exp_4 IGUAL exp_5
Rule 48    exp_4 -> exp_4 DIFERENTE exp_5
Rule 49    exp_4 -> exp_5
Rule 50    exp_5 -> exp_5 MENOR_Q exp_6
Rule 51    exp_5 -> exp_5 MAIOR_Q exp_6
Rule 52    exp_5 -> exp_5 MAIOR_IGUAL exp_6
Rule 53    exp_5 -> exp_5 MENOR_IGUAL exp_6
Rule 54    exp_5 -> exp_6
Rule 55    exp_6 -> exp_6 SOMA exp_7
Rule 56    exp_6 -> exp_6 SUB exp_7
Rule 57    exp_6 -> exp_7
Rule 58    exp_7 -> exp_7 MULT exp_8
Rule 59    exp_7 -> exp_7 DIV exp_8
Rule 60    exp_7 -> exp_7 MODULO exp_8
Rule 61    exp_7 -> exp_8
Rule 62    exp_8 -> OP_NOT exp_9
Rule 63    exp_8 -> NOT exp_9
Rule 64    exp_8 -> exp_9 MAIS_MAIS
Rule 65    exp_8 -> exp_9 MENOS_MENOS
Rule 66    exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
Rule 67    exp_8 -> exp_9
Rule 68    exp_9 -> ID
Rule 69    exp_9 -> INT_V
Rule 70    exp_9 -> TRUE
Rule 71    exp_9 -> FALSE
Rule 72    exp_9 -> chamada_funcao
Rule 73    exp_9 -> tipo
Rule 74    exp_9 -> PARENT_ABRE exp PARENT_FECHA
Rule 75    chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA
Rule 76    chamada_funcao -> ID PARENT_ABRE PARENT_FECHA
Rule 77    chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA
Rule 78    condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
Rule 79    condicional_1 -> decl_variavel
Rule 80    condicional_1 -> decl_variavel condicional_1
Rule 81    condicional_1 -> repeticao
Rule 82    condicional_1 -> repeticao condicional_1
Rule 83    condicional_1 -> RETURN exp PONTO_VIRG
Rule 84    condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body comandos
Rule 85    condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2
Rule 86    repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body
Rule 87    repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body
Rule 88    for_log -> decl_variavel PONTO_VIRG
Rule 89    for_log -> decl_variavel exp PONTO_VIRG
Rule 90    for_log -> decl_variavel exp PONTO_VIRG exp
Rule 91    for_log -> decl_variavel PONTO_VIRG exp
Rule 92    for_log -> PONTO_VIRG exp PONTO_VIRG exp
Rule 93    for_log -> PONTO_VIRG exp PONTO_VIRG
Rule 94    for_log -> PONTO_VIRG PONTO_VIRG exp
Rule 95    for_log -> PONTO_VIRG PONTO_VIRG
Rule 96    tipo -> INT
Rule 97    tipo -> BOOL
Rule 98    tipo -> ID
Rule 99    tipo -> STRING

Terminals, with rules where they appear

AND                  : 42
BOOL                 : 97
CHAVE_ABRE           : 8 28 29 30 31
CHAVE_FECHA          : 8 28 29 30 31
CLASS                : 7
COLCHETE_ABRE        : 
COLCHETE_FECHA       : 
COMENTARIO           : 
DIFERENTE            : 48
DIV                  : 59
DOIS_PONTOS          : 8
ELSE                 : 78 85
ENDERECO             : 
FALSE                : 71
FOR                  : 87
ID                   : 7 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 68 75 76 98
IF                   : 78 84 85
IGUAL                : 47
INT                  : 96
INT_V                : 69
MAIOR_IGUAL          : 52
MAIOR_Q              : 51
MAIS_MAIS            : 64
MENOR_IGUAL          : 53
MENOR_Q              : 50
MENOS_MENOS          : 65
MODULO               : 60
MULT                 : 58
NAMESPACE            : 
NEW                  : 
NOT                  : 63
OP_E                 : 41
OP_NOT               : 62
OP_OU                : 38
OP_OU_EX             : 44
OR                   : 39
PARENT_ABRE          : 11 12 13 14 15 16 66 74 75 76 77 78 84 85 86 87
PARENT_FECHA         : 11 12 13 14 15 16 66 74 75 76 77 78 84 85 86 87
PONTO                : 
PONTO_VIRG           : 7 19 20 23 27 34 35 83 88 89 90 91 92 92 93 93 94 94 95 95
PUBLIC               : 8
RECEBER              : 20 22 26 36
RETURN               : 30 31 83
SETA                 : 
SIZEOF               : 66
SOMA                 : 55
STATIC               : 
STRING               : 99
STRUCT               : 
SUB                  : 56
THIS                 : 
TRUE                 : 70
TRY                  : 
TYPEDEF              : 23 24
TYPEID               : 77
USING                : 
VIRGULA              : 18 25 26
VOID                 : 13 14 15 16 16
WHILE                : 86
XOR                  : 45
error                : 

Nonterminals, with rules where they appear

body                 : 11 12 13 14 15 16 78 78 84 85 85 86 87
body_class           : 7
chamada_funcao       : 72
comandos             : 28 30 34 84
condicional_1        : 32 78 78 80 82 85
condicional_2        : 33 85
content_class        : 8
cpp                  : 4 5 6 0
decl_classe          : 1 4
decl_funcao          : 2 5 10
decl_variavel        : 3 6 9 79 80 88 89 90 91
decl_variavel_n      : 21 22 24 25 26
exp                  : 20 22 26 30 31 34 35 36 74 77 78 83 84 85 86 89 90 90 91 92 92 93 94
exp_1                : 36 37 38 39
exp_2                : 38 39 40 41 42
exp_3                : 41 42 43 44 45
exp_4                : 44 45 46 47 48
exp_5                : 47 48 49 50 51 52 53
exp_6                : 50 51 52 53 54 55 56
exp_7                : 55 56 57 58 59 60
exp_8                : 58 59 60 61
exp_9                : 62 63 64 65 66 67
for_log              : 87
parametros           : 11 14 18 75
repeticao            : 81 82
tipo                 : 11 12 13 17 18 19 20 21 22 23 24 73

Parsing method: LALR

state 0

    (0) S' -> . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . decl_classe cpp
    (5) cpp -> . decl_funcao cpp
    (6) cpp -> . decl_variavel cpp
    (7) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (11) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (14) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (15) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (16) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    CLASS           shift and go to state 5
    VOID            shift and go to state 8
    TYPEDEF         shift and go to state 9
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    cpp                            shift and go to state 1
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    tipo                           shift and go to state 7

state 1

    (0) S' -> cpp .



state 2

    (1) cpp -> decl_classe .
    (4) cpp -> decl_classe . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . decl_classe cpp
    (5) cpp -> . decl_funcao cpp
    (6) cpp -> . decl_variavel cpp
    (7) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (11) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (14) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (15) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (16) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    $end            reduce using rule 1 (cpp -> decl_classe .)
    CLASS           shift and go to state 5
    VOID            shift and go to state 8
    TYPEDEF         shift and go to state 9
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    decl_classe                    shift and go to state 2
    cpp                            shift and go to state 13
    decl_funcao                    shift and go to state 3
    decl_variavel                  shift and go to state 4
    tipo                           shift and go to state 7

state 3

    (2) cpp -> decl_funcao .
    (5) cpp -> decl_funcao . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . decl_classe cpp
    (5) cpp -> . decl_funcao cpp
    (6) cpp -> . decl_variavel cpp
    (7) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (11) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (14) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (15) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (16) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    $end            reduce using rule 2 (cpp -> decl_funcao .)
    CLASS           shift and go to state 5
    VOID            shift and go to state 8
    TYPEDEF         shift and go to state 9
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    decl_funcao                    shift and go to state 3
    cpp                            shift and go to state 14
    decl_classe                    shift and go to state 2
    decl_variavel                  shift and go to state 4
    tipo                           shift and go to state 7

state 4

    (3) cpp -> decl_variavel .
    (6) cpp -> decl_variavel . cpp
    (1) cpp -> . decl_classe
    (2) cpp -> . decl_funcao
    (3) cpp -> . decl_variavel
    (4) cpp -> . decl_classe cpp
    (5) cpp -> . decl_funcao cpp
    (6) cpp -> . decl_variavel cpp
    (7) decl_classe -> . CLASS ID body_class PONTO_VIRG
    (11) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (14) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (15) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (16) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    $end            reduce using rule 3 (cpp -> decl_variavel .)
    CLASS           shift and go to state 5
    VOID            shift and go to state 8
    TYPEDEF         shift and go to state 9
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    decl_variavel                  shift and go to state 4
    cpp                            shift and go to state 15
    decl_classe                    shift and go to state 2
    decl_funcao                    shift and go to state 3
    tipo                           shift and go to state 7

state 5

    (7) decl_classe -> CLASS . ID body_class PONTO_VIRG

    ID              shift and go to state 16


state 6

    (98) tipo -> ID .

    ID              reduce using rule 98 (tipo -> ID .)


state 7

    (11) decl_funcao -> tipo . ID PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> tipo . ID PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> tipo . ID PARENT_ABRE VOID PARENT_FECHA body
    (19) decl_variavel -> tipo . ID PONTO_VIRG
    (20) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> tipo . ID decl_variavel_n
    (22) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n

    ID              shift and go to state 17


state 8

    (14) decl_funcao -> VOID . ID PARENT_ABRE parametros PARENT_FECHA body
    (15) decl_funcao -> VOID . ID PARENT_ABRE PARENT_FECHA body
    (16) decl_funcao -> VOID . ID PARENT_ABRE VOID PARENT_FECHA body

    ID              shift and go to state 18


state 9

    (23) decl_variavel -> TYPEDEF . tipo ID PONTO_VIRG
    (24) decl_variavel -> TYPEDEF . tipo ID decl_variavel_n
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    tipo                           shift and go to state 19

state 10

    (96) tipo -> INT .

    ID              reduce using rule 96 (tipo -> INT .)
    MAIS_MAIS       reduce using rule 96 (tipo -> INT .)
    MENOS_MENOS     reduce using rule 96 (tipo -> INT .)
    MULT            reduce using rule 96 (tipo -> INT .)
    DIV             reduce using rule 96 (tipo -> INT .)
    MODULO          reduce using rule 96 (tipo -> INT .)
    SOMA            reduce using rule 96 (tipo -> INT .)
    SUB             reduce using rule 96 (tipo -> INT .)
    MENOR_Q         reduce using rule 96 (tipo -> INT .)
    MAIOR_Q         reduce using rule 96 (tipo -> INT .)
    MAIOR_IGUAL     reduce using rule 96 (tipo -> INT .)
    MENOR_IGUAL     reduce using rule 96 (tipo -> INT .)
    IGUAL           reduce using rule 96 (tipo -> INT .)
    DIFERENTE       reduce using rule 96 (tipo -> INT .)
    OP_OU_EX        reduce using rule 96 (tipo -> INT .)
    XOR             reduce using rule 96 (tipo -> INT .)
    OP_E            reduce using rule 96 (tipo -> INT .)
    AND             reduce using rule 96 (tipo -> INT .)
    OP_OU           reduce using rule 96 (tipo -> INT .)
    OR              reduce using rule 96 (tipo -> INT .)
    PONTO_VIRG      reduce using rule 96 (tipo -> INT .)
    RECEBER         reduce using rule 96 (tipo -> INT .)
    VIRGULA         reduce using rule 96 (tipo -> INT .)
    PARENT_FECHA    reduce using rule 96 (tipo -> INT .)
    CHAVE_FECHA     reduce using rule 96 (tipo -> INT .)
    CLASS           reduce using rule 96 (tipo -> INT .)
    VOID            reduce using rule 96 (tipo -> INT .)
    TYPEDEF         reduce using rule 96 (tipo -> INT .)
    INT             reduce using rule 96 (tipo -> INT .)
    BOOL            reduce using rule 96 (tipo -> INT .)
    STRING          reduce using rule 96 (tipo -> INT .)
    $end            reduce using rule 96 (tipo -> INT .)
    IF              reduce using rule 96 (tipo -> INT .)
    RETURN          reduce using rule 96 (tipo -> INT .)
    WHILE           reduce using rule 96 (tipo -> INT .)
    FOR             reduce using rule 96 (tipo -> INT .)
    OP_NOT          reduce using rule 96 (tipo -> INT .)
    NOT             reduce using rule 96 (tipo -> INT .)
    SIZEOF          reduce using rule 96 (tipo -> INT .)
    INT_V           reduce using rule 96 (tipo -> INT .)
    TRUE            reduce using rule 96 (tipo -> INT .)
    FALSE           reduce using rule 96 (tipo -> INT .)
    PARENT_ABRE     reduce using rule 96 (tipo -> INT .)
    TYPEID          reduce using rule 96 (tipo -> INT .)
    CHAVE_ABRE      reduce using rule 96 (tipo -> INT .)
    ELSE            reduce using rule 96 (tipo -> INT .)


state 11

    (97) tipo -> BOOL .

    ID              reduce using rule 97 (tipo -> BOOL .)
    MAIS_MAIS       reduce using rule 97 (tipo -> BOOL .)
    MENOS_MENOS     reduce using rule 97 (tipo -> BOOL .)
    MULT            reduce using rule 97 (tipo -> BOOL .)
    DIV             reduce using rule 97 (tipo -> BOOL .)
    MODULO          reduce using rule 97 (tipo -> BOOL .)
    SOMA            reduce using rule 97 (tipo -> BOOL .)
    SUB             reduce using rule 97 (tipo -> BOOL .)
    MENOR_Q         reduce using rule 97 (tipo -> BOOL .)
    MAIOR_Q         reduce using rule 97 (tipo -> BOOL .)
    MAIOR_IGUAL     reduce using rule 97 (tipo -> BOOL .)
    MENOR_IGUAL     reduce using rule 97 (tipo -> BOOL .)
    IGUAL           reduce using rule 97 (tipo -> BOOL .)
    DIFERENTE       reduce using rule 97 (tipo -> BOOL .)
    OP_OU_EX        reduce using rule 97 (tipo -> BOOL .)
    XOR             reduce using rule 97 (tipo -> BOOL .)
    OP_E            reduce using rule 97 (tipo -> BOOL .)
    AND             reduce using rule 97 (tipo -> BOOL .)
    OP_OU           reduce using rule 97 (tipo -> BOOL .)
    OR              reduce using rule 97 (tipo -> BOOL .)
    PONTO_VIRG      reduce using rule 97 (tipo -> BOOL .)
    RECEBER         reduce using rule 97 (tipo -> BOOL .)
    VIRGULA         reduce using rule 97 (tipo -> BOOL .)
    PARENT_FECHA    reduce using rule 97 (tipo -> BOOL .)
    CHAVE_FECHA     reduce using rule 97 (tipo -> BOOL .)
    CLASS           reduce using rule 97 (tipo -> BOOL .)
    VOID            reduce using rule 97 (tipo -> BOOL .)
    TYPEDEF         reduce using rule 97 (tipo -> BOOL .)
    INT             reduce using rule 97 (tipo -> BOOL .)
    BOOL            reduce using rule 97 (tipo -> BOOL .)
    STRING          reduce using rule 97 (tipo -> BOOL .)
    $end            reduce using rule 97 (tipo -> BOOL .)
    IF              reduce using rule 97 (tipo -> BOOL .)
    RETURN          reduce using rule 97 (tipo -> BOOL .)
    WHILE           reduce using rule 97 (tipo -> BOOL .)
    FOR             reduce using rule 97 (tipo -> BOOL .)
    OP_NOT          reduce using rule 97 (tipo -> BOOL .)
    NOT             reduce using rule 97 (tipo -> BOOL .)
    SIZEOF          reduce using rule 97 (tipo -> BOOL .)
    INT_V           reduce using rule 97 (tipo -> BOOL .)
    TRUE            reduce using rule 97 (tipo -> BOOL .)
    FALSE           reduce using rule 97 (tipo -> BOOL .)
    PARENT_ABRE     reduce using rule 97 (tipo -> BOOL .)
    TYPEID          reduce using rule 97 (tipo -> BOOL .)
    CHAVE_ABRE      reduce using rule 97 (tipo -> BOOL .)
    ELSE            reduce using rule 97 (tipo -> BOOL .)


state 12

    (99) tipo -> STRING .

    ID              reduce using rule 99 (tipo -> STRING .)
    MAIS_MAIS       reduce using rule 99 (tipo -> STRING .)
    MENOS_MENOS     reduce using rule 99 (tipo -> STRING .)
    MULT            reduce using rule 99 (tipo -> STRING .)
    DIV             reduce using rule 99 (tipo -> STRING .)
    MODULO          reduce using rule 99 (tipo -> STRING .)
    SOMA            reduce using rule 99 (tipo -> STRING .)
    SUB             reduce using rule 99 (tipo -> STRING .)
    MENOR_Q         reduce using rule 99 (tipo -> STRING .)
    MAIOR_Q         reduce using rule 99 (tipo -> STRING .)
    MAIOR_IGUAL     reduce using rule 99 (tipo -> STRING .)
    MENOR_IGUAL     reduce using rule 99 (tipo -> STRING .)
    IGUAL           reduce using rule 99 (tipo -> STRING .)
    DIFERENTE       reduce using rule 99 (tipo -> STRING .)
    OP_OU_EX        reduce using rule 99 (tipo -> STRING .)
    XOR             reduce using rule 99 (tipo -> STRING .)
    OP_E            reduce using rule 99 (tipo -> STRING .)
    AND             reduce using rule 99 (tipo -> STRING .)
    OP_OU           reduce using rule 99 (tipo -> STRING .)
    OR              reduce using rule 99 (tipo -> STRING .)
    PONTO_VIRG      reduce using rule 99 (tipo -> STRING .)
    RECEBER         reduce using rule 99 (tipo -> STRING .)
    VIRGULA         reduce using rule 99 (tipo -> STRING .)
    PARENT_FECHA    reduce using rule 99 (tipo -> STRING .)
    CHAVE_FECHA     reduce using rule 99 (tipo -> STRING .)
    CLASS           reduce using rule 99 (tipo -> STRING .)
    VOID            reduce using rule 99 (tipo -> STRING .)
    TYPEDEF         reduce using rule 99 (tipo -> STRING .)
    INT             reduce using rule 99 (tipo -> STRING .)
    BOOL            reduce using rule 99 (tipo -> STRING .)
    STRING          reduce using rule 99 (tipo -> STRING .)
    $end            reduce using rule 99 (tipo -> STRING .)
    IF              reduce using rule 99 (tipo -> STRING .)
    RETURN          reduce using rule 99 (tipo -> STRING .)
    WHILE           reduce using rule 99 (tipo -> STRING .)
    FOR             reduce using rule 99 (tipo -> STRING .)
    OP_NOT          reduce using rule 99 (tipo -> STRING .)
    NOT             reduce using rule 99 (tipo -> STRING .)
    SIZEOF          reduce using rule 99 (tipo -> STRING .)
    INT_V           reduce using rule 99 (tipo -> STRING .)
    TRUE            reduce using rule 99 (tipo -> STRING .)
    FALSE           reduce using rule 99 (tipo -> STRING .)
    PARENT_ABRE     reduce using rule 99 (tipo -> STRING .)
    TYPEID          reduce using rule 99 (tipo -> STRING .)
    CHAVE_ABRE      reduce using rule 99 (tipo -> STRING .)
    ELSE            reduce using rule 99 (tipo -> STRING .)


state 13

    (4) cpp -> decl_classe cpp .

    $end            reduce using rule 4 (cpp -> decl_classe cpp .)


state 14

    (5) cpp -> decl_funcao cpp .

    $end            reduce using rule 5 (cpp -> decl_funcao cpp .)


state 15

    (6) cpp -> decl_variavel cpp .

    $end            reduce using rule 6 (cpp -> decl_variavel cpp .)


state 16

    (7) decl_classe -> CLASS ID . body_class PONTO_VIRG
    (8) body_class -> . CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA

    CHAVE_ABRE      shift and go to state 21

    body_class                     shift and go to state 20

state 17

    (11) decl_funcao -> tipo ID . PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> tipo ID . PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> tipo ID . PARENT_ABRE VOID PARENT_FECHA body
    (19) decl_variavel -> tipo ID . PONTO_VIRG
    (20) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (21) decl_variavel -> tipo ID . decl_variavel_n
    (22) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n
    (25) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (26) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (27) decl_variavel_n -> . PONTO_VIRG

    PARENT_ABRE     shift and go to state 22
    PONTO_VIRG      shift and go to state 23
    RECEBER         shift and go to state 24
    VIRGULA         shift and go to state 26

    decl_variavel_n                shift and go to state 25

state 18

    (14) decl_funcao -> VOID ID . PARENT_ABRE parametros PARENT_FECHA body
    (15) decl_funcao -> VOID ID . PARENT_ABRE PARENT_FECHA body
    (16) decl_funcao -> VOID ID . PARENT_ABRE VOID PARENT_FECHA body

    PARENT_ABRE     shift and go to state 27


state 19

    (23) decl_variavel -> TYPEDEF tipo . ID PONTO_VIRG
    (24) decl_variavel -> TYPEDEF tipo . ID decl_variavel_n

    ID              shift and go to state 28


state 20

    (7) decl_classe -> CLASS ID body_class . PONTO_VIRG

    PONTO_VIRG      shift and go to state 29


state 21

    (8) body_class -> CHAVE_ABRE . PUBLIC DOIS_PONTOS content_class CHAVE_FECHA

    PUBLIC          shift and go to state 30


state 22

    (11) decl_funcao -> tipo ID PARENT_ABRE . parametros PARENT_FECHA body
    (12) decl_funcao -> tipo ID PARENT_ABRE . PARENT_FECHA body
    (13) decl_funcao -> tipo ID PARENT_ABRE . VOID PARENT_FECHA body
    (17) parametros -> . tipo ID
    (18) parametros -> . tipo ID VIRGULA parametros
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PARENT_FECHA    shift and go to state 33
    VOID            shift and go to state 34
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    tipo                           shift and go to state 31
    parametros                     shift and go to state 32

state 23

    (19) decl_variavel -> tipo ID PONTO_VIRG .
    (27) decl_variavel_n -> PONTO_VIRG .

  ! reduce/reduce conflict for CLASS resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for VOID resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for INT resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for BOOL resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for ID resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for STRING resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for $end resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for CHAVE_FECHA resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for IF resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for RETURN resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for WHILE resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for FOR resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for CHAVE_ABRE resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for ELSE resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for PONTO_VIRG resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for OP_NOT resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for NOT resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for INT_V resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for TRUE resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for FALSE resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for PARENT_ABRE resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for TYPEID resolved using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    CLASS           reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    VOID            reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    INT             reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    BOOL            reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    ID              reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    STRING          reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    $end            reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    IF              reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    RETURN          reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    WHILE           reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    FOR             reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    CHAVE_ABRE      reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    ELSE            reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    OP_NOT          reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    NOT             reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    SIZEOF          reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    INT_V           reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    TRUE            reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    FALSE           reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)
    TYPEID          reduce using rule 19 (decl_variavel -> tipo ID PONTO_VIRG .)

  ! CLASS           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! VOID            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TYPEDEF         [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! INT             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! BOOL            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! ID              [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! STRING          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! $end            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! CHAVE_FECHA     [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! IF              [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! RETURN          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! WHILE           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! FOR             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! CHAVE_ABRE      [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! ELSE            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! PONTO_VIRG      [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! OP_NOT          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! NOT             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! SIZEOF          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! INT_V           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TRUE            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! FALSE           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! PARENT_ABRE     [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TYPEID          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]


state 24

    (20) decl_variavel -> tipo ID RECEBER . exp PONTO_VIRG
    (22) decl_variavel -> tipo ID RECEBER . exp decl_variavel_n
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    tipo                           shift and go to state 35
    exp                            shift and go to state 37
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54

state 25

    (21) decl_variavel -> tipo ID decl_variavel_n .

    CLASS           reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    VOID            reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    TYPEDEF         reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    INT             reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    BOOL            reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    ID              reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    STRING          reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    $end            reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    CHAVE_FECHA     reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    IF              reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    RETURN          reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    WHILE           reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    FOR             reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    CHAVE_ABRE      reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    ELSE            reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    PONTO_VIRG      reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    OP_NOT          reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    NOT             reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    SIZEOF          reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    INT_V           reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    TRUE            reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    FALSE           reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    PARENT_ABRE     reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)
    TYPEID          reduce using rule 21 (decl_variavel -> tipo ID decl_variavel_n .)


state 26

    (25) decl_variavel_n -> VIRGULA . ID decl_variavel_n
    (26) decl_variavel_n -> VIRGULA . ID RECEBER exp decl_variavel_n

    ID              shift and go to state 56


state 27

    (14) decl_funcao -> VOID ID PARENT_ABRE . parametros PARENT_FECHA body
    (15) decl_funcao -> VOID ID PARENT_ABRE . PARENT_FECHA body
    (16) decl_funcao -> VOID ID PARENT_ABRE . VOID PARENT_FECHA body
    (17) parametros -> . tipo ID
    (18) parametros -> . tipo ID VIRGULA parametros
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PARENT_FECHA    shift and go to state 59
    VOID            shift and go to state 57
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    parametros                     shift and go to state 58
    tipo                           shift and go to state 31

state 28

    (23) decl_variavel -> TYPEDEF tipo ID . PONTO_VIRG
    (24) decl_variavel -> TYPEDEF tipo ID . decl_variavel_n
    (25) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (26) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (27) decl_variavel_n -> . PONTO_VIRG

    PONTO_VIRG      shift and go to state 60
    VIRGULA         shift and go to state 26

    decl_variavel_n                shift and go to state 61

state 29

    (7) decl_classe -> CLASS ID body_class PONTO_VIRG .

    CLASS           reduce using rule 7 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    VOID            reduce using rule 7 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    TYPEDEF         reduce using rule 7 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    INT             reduce using rule 7 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    BOOL            reduce using rule 7 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    ID              reduce using rule 7 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    STRING          reduce using rule 7 (decl_classe -> CLASS ID body_class PONTO_VIRG .)
    $end            reduce using rule 7 (decl_classe -> CLASS ID body_class PONTO_VIRG .)


state 30

    (8) body_class -> CHAVE_ABRE PUBLIC . DOIS_PONTOS content_class CHAVE_FECHA

    DOIS_PONTOS     shift and go to state 62


state 31

    (17) parametros -> tipo . ID
    (18) parametros -> tipo . ID VIRGULA parametros

    ID              shift and go to state 63


state 32

    (11) decl_funcao -> tipo ID PARENT_ABRE parametros . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 64


state 33

    (12) decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 65

state 34

    (13) decl_funcao -> tipo ID PARENT_ABRE VOID . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 67


state 35

    (73) exp_9 -> tipo .

    MAIS_MAIS       reduce using rule 73 (exp_9 -> tipo .)
    MENOS_MENOS     reduce using rule 73 (exp_9 -> tipo .)
    MULT            reduce using rule 73 (exp_9 -> tipo .)
    DIV             reduce using rule 73 (exp_9 -> tipo .)
    MODULO          reduce using rule 73 (exp_9 -> tipo .)
    SOMA            reduce using rule 73 (exp_9 -> tipo .)
    SUB             reduce using rule 73 (exp_9 -> tipo .)
    MENOR_Q         reduce using rule 73 (exp_9 -> tipo .)
    MAIOR_Q         reduce using rule 73 (exp_9 -> tipo .)
    MAIOR_IGUAL     reduce using rule 73 (exp_9 -> tipo .)
    MENOR_IGUAL     reduce using rule 73 (exp_9 -> tipo .)
    IGUAL           reduce using rule 73 (exp_9 -> tipo .)
    DIFERENTE       reduce using rule 73 (exp_9 -> tipo .)
    OP_OU_EX        reduce using rule 73 (exp_9 -> tipo .)
    XOR             reduce using rule 73 (exp_9 -> tipo .)
    OP_E            reduce using rule 73 (exp_9 -> tipo .)
    AND             reduce using rule 73 (exp_9 -> tipo .)
    OP_OU           reduce using rule 73 (exp_9 -> tipo .)
    OR              reduce using rule 73 (exp_9 -> tipo .)
    PONTO_VIRG      reduce using rule 73 (exp_9 -> tipo .)
    RECEBER         reduce using rule 73 (exp_9 -> tipo .)
    VIRGULA         reduce using rule 73 (exp_9 -> tipo .)
    PARENT_FECHA    reduce using rule 73 (exp_9 -> tipo .)
    CHAVE_FECHA     reduce using rule 73 (exp_9 -> tipo .)
    CLASS           reduce using rule 73 (exp_9 -> tipo .)
    VOID            reduce using rule 73 (exp_9 -> tipo .)
    TYPEDEF         reduce using rule 73 (exp_9 -> tipo .)
    INT             reduce using rule 73 (exp_9 -> tipo .)
    BOOL            reduce using rule 73 (exp_9 -> tipo .)
    ID              reduce using rule 73 (exp_9 -> tipo .)
    STRING          reduce using rule 73 (exp_9 -> tipo .)
    $end            reduce using rule 73 (exp_9 -> tipo .)
    IF              reduce using rule 73 (exp_9 -> tipo .)
    RETURN          reduce using rule 73 (exp_9 -> tipo .)
    WHILE           reduce using rule 73 (exp_9 -> tipo .)
    FOR             reduce using rule 73 (exp_9 -> tipo .)
    OP_NOT          reduce using rule 73 (exp_9 -> tipo .)
    NOT             reduce using rule 73 (exp_9 -> tipo .)
    SIZEOF          reduce using rule 73 (exp_9 -> tipo .)
    INT_V           reduce using rule 73 (exp_9 -> tipo .)
    TRUE            reduce using rule 73 (exp_9 -> tipo .)
    FALSE           reduce using rule 73 (exp_9 -> tipo .)
    PARENT_ABRE     reduce using rule 73 (exp_9 -> tipo .)
    TYPEID          reduce using rule 73 (exp_9 -> tipo .)
    CHAVE_ABRE      reduce using rule 73 (exp_9 -> tipo .)
    ELSE            reduce using rule 73 (exp_9 -> tipo .)


state 36

    (68) exp_9 -> ID .
    (75) chamada_funcao -> ID . PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> ID . PARENT_ABRE PARENT_FECHA
    (98) tipo -> ID .

  ! shift/reduce conflict for PARENT_ABRE resolved as shift
  ! reduce/reduce conflict for MAIS_MAIS resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MENOS_MENOS resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MULT resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for DIV resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MODULO resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for SOMA resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for SUB resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MENOR_Q resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MAIOR_Q resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MAIOR_IGUAL resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for IGUAL resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OP_OU_EX resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for XOR resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OP_E resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OP_OU resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for PONTO_VIRG resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for RECEBER resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for VIRGULA resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for PARENT_FECHA resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for CHAVE_FECHA resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for CLASS resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for VOID resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for BOOL resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OP_NOT resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for INT_V resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 68 (exp_9 -> ID .)
  ! shift/reduce conflict for PARENT_ABRE resolved as shift
  ! reduce/reduce conflict for TYPEID resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for CHAVE_ABRE resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 68 (exp_9 -> ID .)
    MAIS_MAIS       reduce using rule 68 (exp_9 -> ID .)
    MENOS_MENOS     reduce using rule 68 (exp_9 -> ID .)
    MULT            reduce using rule 68 (exp_9 -> ID .)
    DIV             reduce using rule 68 (exp_9 -> ID .)
    MODULO          reduce using rule 68 (exp_9 -> ID .)
    SOMA            reduce using rule 68 (exp_9 -> ID .)
    SUB             reduce using rule 68 (exp_9 -> ID .)
    MENOR_Q         reduce using rule 68 (exp_9 -> ID .)
    MAIOR_Q         reduce using rule 68 (exp_9 -> ID .)
    MAIOR_IGUAL     reduce using rule 68 (exp_9 -> ID .)
    MENOR_IGUAL     reduce using rule 68 (exp_9 -> ID .)
    IGUAL           reduce using rule 68 (exp_9 -> ID .)
    DIFERENTE       reduce using rule 68 (exp_9 -> ID .)
    OP_OU_EX        reduce using rule 68 (exp_9 -> ID .)
    XOR             reduce using rule 68 (exp_9 -> ID .)
    OP_E            reduce using rule 68 (exp_9 -> ID .)
    AND             reduce using rule 68 (exp_9 -> ID .)
    OP_OU           reduce using rule 68 (exp_9 -> ID .)
    OR              reduce using rule 68 (exp_9 -> ID .)
    PONTO_VIRG      reduce using rule 68 (exp_9 -> ID .)
    RECEBER         reduce using rule 68 (exp_9 -> ID .)
    VIRGULA         reduce using rule 68 (exp_9 -> ID .)
    PARENT_FECHA    reduce using rule 68 (exp_9 -> ID .)
    CHAVE_FECHA     reduce using rule 68 (exp_9 -> ID .)
    CLASS           reduce using rule 68 (exp_9 -> ID .)
    VOID            reduce using rule 68 (exp_9 -> ID .)
    TYPEDEF         reduce using rule 68 (exp_9 -> ID .)
    INT             reduce using rule 68 (exp_9 -> ID .)
    BOOL            reduce using rule 68 (exp_9 -> ID .)
    ID              reduce using rule 68 (exp_9 -> ID .)
    STRING          reduce using rule 68 (exp_9 -> ID .)
    $end            reduce using rule 68 (exp_9 -> ID .)
    IF              reduce using rule 68 (exp_9 -> ID .)
    RETURN          reduce using rule 68 (exp_9 -> ID .)
    WHILE           reduce using rule 68 (exp_9 -> ID .)
    FOR             reduce using rule 68 (exp_9 -> ID .)
    OP_NOT          reduce using rule 68 (exp_9 -> ID .)
    NOT             reduce using rule 68 (exp_9 -> ID .)
    SIZEOF          reduce using rule 68 (exp_9 -> ID .)
    INT_V           reduce using rule 68 (exp_9 -> ID .)
    TRUE            reduce using rule 68 (exp_9 -> ID .)
    FALSE           reduce using rule 68 (exp_9 -> ID .)
    TYPEID          reduce using rule 68 (exp_9 -> ID .)
    CHAVE_ABRE      reduce using rule 68 (exp_9 -> ID .)
    ELSE            reduce using rule 68 (exp_9 -> ID .)
    PARENT_ABRE     shift and go to state 68

  ! PARENT_ABRE     [ reduce using rule 68 (exp_9 -> ID .) ]
  ! MAIS_MAIS       [ reduce using rule 98 (tipo -> ID .) ]
  ! MENOS_MENOS     [ reduce using rule 98 (tipo -> ID .) ]
  ! MULT            [ reduce using rule 98 (tipo -> ID .) ]
  ! DIV             [ reduce using rule 98 (tipo -> ID .) ]
  ! MODULO          [ reduce using rule 98 (tipo -> ID .) ]
  ! SOMA            [ reduce using rule 98 (tipo -> ID .) ]
  ! SUB             [ reduce using rule 98 (tipo -> ID .) ]
  ! MENOR_Q         [ reduce using rule 98 (tipo -> ID .) ]
  ! MAIOR_Q         [ reduce using rule 98 (tipo -> ID .) ]
  ! MAIOR_IGUAL     [ reduce using rule 98 (tipo -> ID .) ]
  ! MENOR_IGUAL     [ reduce using rule 98 (tipo -> ID .) ]
  ! IGUAL           [ reduce using rule 98 (tipo -> ID .) ]
  ! DIFERENTE       [ reduce using rule 98 (tipo -> ID .) ]
  ! OP_OU_EX        [ reduce using rule 98 (tipo -> ID .) ]
  ! XOR             [ reduce using rule 98 (tipo -> ID .) ]
  ! OP_E            [ reduce using rule 98 (tipo -> ID .) ]
  ! AND             [ reduce using rule 98 (tipo -> ID .) ]
  ! OP_OU           [ reduce using rule 98 (tipo -> ID .) ]
  ! OR              [ reduce using rule 98 (tipo -> ID .) ]
  ! PONTO_VIRG      [ reduce using rule 98 (tipo -> ID .) ]
  ! RECEBER         [ reduce using rule 98 (tipo -> ID .) ]
  ! VIRGULA         [ reduce using rule 98 (tipo -> ID .) ]
  ! PARENT_FECHA    [ reduce using rule 98 (tipo -> ID .) ]
  ! CHAVE_FECHA     [ reduce using rule 98 (tipo -> ID .) ]
  ! CLASS           [ reduce using rule 98 (tipo -> ID .) ]
  ! VOID            [ reduce using rule 98 (tipo -> ID .) ]
  ! TYPEDEF         [ reduce using rule 98 (tipo -> ID .) ]
  ! INT             [ reduce using rule 98 (tipo -> ID .) ]
  ! BOOL            [ reduce using rule 98 (tipo -> ID .) ]
  ! ID              [ reduce using rule 98 (tipo -> ID .) ]
  ! STRING          [ reduce using rule 98 (tipo -> ID .) ]
  ! $end            [ reduce using rule 98 (tipo -> ID .) ]
  ! IF              [ reduce using rule 98 (tipo -> ID .) ]
  ! RETURN          [ reduce using rule 98 (tipo -> ID .) ]
  ! WHILE           [ reduce using rule 98 (tipo -> ID .) ]
  ! FOR             [ reduce using rule 98 (tipo -> ID .) ]
  ! OP_NOT          [ reduce using rule 98 (tipo -> ID .) ]
  ! NOT             [ reduce using rule 98 (tipo -> ID .) ]
  ! SIZEOF          [ reduce using rule 98 (tipo -> ID .) ]
  ! INT_V           [ reduce using rule 98 (tipo -> ID .) ]
  ! TRUE            [ reduce using rule 98 (tipo -> ID .) ]
  ! FALSE           [ reduce using rule 98 (tipo -> ID .) ]
  ! PARENT_ABRE     [ reduce using rule 98 (tipo -> ID .) ]
  ! TYPEID          [ reduce using rule 98 (tipo -> ID .) ]
  ! CHAVE_ABRE      [ reduce using rule 98 (tipo -> ID .) ]
  ! ELSE            [ reduce using rule 98 (tipo -> ID .) ]


state 37

    (20) decl_variavel -> tipo ID RECEBER exp . PONTO_VIRG
    (22) decl_variavel -> tipo ID RECEBER exp . decl_variavel_n
    (36) exp -> exp . RECEBER exp_1
    (25) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (26) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (27) decl_variavel_n -> . PONTO_VIRG

    PONTO_VIRG      shift and go to state 70
    RECEBER         shift and go to state 69
    VIRGULA         shift and go to state 26

    decl_variavel_n                shift and go to state 71

state 38

    (37) exp -> exp_1 .
    (38) exp_1 -> exp_1 . OP_OU exp_2
    (39) exp_1 -> exp_1 . OR exp_2

    PONTO_VIRG      reduce using rule 37 (exp -> exp_1 .)
    RECEBER         reduce using rule 37 (exp -> exp_1 .)
    VIRGULA         reduce using rule 37 (exp -> exp_1 .)
    PARENT_FECHA    reduce using rule 37 (exp -> exp_1 .)
    CHAVE_FECHA     reduce using rule 37 (exp -> exp_1 .)
    CLASS           reduce using rule 37 (exp -> exp_1 .)
    VOID            reduce using rule 37 (exp -> exp_1 .)
    TYPEDEF         reduce using rule 37 (exp -> exp_1 .)
    INT             reduce using rule 37 (exp -> exp_1 .)
    BOOL            reduce using rule 37 (exp -> exp_1 .)
    ID              reduce using rule 37 (exp -> exp_1 .)
    STRING          reduce using rule 37 (exp -> exp_1 .)
    $end            reduce using rule 37 (exp -> exp_1 .)
    IF              reduce using rule 37 (exp -> exp_1 .)
    RETURN          reduce using rule 37 (exp -> exp_1 .)
    WHILE           reduce using rule 37 (exp -> exp_1 .)
    FOR             reduce using rule 37 (exp -> exp_1 .)
    OP_NOT          reduce using rule 37 (exp -> exp_1 .)
    NOT             reduce using rule 37 (exp -> exp_1 .)
    SIZEOF          reduce using rule 37 (exp -> exp_1 .)
    INT_V           reduce using rule 37 (exp -> exp_1 .)
    TRUE            reduce using rule 37 (exp -> exp_1 .)
    FALSE           reduce using rule 37 (exp -> exp_1 .)
    PARENT_ABRE     reduce using rule 37 (exp -> exp_1 .)
    TYPEID          reduce using rule 37 (exp -> exp_1 .)
    CHAVE_ABRE      reduce using rule 37 (exp -> exp_1 .)
    ELSE            reduce using rule 37 (exp -> exp_1 .)
    OP_OU           shift and go to state 72
    OR              shift and go to state 73


state 39

    (40) exp_1 -> exp_2 .
    (41) exp_2 -> exp_2 . OP_E exp_3
    (42) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 40 (exp_1 -> exp_2 .)
    OR              reduce using rule 40 (exp_1 -> exp_2 .)
    PONTO_VIRG      reduce using rule 40 (exp_1 -> exp_2 .)
    RECEBER         reduce using rule 40 (exp_1 -> exp_2 .)
    VIRGULA         reduce using rule 40 (exp_1 -> exp_2 .)
    PARENT_FECHA    reduce using rule 40 (exp_1 -> exp_2 .)
    CHAVE_FECHA     reduce using rule 40 (exp_1 -> exp_2 .)
    CLASS           reduce using rule 40 (exp_1 -> exp_2 .)
    VOID            reduce using rule 40 (exp_1 -> exp_2 .)
    TYPEDEF         reduce using rule 40 (exp_1 -> exp_2 .)
    INT             reduce using rule 40 (exp_1 -> exp_2 .)
    BOOL            reduce using rule 40 (exp_1 -> exp_2 .)
    ID              reduce using rule 40 (exp_1 -> exp_2 .)
    STRING          reduce using rule 40 (exp_1 -> exp_2 .)
    $end            reduce using rule 40 (exp_1 -> exp_2 .)
    IF              reduce using rule 40 (exp_1 -> exp_2 .)
    RETURN          reduce using rule 40 (exp_1 -> exp_2 .)
    WHILE           reduce using rule 40 (exp_1 -> exp_2 .)
    FOR             reduce using rule 40 (exp_1 -> exp_2 .)
    OP_NOT          reduce using rule 40 (exp_1 -> exp_2 .)
    NOT             reduce using rule 40 (exp_1 -> exp_2 .)
    SIZEOF          reduce using rule 40 (exp_1 -> exp_2 .)
    INT_V           reduce using rule 40 (exp_1 -> exp_2 .)
    TRUE            reduce using rule 40 (exp_1 -> exp_2 .)
    FALSE           reduce using rule 40 (exp_1 -> exp_2 .)
    PARENT_ABRE     reduce using rule 40 (exp_1 -> exp_2 .)
    TYPEID          reduce using rule 40 (exp_1 -> exp_2 .)
    CHAVE_ABRE      reduce using rule 40 (exp_1 -> exp_2 .)
    ELSE            reduce using rule 40 (exp_1 -> exp_2 .)
    OP_E            shift and go to state 74
    AND             shift and go to state 75


state 40

    (43) exp_2 -> exp_3 .
    (44) exp_3 -> exp_3 . OP_OU_EX exp_4
    (45) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 43 (exp_2 -> exp_3 .)
    AND             reduce using rule 43 (exp_2 -> exp_3 .)
    OP_OU           reduce using rule 43 (exp_2 -> exp_3 .)
    OR              reduce using rule 43 (exp_2 -> exp_3 .)
    PONTO_VIRG      reduce using rule 43 (exp_2 -> exp_3 .)
    RECEBER         reduce using rule 43 (exp_2 -> exp_3 .)
    VIRGULA         reduce using rule 43 (exp_2 -> exp_3 .)
    PARENT_FECHA    reduce using rule 43 (exp_2 -> exp_3 .)
    CHAVE_FECHA     reduce using rule 43 (exp_2 -> exp_3 .)
    CLASS           reduce using rule 43 (exp_2 -> exp_3 .)
    VOID            reduce using rule 43 (exp_2 -> exp_3 .)
    TYPEDEF         reduce using rule 43 (exp_2 -> exp_3 .)
    INT             reduce using rule 43 (exp_2 -> exp_3 .)
    BOOL            reduce using rule 43 (exp_2 -> exp_3 .)
    ID              reduce using rule 43 (exp_2 -> exp_3 .)
    STRING          reduce using rule 43 (exp_2 -> exp_3 .)
    $end            reduce using rule 43 (exp_2 -> exp_3 .)
    IF              reduce using rule 43 (exp_2 -> exp_3 .)
    RETURN          reduce using rule 43 (exp_2 -> exp_3 .)
    WHILE           reduce using rule 43 (exp_2 -> exp_3 .)
    FOR             reduce using rule 43 (exp_2 -> exp_3 .)
    OP_NOT          reduce using rule 43 (exp_2 -> exp_3 .)
    NOT             reduce using rule 43 (exp_2 -> exp_3 .)
    SIZEOF          reduce using rule 43 (exp_2 -> exp_3 .)
    INT_V           reduce using rule 43 (exp_2 -> exp_3 .)
    TRUE            reduce using rule 43 (exp_2 -> exp_3 .)
    FALSE           reduce using rule 43 (exp_2 -> exp_3 .)
    PARENT_ABRE     reduce using rule 43 (exp_2 -> exp_3 .)
    TYPEID          reduce using rule 43 (exp_2 -> exp_3 .)
    CHAVE_ABRE      reduce using rule 43 (exp_2 -> exp_3 .)
    ELSE            reduce using rule 43 (exp_2 -> exp_3 .)
    OP_OU_EX        shift and go to state 76
    XOR             shift and go to state 77


state 41

    (46) exp_3 -> exp_4 .
    (47) exp_4 -> exp_4 . IGUAL exp_5
    (48) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 46 (exp_3 -> exp_4 .)
    XOR             reduce using rule 46 (exp_3 -> exp_4 .)
    OP_E            reduce using rule 46 (exp_3 -> exp_4 .)
    AND             reduce using rule 46 (exp_3 -> exp_4 .)
    OP_OU           reduce using rule 46 (exp_3 -> exp_4 .)
    OR              reduce using rule 46 (exp_3 -> exp_4 .)
    PONTO_VIRG      reduce using rule 46 (exp_3 -> exp_4 .)
    RECEBER         reduce using rule 46 (exp_3 -> exp_4 .)
    VIRGULA         reduce using rule 46 (exp_3 -> exp_4 .)
    PARENT_FECHA    reduce using rule 46 (exp_3 -> exp_4 .)
    CHAVE_FECHA     reduce using rule 46 (exp_3 -> exp_4 .)
    CLASS           reduce using rule 46 (exp_3 -> exp_4 .)
    VOID            reduce using rule 46 (exp_3 -> exp_4 .)
    TYPEDEF         reduce using rule 46 (exp_3 -> exp_4 .)
    INT             reduce using rule 46 (exp_3 -> exp_4 .)
    BOOL            reduce using rule 46 (exp_3 -> exp_4 .)
    ID              reduce using rule 46 (exp_3 -> exp_4 .)
    STRING          reduce using rule 46 (exp_3 -> exp_4 .)
    $end            reduce using rule 46 (exp_3 -> exp_4 .)
    IF              reduce using rule 46 (exp_3 -> exp_4 .)
    RETURN          reduce using rule 46 (exp_3 -> exp_4 .)
    WHILE           reduce using rule 46 (exp_3 -> exp_4 .)
    FOR             reduce using rule 46 (exp_3 -> exp_4 .)
    OP_NOT          reduce using rule 46 (exp_3 -> exp_4 .)
    NOT             reduce using rule 46 (exp_3 -> exp_4 .)
    SIZEOF          reduce using rule 46 (exp_3 -> exp_4 .)
    INT_V           reduce using rule 46 (exp_3 -> exp_4 .)
    TRUE            reduce using rule 46 (exp_3 -> exp_4 .)
    FALSE           reduce using rule 46 (exp_3 -> exp_4 .)
    PARENT_ABRE     reduce using rule 46 (exp_3 -> exp_4 .)
    TYPEID          reduce using rule 46 (exp_3 -> exp_4 .)
    CHAVE_ABRE      reduce using rule 46 (exp_3 -> exp_4 .)
    ELSE            reduce using rule 46 (exp_3 -> exp_4 .)
    IGUAL           shift and go to state 78
    DIFERENTE       shift and go to state 79


state 42

    (49) exp_4 -> exp_5 .
    (50) exp_5 -> exp_5 . MENOR_Q exp_6
    (51) exp_5 -> exp_5 . MAIOR_Q exp_6
    (52) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (53) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 49 (exp_4 -> exp_5 .)
    DIFERENTE       reduce using rule 49 (exp_4 -> exp_5 .)
    OP_OU_EX        reduce using rule 49 (exp_4 -> exp_5 .)
    XOR             reduce using rule 49 (exp_4 -> exp_5 .)
    OP_E            reduce using rule 49 (exp_4 -> exp_5 .)
    AND             reduce using rule 49 (exp_4 -> exp_5 .)
    OP_OU           reduce using rule 49 (exp_4 -> exp_5 .)
    OR              reduce using rule 49 (exp_4 -> exp_5 .)
    PONTO_VIRG      reduce using rule 49 (exp_4 -> exp_5 .)
    RECEBER         reduce using rule 49 (exp_4 -> exp_5 .)
    VIRGULA         reduce using rule 49 (exp_4 -> exp_5 .)
    PARENT_FECHA    reduce using rule 49 (exp_4 -> exp_5 .)
    CHAVE_FECHA     reduce using rule 49 (exp_4 -> exp_5 .)
    CLASS           reduce using rule 49 (exp_4 -> exp_5 .)
    VOID            reduce using rule 49 (exp_4 -> exp_5 .)
    TYPEDEF         reduce using rule 49 (exp_4 -> exp_5 .)
    INT             reduce using rule 49 (exp_4 -> exp_5 .)
    BOOL            reduce using rule 49 (exp_4 -> exp_5 .)
    ID              reduce using rule 49 (exp_4 -> exp_5 .)
    STRING          reduce using rule 49 (exp_4 -> exp_5 .)
    $end            reduce using rule 49 (exp_4 -> exp_5 .)
    IF              reduce using rule 49 (exp_4 -> exp_5 .)
    RETURN          reduce using rule 49 (exp_4 -> exp_5 .)
    WHILE           reduce using rule 49 (exp_4 -> exp_5 .)
    FOR             reduce using rule 49 (exp_4 -> exp_5 .)
    OP_NOT          reduce using rule 49 (exp_4 -> exp_5 .)
    NOT             reduce using rule 49 (exp_4 -> exp_5 .)
    SIZEOF          reduce using rule 49 (exp_4 -> exp_5 .)
    INT_V           reduce using rule 49 (exp_4 -> exp_5 .)
    TRUE            reduce using rule 49 (exp_4 -> exp_5 .)
    FALSE           reduce using rule 49 (exp_4 -> exp_5 .)
    PARENT_ABRE     reduce using rule 49 (exp_4 -> exp_5 .)
    TYPEID          reduce using rule 49 (exp_4 -> exp_5 .)
    CHAVE_ABRE      reduce using rule 49 (exp_4 -> exp_5 .)
    ELSE            reduce using rule 49 (exp_4 -> exp_5 .)
    MENOR_Q         shift and go to state 80
    MAIOR_Q         shift and go to state 81
    MAIOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83


state 43

    (54) exp_5 -> exp_6 .
    (55) exp_6 -> exp_6 . SOMA exp_7
    (56) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 54 (exp_5 -> exp_6 .)
    MAIOR_Q         reduce using rule 54 (exp_5 -> exp_6 .)
    MAIOR_IGUAL     reduce using rule 54 (exp_5 -> exp_6 .)
    MENOR_IGUAL     reduce using rule 54 (exp_5 -> exp_6 .)
    IGUAL           reduce using rule 54 (exp_5 -> exp_6 .)
    DIFERENTE       reduce using rule 54 (exp_5 -> exp_6 .)
    OP_OU_EX        reduce using rule 54 (exp_5 -> exp_6 .)
    XOR             reduce using rule 54 (exp_5 -> exp_6 .)
    OP_E            reduce using rule 54 (exp_5 -> exp_6 .)
    AND             reduce using rule 54 (exp_5 -> exp_6 .)
    OP_OU           reduce using rule 54 (exp_5 -> exp_6 .)
    OR              reduce using rule 54 (exp_5 -> exp_6 .)
    PONTO_VIRG      reduce using rule 54 (exp_5 -> exp_6 .)
    RECEBER         reduce using rule 54 (exp_5 -> exp_6 .)
    VIRGULA         reduce using rule 54 (exp_5 -> exp_6 .)
    PARENT_FECHA    reduce using rule 54 (exp_5 -> exp_6 .)
    CHAVE_FECHA     reduce using rule 54 (exp_5 -> exp_6 .)
    CLASS           reduce using rule 54 (exp_5 -> exp_6 .)
    VOID            reduce using rule 54 (exp_5 -> exp_6 .)
    TYPEDEF         reduce using rule 54 (exp_5 -> exp_6 .)
    INT             reduce using rule 54 (exp_5 -> exp_6 .)
    BOOL            reduce using rule 54 (exp_5 -> exp_6 .)
    ID              reduce using rule 54 (exp_5 -> exp_6 .)
    STRING          reduce using rule 54 (exp_5 -> exp_6 .)
    $end            reduce using rule 54 (exp_5 -> exp_6 .)
    IF              reduce using rule 54 (exp_5 -> exp_6 .)
    RETURN          reduce using rule 54 (exp_5 -> exp_6 .)
    WHILE           reduce using rule 54 (exp_5 -> exp_6 .)
    FOR             reduce using rule 54 (exp_5 -> exp_6 .)
    OP_NOT          reduce using rule 54 (exp_5 -> exp_6 .)
    NOT             reduce using rule 54 (exp_5 -> exp_6 .)
    SIZEOF          reduce using rule 54 (exp_5 -> exp_6 .)
    INT_V           reduce using rule 54 (exp_5 -> exp_6 .)
    TRUE            reduce using rule 54 (exp_5 -> exp_6 .)
    FALSE           reduce using rule 54 (exp_5 -> exp_6 .)
    PARENT_ABRE     reduce using rule 54 (exp_5 -> exp_6 .)
    TYPEID          reduce using rule 54 (exp_5 -> exp_6 .)
    CHAVE_ABRE      reduce using rule 54 (exp_5 -> exp_6 .)
    ELSE            reduce using rule 54 (exp_5 -> exp_6 .)
    SOMA            shift and go to state 84
    SUB             shift and go to state 85


state 44

    (57) exp_6 -> exp_7 .
    (58) exp_7 -> exp_7 . MULT exp_8
    (59) exp_7 -> exp_7 . DIV exp_8
    (60) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 57 (exp_6 -> exp_7 .)
    SUB             reduce using rule 57 (exp_6 -> exp_7 .)
    MENOR_Q         reduce using rule 57 (exp_6 -> exp_7 .)
    MAIOR_Q         reduce using rule 57 (exp_6 -> exp_7 .)
    MAIOR_IGUAL     reduce using rule 57 (exp_6 -> exp_7 .)
    MENOR_IGUAL     reduce using rule 57 (exp_6 -> exp_7 .)
    IGUAL           reduce using rule 57 (exp_6 -> exp_7 .)
    DIFERENTE       reduce using rule 57 (exp_6 -> exp_7 .)
    OP_OU_EX        reduce using rule 57 (exp_6 -> exp_7 .)
    XOR             reduce using rule 57 (exp_6 -> exp_7 .)
    OP_E            reduce using rule 57 (exp_6 -> exp_7 .)
    AND             reduce using rule 57 (exp_6 -> exp_7 .)
    OP_OU           reduce using rule 57 (exp_6 -> exp_7 .)
    OR              reduce using rule 57 (exp_6 -> exp_7 .)
    PONTO_VIRG      reduce using rule 57 (exp_6 -> exp_7 .)
    RECEBER         reduce using rule 57 (exp_6 -> exp_7 .)
    VIRGULA         reduce using rule 57 (exp_6 -> exp_7 .)
    PARENT_FECHA    reduce using rule 57 (exp_6 -> exp_7 .)
    CHAVE_FECHA     reduce using rule 57 (exp_6 -> exp_7 .)
    CLASS           reduce using rule 57 (exp_6 -> exp_7 .)
    VOID            reduce using rule 57 (exp_6 -> exp_7 .)
    TYPEDEF         reduce using rule 57 (exp_6 -> exp_7 .)
    INT             reduce using rule 57 (exp_6 -> exp_7 .)
    BOOL            reduce using rule 57 (exp_6 -> exp_7 .)
    ID              reduce using rule 57 (exp_6 -> exp_7 .)
    STRING          reduce using rule 57 (exp_6 -> exp_7 .)
    $end            reduce using rule 57 (exp_6 -> exp_7 .)
    IF              reduce using rule 57 (exp_6 -> exp_7 .)
    RETURN          reduce using rule 57 (exp_6 -> exp_7 .)
    WHILE           reduce using rule 57 (exp_6 -> exp_7 .)
    FOR             reduce using rule 57 (exp_6 -> exp_7 .)
    OP_NOT          reduce using rule 57 (exp_6 -> exp_7 .)
    NOT             reduce using rule 57 (exp_6 -> exp_7 .)
    SIZEOF          reduce using rule 57 (exp_6 -> exp_7 .)
    INT_V           reduce using rule 57 (exp_6 -> exp_7 .)
    TRUE            reduce using rule 57 (exp_6 -> exp_7 .)
    FALSE           reduce using rule 57 (exp_6 -> exp_7 .)
    PARENT_ABRE     reduce using rule 57 (exp_6 -> exp_7 .)
    TYPEID          reduce using rule 57 (exp_6 -> exp_7 .)
    CHAVE_ABRE      reduce using rule 57 (exp_6 -> exp_7 .)
    ELSE            reduce using rule 57 (exp_6 -> exp_7 .)
    MULT            shift and go to state 86
    DIV             shift and go to state 87
    MODULO          shift and go to state 88


state 45

    (61) exp_7 -> exp_8 .

    MULT            reduce using rule 61 (exp_7 -> exp_8 .)
    DIV             reduce using rule 61 (exp_7 -> exp_8 .)
    MODULO          reduce using rule 61 (exp_7 -> exp_8 .)
    SOMA            reduce using rule 61 (exp_7 -> exp_8 .)
    SUB             reduce using rule 61 (exp_7 -> exp_8 .)
    MENOR_Q         reduce using rule 61 (exp_7 -> exp_8 .)
    MAIOR_Q         reduce using rule 61 (exp_7 -> exp_8 .)
    MAIOR_IGUAL     reduce using rule 61 (exp_7 -> exp_8 .)
    MENOR_IGUAL     reduce using rule 61 (exp_7 -> exp_8 .)
    IGUAL           reduce using rule 61 (exp_7 -> exp_8 .)
    DIFERENTE       reduce using rule 61 (exp_7 -> exp_8 .)
    OP_OU_EX        reduce using rule 61 (exp_7 -> exp_8 .)
    XOR             reduce using rule 61 (exp_7 -> exp_8 .)
    OP_E            reduce using rule 61 (exp_7 -> exp_8 .)
    AND             reduce using rule 61 (exp_7 -> exp_8 .)
    OP_OU           reduce using rule 61 (exp_7 -> exp_8 .)
    OR              reduce using rule 61 (exp_7 -> exp_8 .)
    PONTO_VIRG      reduce using rule 61 (exp_7 -> exp_8 .)
    RECEBER         reduce using rule 61 (exp_7 -> exp_8 .)
    VIRGULA         reduce using rule 61 (exp_7 -> exp_8 .)
    PARENT_FECHA    reduce using rule 61 (exp_7 -> exp_8 .)
    CHAVE_FECHA     reduce using rule 61 (exp_7 -> exp_8 .)
    CLASS           reduce using rule 61 (exp_7 -> exp_8 .)
    VOID            reduce using rule 61 (exp_7 -> exp_8 .)
    TYPEDEF         reduce using rule 61 (exp_7 -> exp_8 .)
    INT             reduce using rule 61 (exp_7 -> exp_8 .)
    BOOL            reduce using rule 61 (exp_7 -> exp_8 .)
    ID              reduce using rule 61 (exp_7 -> exp_8 .)
    STRING          reduce using rule 61 (exp_7 -> exp_8 .)
    $end            reduce using rule 61 (exp_7 -> exp_8 .)
    IF              reduce using rule 61 (exp_7 -> exp_8 .)
    RETURN          reduce using rule 61 (exp_7 -> exp_8 .)
    WHILE           reduce using rule 61 (exp_7 -> exp_8 .)
    FOR             reduce using rule 61 (exp_7 -> exp_8 .)
    OP_NOT          reduce using rule 61 (exp_7 -> exp_8 .)
    NOT             reduce using rule 61 (exp_7 -> exp_8 .)
    SIZEOF          reduce using rule 61 (exp_7 -> exp_8 .)
    INT_V           reduce using rule 61 (exp_7 -> exp_8 .)
    TRUE            reduce using rule 61 (exp_7 -> exp_8 .)
    FALSE           reduce using rule 61 (exp_7 -> exp_8 .)
    PARENT_ABRE     reduce using rule 61 (exp_7 -> exp_8 .)
    TYPEID          reduce using rule 61 (exp_7 -> exp_8 .)
    CHAVE_ABRE      reduce using rule 61 (exp_7 -> exp_8 .)
    ELSE            reduce using rule 61 (exp_7 -> exp_8 .)


state 46

    (62) exp_8 -> OP_NOT . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_9                          shift and go to state 89
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 47

    (64) exp_8 -> exp_9 . MAIS_MAIS
    (65) exp_8 -> exp_9 . MENOS_MENOS
    (67) exp_8 -> exp_9 .

    MAIS_MAIS       shift and go to state 90
    MENOS_MENOS     shift and go to state 91
    MULT            reduce using rule 67 (exp_8 -> exp_9 .)
    DIV             reduce using rule 67 (exp_8 -> exp_9 .)
    MODULO          reduce using rule 67 (exp_8 -> exp_9 .)
    SOMA            reduce using rule 67 (exp_8 -> exp_9 .)
    SUB             reduce using rule 67 (exp_8 -> exp_9 .)
    MENOR_Q         reduce using rule 67 (exp_8 -> exp_9 .)
    MAIOR_Q         reduce using rule 67 (exp_8 -> exp_9 .)
    MAIOR_IGUAL     reduce using rule 67 (exp_8 -> exp_9 .)
    MENOR_IGUAL     reduce using rule 67 (exp_8 -> exp_9 .)
    IGUAL           reduce using rule 67 (exp_8 -> exp_9 .)
    DIFERENTE       reduce using rule 67 (exp_8 -> exp_9 .)
    OP_OU_EX        reduce using rule 67 (exp_8 -> exp_9 .)
    XOR             reduce using rule 67 (exp_8 -> exp_9 .)
    OP_E            reduce using rule 67 (exp_8 -> exp_9 .)
    AND             reduce using rule 67 (exp_8 -> exp_9 .)
    OP_OU           reduce using rule 67 (exp_8 -> exp_9 .)
    OR              reduce using rule 67 (exp_8 -> exp_9 .)
    PONTO_VIRG      reduce using rule 67 (exp_8 -> exp_9 .)
    RECEBER         reduce using rule 67 (exp_8 -> exp_9 .)
    VIRGULA         reduce using rule 67 (exp_8 -> exp_9 .)
    PARENT_FECHA    reduce using rule 67 (exp_8 -> exp_9 .)
    CHAVE_FECHA     reduce using rule 67 (exp_8 -> exp_9 .)
    CLASS           reduce using rule 67 (exp_8 -> exp_9 .)
    VOID            reduce using rule 67 (exp_8 -> exp_9 .)
    TYPEDEF         reduce using rule 67 (exp_8 -> exp_9 .)
    INT             reduce using rule 67 (exp_8 -> exp_9 .)
    BOOL            reduce using rule 67 (exp_8 -> exp_9 .)
    ID              reduce using rule 67 (exp_8 -> exp_9 .)
    STRING          reduce using rule 67 (exp_8 -> exp_9 .)
    $end            reduce using rule 67 (exp_8 -> exp_9 .)
    IF              reduce using rule 67 (exp_8 -> exp_9 .)
    RETURN          reduce using rule 67 (exp_8 -> exp_9 .)
    WHILE           reduce using rule 67 (exp_8 -> exp_9 .)
    FOR             reduce using rule 67 (exp_8 -> exp_9 .)
    OP_NOT          reduce using rule 67 (exp_8 -> exp_9 .)
    NOT             reduce using rule 67 (exp_8 -> exp_9 .)
    SIZEOF          reduce using rule 67 (exp_8 -> exp_9 .)
    INT_V           reduce using rule 67 (exp_8 -> exp_9 .)
    TRUE            reduce using rule 67 (exp_8 -> exp_9 .)
    FALSE           reduce using rule 67 (exp_8 -> exp_9 .)
    PARENT_ABRE     reduce using rule 67 (exp_8 -> exp_9 .)
    TYPEID          reduce using rule 67 (exp_8 -> exp_9 .)
    CHAVE_ABRE      reduce using rule 67 (exp_8 -> exp_9 .)
    ELSE            reduce using rule 67 (exp_8 -> exp_9 .)


state 48

    (63) exp_8 -> NOT . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_9                          shift and go to state 92
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 49

    (66) exp_8 -> SIZEOF . PARENT_ABRE exp_9 PARENT_FECHA

    PARENT_ABRE     shift and go to state 93


state 50

    (74) exp_9 -> PARENT_ABRE . exp PARENT_FECHA
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 94
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 51

    (69) exp_9 -> INT_V .

    MAIS_MAIS       reduce using rule 69 (exp_9 -> INT_V .)
    MENOS_MENOS     reduce using rule 69 (exp_9 -> INT_V .)
    MULT            reduce using rule 69 (exp_9 -> INT_V .)
    DIV             reduce using rule 69 (exp_9 -> INT_V .)
    MODULO          reduce using rule 69 (exp_9 -> INT_V .)
    SOMA            reduce using rule 69 (exp_9 -> INT_V .)
    SUB             reduce using rule 69 (exp_9 -> INT_V .)
    MENOR_Q         reduce using rule 69 (exp_9 -> INT_V .)
    MAIOR_Q         reduce using rule 69 (exp_9 -> INT_V .)
    MAIOR_IGUAL     reduce using rule 69 (exp_9 -> INT_V .)
    MENOR_IGUAL     reduce using rule 69 (exp_9 -> INT_V .)
    IGUAL           reduce using rule 69 (exp_9 -> INT_V .)
    DIFERENTE       reduce using rule 69 (exp_9 -> INT_V .)
    OP_OU_EX        reduce using rule 69 (exp_9 -> INT_V .)
    XOR             reduce using rule 69 (exp_9 -> INT_V .)
    OP_E            reduce using rule 69 (exp_9 -> INT_V .)
    AND             reduce using rule 69 (exp_9 -> INT_V .)
    OP_OU           reduce using rule 69 (exp_9 -> INT_V .)
    OR              reduce using rule 69 (exp_9 -> INT_V .)
    PONTO_VIRG      reduce using rule 69 (exp_9 -> INT_V .)
    RECEBER         reduce using rule 69 (exp_9 -> INT_V .)
    VIRGULA         reduce using rule 69 (exp_9 -> INT_V .)
    PARENT_FECHA    reduce using rule 69 (exp_9 -> INT_V .)
    CHAVE_FECHA     reduce using rule 69 (exp_9 -> INT_V .)
    CLASS           reduce using rule 69 (exp_9 -> INT_V .)
    VOID            reduce using rule 69 (exp_9 -> INT_V .)
    TYPEDEF         reduce using rule 69 (exp_9 -> INT_V .)
    INT             reduce using rule 69 (exp_9 -> INT_V .)
    BOOL            reduce using rule 69 (exp_9 -> INT_V .)
    ID              reduce using rule 69 (exp_9 -> INT_V .)
    STRING          reduce using rule 69 (exp_9 -> INT_V .)
    $end            reduce using rule 69 (exp_9 -> INT_V .)
    IF              reduce using rule 69 (exp_9 -> INT_V .)
    RETURN          reduce using rule 69 (exp_9 -> INT_V .)
    WHILE           reduce using rule 69 (exp_9 -> INT_V .)
    FOR             reduce using rule 69 (exp_9 -> INT_V .)
    OP_NOT          reduce using rule 69 (exp_9 -> INT_V .)
    NOT             reduce using rule 69 (exp_9 -> INT_V .)
    SIZEOF          reduce using rule 69 (exp_9 -> INT_V .)
    INT_V           reduce using rule 69 (exp_9 -> INT_V .)
    TRUE            reduce using rule 69 (exp_9 -> INT_V .)
    FALSE           reduce using rule 69 (exp_9 -> INT_V .)
    PARENT_ABRE     reduce using rule 69 (exp_9 -> INT_V .)
    TYPEID          reduce using rule 69 (exp_9 -> INT_V .)
    CHAVE_ABRE      reduce using rule 69 (exp_9 -> INT_V .)
    ELSE            reduce using rule 69 (exp_9 -> INT_V .)


state 52

    (70) exp_9 -> TRUE .

    MAIS_MAIS       reduce using rule 70 (exp_9 -> TRUE .)
    MENOS_MENOS     reduce using rule 70 (exp_9 -> TRUE .)
    MULT            reduce using rule 70 (exp_9 -> TRUE .)
    DIV             reduce using rule 70 (exp_9 -> TRUE .)
    MODULO          reduce using rule 70 (exp_9 -> TRUE .)
    SOMA            reduce using rule 70 (exp_9 -> TRUE .)
    SUB             reduce using rule 70 (exp_9 -> TRUE .)
    MENOR_Q         reduce using rule 70 (exp_9 -> TRUE .)
    MAIOR_Q         reduce using rule 70 (exp_9 -> TRUE .)
    MAIOR_IGUAL     reduce using rule 70 (exp_9 -> TRUE .)
    MENOR_IGUAL     reduce using rule 70 (exp_9 -> TRUE .)
    IGUAL           reduce using rule 70 (exp_9 -> TRUE .)
    DIFERENTE       reduce using rule 70 (exp_9 -> TRUE .)
    OP_OU_EX        reduce using rule 70 (exp_9 -> TRUE .)
    XOR             reduce using rule 70 (exp_9 -> TRUE .)
    OP_E            reduce using rule 70 (exp_9 -> TRUE .)
    AND             reduce using rule 70 (exp_9 -> TRUE .)
    OP_OU           reduce using rule 70 (exp_9 -> TRUE .)
    OR              reduce using rule 70 (exp_9 -> TRUE .)
    PONTO_VIRG      reduce using rule 70 (exp_9 -> TRUE .)
    RECEBER         reduce using rule 70 (exp_9 -> TRUE .)
    VIRGULA         reduce using rule 70 (exp_9 -> TRUE .)
    PARENT_FECHA    reduce using rule 70 (exp_9 -> TRUE .)
    CHAVE_FECHA     reduce using rule 70 (exp_9 -> TRUE .)
    CLASS           reduce using rule 70 (exp_9 -> TRUE .)
    VOID            reduce using rule 70 (exp_9 -> TRUE .)
    TYPEDEF         reduce using rule 70 (exp_9 -> TRUE .)
    INT             reduce using rule 70 (exp_9 -> TRUE .)
    BOOL            reduce using rule 70 (exp_9 -> TRUE .)
    ID              reduce using rule 70 (exp_9 -> TRUE .)
    STRING          reduce using rule 70 (exp_9 -> TRUE .)
    $end            reduce using rule 70 (exp_9 -> TRUE .)
    IF              reduce using rule 70 (exp_9 -> TRUE .)
    RETURN          reduce using rule 70 (exp_9 -> TRUE .)
    WHILE           reduce using rule 70 (exp_9 -> TRUE .)
    FOR             reduce using rule 70 (exp_9 -> TRUE .)
    OP_NOT          reduce using rule 70 (exp_9 -> TRUE .)
    NOT             reduce using rule 70 (exp_9 -> TRUE .)
    SIZEOF          reduce using rule 70 (exp_9 -> TRUE .)
    INT_V           reduce using rule 70 (exp_9 -> TRUE .)
    TRUE            reduce using rule 70 (exp_9 -> TRUE .)
    FALSE           reduce using rule 70 (exp_9 -> TRUE .)
    PARENT_ABRE     reduce using rule 70 (exp_9 -> TRUE .)
    TYPEID          reduce using rule 70 (exp_9 -> TRUE .)
    CHAVE_ABRE      reduce using rule 70 (exp_9 -> TRUE .)
    ELSE            reduce using rule 70 (exp_9 -> TRUE .)


state 53

    (71) exp_9 -> FALSE .

    MAIS_MAIS       reduce using rule 71 (exp_9 -> FALSE .)
    MENOS_MENOS     reduce using rule 71 (exp_9 -> FALSE .)
    MULT            reduce using rule 71 (exp_9 -> FALSE .)
    DIV             reduce using rule 71 (exp_9 -> FALSE .)
    MODULO          reduce using rule 71 (exp_9 -> FALSE .)
    SOMA            reduce using rule 71 (exp_9 -> FALSE .)
    SUB             reduce using rule 71 (exp_9 -> FALSE .)
    MENOR_Q         reduce using rule 71 (exp_9 -> FALSE .)
    MAIOR_Q         reduce using rule 71 (exp_9 -> FALSE .)
    MAIOR_IGUAL     reduce using rule 71 (exp_9 -> FALSE .)
    MENOR_IGUAL     reduce using rule 71 (exp_9 -> FALSE .)
    IGUAL           reduce using rule 71 (exp_9 -> FALSE .)
    DIFERENTE       reduce using rule 71 (exp_9 -> FALSE .)
    OP_OU_EX        reduce using rule 71 (exp_9 -> FALSE .)
    XOR             reduce using rule 71 (exp_9 -> FALSE .)
    OP_E            reduce using rule 71 (exp_9 -> FALSE .)
    AND             reduce using rule 71 (exp_9 -> FALSE .)
    OP_OU           reduce using rule 71 (exp_9 -> FALSE .)
    OR              reduce using rule 71 (exp_9 -> FALSE .)
    PONTO_VIRG      reduce using rule 71 (exp_9 -> FALSE .)
    RECEBER         reduce using rule 71 (exp_9 -> FALSE .)
    VIRGULA         reduce using rule 71 (exp_9 -> FALSE .)
    PARENT_FECHA    reduce using rule 71 (exp_9 -> FALSE .)
    CHAVE_FECHA     reduce using rule 71 (exp_9 -> FALSE .)
    CLASS           reduce using rule 71 (exp_9 -> FALSE .)
    VOID            reduce using rule 71 (exp_9 -> FALSE .)
    TYPEDEF         reduce using rule 71 (exp_9 -> FALSE .)
    INT             reduce using rule 71 (exp_9 -> FALSE .)
    BOOL            reduce using rule 71 (exp_9 -> FALSE .)
    ID              reduce using rule 71 (exp_9 -> FALSE .)
    STRING          reduce using rule 71 (exp_9 -> FALSE .)
    $end            reduce using rule 71 (exp_9 -> FALSE .)
    IF              reduce using rule 71 (exp_9 -> FALSE .)
    RETURN          reduce using rule 71 (exp_9 -> FALSE .)
    WHILE           reduce using rule 71 (exp_9 -> FALSE .)
    FOR             reduce using rule 71 (exp_9 -> FALSE .)
    OP_NOT          reduce using rule 71 (exp_9 -> FALSE .)
    NOT             reduce using rule 71 (exp_9 -> FALSE .)
    SIZEOF          reduce using rule 71 (exp_9 -> FALSE .)
    INT_V           reduce using rule 71 (exp_9 -> FALSE .)
    TRUE            reduce using rule 71 (exp_9 -> FALSE .)
    FALSE           reduce using rule 71 (exp_9 -> FALSE .)
    PARENT_ABRE     reduce using rule 71 (exp_9 -> FALSE .)
    TYPEID          reduce using rule 71 (exp_9 -> FALSE .)
    CHAVE_ABRE      reduce using rule 71 (exp_9 -> FALSE .)
    ELSE            reduce using rule 71 (exp_9 -> FALSE .)


state 54

    (72) exp_9 -> chamada_funcao .

    MAIS_MAIS       reduce using rule 72 (exp_9 -> chamada_funcao .)
    MENOS_MENOS     reduce using rule 72 (exp_9 -> chamada_funcao .)
    MULT            reduce using rule 72 (exp_9 -> chamada_funcao .)
    DIV             reduce using rule 72 (exp_9 -> chamada_funcao .)
    MODULO          reduce using rule 72 (exp_9 -> chamada_funcao .)
    SOMA            reduce using rule 72 (exp_9 -> chamada_funcao .)
    SUB             reduce using rule 72 (exp_9 -> chamada_funcao .)
    MENOR_Q         reduce using rule 72 (exp_9 -> chamada_funcao .)
    MAIOR_Q         reduce using rule 72 (exp_9 -> chamada_funcao .)
    MAIOR_IGUAL     reduce using rule 72 (exp_9 -> chamada_funcao .)
    MENOR_IGUAL     reduce using rule 72 (exp_9 -> chamada_funcao .)
    IGUAL           reduce using rule 72 (exp_9 -> chamada_funcao .)
    DIFERENTE       reduce using rule 72 (exp_9 -> chamada_funcao .)
    OP_OU_EX        reduce using rule 72 (exp_9 -> chamada_funcao .)
    XOR             reduce using rule 72 (exp_9 -> chamada_funcao .)
    OP_E            reduce using rule 72 (exp_9 -> chamada_funcao .)
    AND             reduce using rule 72 (exp_9 -> chamada_funcao .)
    OP_OU           reduce using rule 72 (exp_9 -> chamada_funcao .)
    OR              reduce using rule 72 (exp_9 -> chamada_funcao .)
    PONTO_VIRG      reduce using rule 72 (exp_9 -> chamada_funcao .)
    RECEBER         reduce using rule 72 (exp_9 -> chamada_funcao .)
    VIRGULA         reduce using rule 72 (exp_9 -> chamada_funcao .)
    PARENT_FECHA    reduce using rule 72 (exp_9 -> chamada_funcao .)
    CHAVE_FECHA     reduce using rule 72 (exp_9 -> chamada_funcao .)
    CLASS           reduce using rule 72 (exp_9 -> chamada_funcao .)
    VOID            reduce using rule 72 (exp_9 -> chamada_funcao .)
    TYPEDEF         reduce using rule 72 (exp_9 -> chamada_funcao .)
    INT             reduce using rule 72 (exp_9 -> chamada_funcao .)
    BOOL            reduce using rule 72 (exp_9 -> chamada_funcao .)
    ID              reduce using rule 72 (exp_9 -> chamada_funcao .)
    STRING          reduce using rule 72 (exp_9 -> chamada_funcao .)
    $end            reduce using rule 72 (exp_9 -> chamada_funcao .)
    IF              reduce using rule 72 (exp_9 -> chamada_funcao .)
    RETURN          reduce using rule 72 (exp_9 -> chamada_funcao .)
    WHILE           reduce using rule 72 (exp_9 -> chamada_funcao .)
    FOR             reduce using rule 72 (exp_9 -> chamada_funcao .)
    OP_NOT          reduce using rule 72 (exp_9 -> chamada_funcao .)
    NOT             reduce using rule 72 (exp_9 -> chamada_funcao .)
    SIZEOF          reduce using rule 72 (exp_9 -> chamada_funcao .)
    INT_V           reduce using rule 72 (exp_9 -> chamada_funcao .)
    TRUE            reduce using rule 72 (exp_9 -> chamada_funcao .)
    FALSE           reduce using rule 72 (exp_9 -> chamada_funcao .)
    PARENT_ABRE     reduce using rule 72 (exp_9 -> chamada_funcao .)
    TYPEID          reduce using rule 72 (exp_9 -> chamada_funcao .)
    CHAVE_ABRE      reduce using rule 72 (exp_9 -> chamada_funcao .)
    ELSE            reduce using rule 72 (exp_9 -> chamada_funcao .)


state 55

    (77) chamada_funcao -> TYPEID . PARENT_ABRE exp PARENT_FECHA

    PARENT_ABRE     shift and go to state 95


state 56

    (25) decl_variavel_n -> VIRGULA ID . decl_variavel_n
    (26) decl_variavel_n -> VIRGULA ID . RECEBER exp decl_variavel_n
    (25) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (26) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (27) decl_variavel_n -> . PONTO_VIRG

    RECEBER         shift and go to state 97
    VIRGULA         shift and go to state 26
    PONTO_VIRG      shift and go to state 98

    decl_variavel_n                shift and go to state 96

state 57

    (16) decl_funcao -> VOID ID PARENT_ABRE VOID . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 99


state 58

    (14) decl_funcao -> VOID ID PARENT_ABRE parametros . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 100


state 59

    (15) decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 101

state 60

    (23) decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .
    (27) decl_variavel_n -> PONTO_VIRG .

  ! reduce/reduce conflict for CLASS resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for VOID resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for INT resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for BOOL resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for ID resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for STRING resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for $end resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for CHAVE_FECHA resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for IF resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for RETURN resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for CHAVE_ABRE resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for ELSE resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for PONTO_VIRG resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for OP_NOT resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for NOT resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for INT_V resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for TRUE resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for FALSE resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for PARENT_ABRE resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
  ! reduce/reduce conflict for TYPEID resolved using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    CLASS           reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    VOID            reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    TYPEDEF         reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    INT             reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    BOOL            reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    ID              reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    STRING          reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    $end            reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    IF              reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    RETURN          reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    WHILE           reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    FOR             reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    CHAVE_ABRE      reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    ELSE            reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    OP_NOT          reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    NOT             reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    SIZEOF          reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    INT_V           reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    TRUE            reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    FALSE           reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)
    TYPEID          reduce using rule 23 (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG .)

  ! CLASS           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! VOID            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TYPEDEF         [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! INT             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! BOOL            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! ID              [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! STRING          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! $end            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! CHAVE_FECHA     [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! IF              [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! RETURN          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! WHILE           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! FOR             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! CHAVE_ABRE      [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! ELSE            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! PONTO_VIRG      [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! OP_NOT          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! NOT             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! SIZEOF          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! INT_V           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TRUE            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! FALSE           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! PARENT_ABRE     [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TYPEID          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]


state 61

    (24) decl_variavel -> TYPEDEF tipo ID decl_variavel_n .

    CLASS           reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    VOID            reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    TYPEDEF         reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    INT             reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    BOOL            reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    ID              reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    STRING          reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    $end            reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    CHAVE_FECHA     reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    IF              reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    RETURN          reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    WHILE           reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    FOR             reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    CHAVE_ABRE      reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    ELSE            reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    PONTO_VIRG      reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    OP_NOT          reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    NOT             reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    SIZEOF          reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    INT_V           reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    TRUE            reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    FALSE           reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    PARENT_ABRE     reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)
    TYPEID          reduce using rule 24 (decl_variavel -> TYPEDEF tipo ID decl_variavel_n .)


state 62

    (8) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS . content_class CHAVE_FECHA
    (9) content_class -> . decl_variavel
    (10) content_class -> . decl_funcao
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (11) decl_funcao -> . tipo ID PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> . tipo ID PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> . tipo ID PARENT_ABRE VOID PARENT_FECHA body
    (14) decl_funcao -> . VOID ID PARENT_ABRE parametros PARENT_FECHA body
    (15) decl_funcao -> . VOID ID PARENT_ABRE PARENT_FECHA body
    (16) decl_funcao -> . VOID ID PARENT_ABRE VOID PARENT_FECHA body
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    TYPEDEF         shift and go to state 9
    VOID            shift and go to state 8
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    content_class                  shift and go to state 102
    decl_variavel                  shift and go to state 103
    decl_funcao                    shift and go to state 104
    tipo                           shift and go to state 105

state 63

    (17) parametros -> tipo ID .
    (18) parametros -> tipo ID . VIRGULA parametros

    PARENT_FECHA    reduce using rule 17 (parametros -> tipo ID .)
    VIRGULA         shift and go to state 106


state 64

    (11) decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 107

state 65

    (12) decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .

    CLASS           reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    VOID            reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    TYPEDEF         reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    INT             reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    BOOL            reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    ID              reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    STRING          reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    $end            reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 12 (decl_funcao -> tipo ID PARENT_ABRE PARENT_FECHA body .)


state 66

    (28) body -> CHAVE_ABRE . comandos CHAVE_FECHA
    (29) body -> CHAVE_ABRE . CHAVE_FECHA
    (30) body -> CHAVE_ABRE . comandos RETURN exp CHAVE_FECHA
    (31) body -> CHAVE_ABRE . CHAVE_FECHA RETURN exp
    (32) comandos -> . condicional_1
    (33) comandos -> . condicional_2
    (34) comandos -> . exp PONTO_VIRG comandos
    (35) comandos -> . exp PONTO_VIRG
    (78) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (79) condicional_1 -> . decl_variavel
    (80) condicional_1 -> . decl_variavel condicional_1
    (81) condicional_1 -> . repeticao
    (82) condicional_1 -> . repeticao condicional_1
    (83) condicional_1 -> . RETURN exp PONTO_VIRG
    (84) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body comandos
    (85) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (86) repeticao -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (87) repeticao -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    CHAVE_FECHA     shift and go to state 109
    IF              shift and go to state 114
    RETURN          shift and go to state 110
    TYPEDEF         shift and go to state 9
    WHILE           shift and go to state 119
    FOR             shift and go to state 120
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 118
    STRING          shift and go to state 12
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55

    comandos                       shift and go to state 108
    exp                            shift and go to state 111
    condicional_1                  shift and go to state 112
    condicional_2                  shift and go to state 113
    decl_variavel                  shift and go to state 115
    repeticao                      shift and go to state 116
    exp_1                          shift and go to state 38
    tipo                           shift and go to state 117
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54

state 67

    (13) decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 121

state 68

    (75) chamada_funcao -> ID PARENT_ABRE . parametros PARENT_FECHA
    (76) chamada_funcao -> ID PARENT_ABRE . PARENT_FECHA
    (17) parametros -> . tipo ID
    (18) parametros -> . tipo ID VIRGULA parametros
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PARENT_FECHA    shift and go to state 123
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    parametros                     shift and go to state 122
    tipo                           shift and go to state 31

state 69

    (36) exp -> exp RECEBER . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_1                          shift and go to state 124
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 70

    (20) decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .
    (27) decl_variavel_n -> PONTO_VIRG .

  ! reduce/reduce conflict for CLASS resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for VOID resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for TYPEDEF resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for INT resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for BOOL resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for ID resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for STRING resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for $end resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for CHAVE_FECHA resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for IF resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for RETURN resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for WHILE resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for FOR resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for CHAVE_ABRE resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for ELSE resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for PONTO_VIRG resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for OP_NOT resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for NOT resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for SIZEOF resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for INT_V resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for TRUE resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for FALSE resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for PARENT_ABRE resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
  ! reduce/reduce conflict for TYPEID resolved using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    CLASS           reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    VOID            reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TYPEDEF         reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    INT             reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    BOOL            reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    ID              reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    STRING          reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    $end            reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    IF              reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    RETURN          reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    WHILE           reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    FOR             reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    CHAVE_ABRE      reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    ELSE            reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    OP_NOT          reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    NOT             reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    SIZEOF          reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    INT_V           reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TRUE            reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    FALSE           reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)
    TYPEID          reduce using rule 20 (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG .)

  ! CLASS           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! VOID            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TYPEDEF         [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! INT             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! BOOL            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! ID              [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! STRING          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! $end            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! CHAVE_FECHA     [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! IF              [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! RETURN          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! WHILE           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! FOR             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! CHAVE_ABRE      [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! ELSE            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! PONTO_VIRG      [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! OP_NOT          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! NOT             [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! SIZEOF          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! INT_V           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TRUE            [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! FALSE           [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! PARENT_ABRE     [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]
  ! TYPEID          [ reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .) ]


state 71

    (22) decl_variavel -> tipo ID RECEBER exp decl_variavel_n .

    CLASS           reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    VOID            reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    TYPEDEF         reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    INT             reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    BOOL            reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    ID              reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    STRING          reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    $end            reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    CHAVE_FECHA     reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    IF              reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    RETURN          reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    WHILE           reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    FOR             reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    CHAVE_ABRE      reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    ELSE            reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    PONTO_VIRG      reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    OP_NOT          reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    NOT             reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    SIZEOF          reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    INT_V           reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    TRUE            reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    FALSE           reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    PARENT_ABRE     reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)
    TYPEID          reduce using rule 22 (decl_variavel -> tipo ID RECEBER exp decl_variavel_n .)


state 72

    (38) exp_1 -> exp_1 OP_OU . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_2                          shift and go to state 125
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 73

    (39) exp_1 -> exp_1 OR . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_2                          shift and go to state 126
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 74

    (41) exp_2 -> exp_2 OP_E . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_3                          shift and go to state 127
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 75

    (42) exp_2 -> exp_2 AND . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_3                          shift and go to state 128
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 76

    (44) exp_3 -> exp_3 OP_OU_EX . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_4                          shift and go to state 129
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 77

    (45) exp_3 -> exp_3 XOR . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_4                          shift and go to state 130
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 78

    (47) exp_4 -> exp_4 IGUAL . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_5                          shift and go to state 131
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 79

    (48) exp_4 -> exp_4 DIFERENTE . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_5                          shift and go to state 132
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 80

    (50) exp_5 -> exp_5 MENOR_Q . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_6                          shift and go to state 133
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 81

    (51) exp_5 -> exp_5 MAIOR_Q . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_6                          shift and go to state 134
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 82

    (52) exp_5 -> exp_5 MAIOR_IGUAL . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_6                          shift and go to state 135
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 83

    (53) exp_5 -> exp_5 MENOR_IGUAL . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_6                          shift and go to state 136
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 84

    (55) exp_6 -> exp_6 SOMA . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_7                          shift and go to state 137
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 85

    (56) exp_6 -> exp_6 SUB . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_7                          shift and go to state 138
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 86

    (58) exp_7 -> exp_7 MULT . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_8                          shift and go to state 139
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 87

    (59) exp_7 -> exp_7 DIV . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_8                          shift and go to state 140
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 88

    (60) exp_7 -> exp_7 MODULO . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_8                          shift and go to state 141
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 89

    (62) exp_8 -> OP_NOT exp_9 .

    MULT            reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    DIV             reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    MODULO          reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    SOMA            reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    SUB             reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    MENOR_Q         reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    MAIOR_Q         reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    MAIOR_IGUAL     reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    MENOR_IGUAL     reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    IGUAL           reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    DIFERENTE       reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    OP_OU_EX        reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    XOR             reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    OP_E            reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    AND             reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    OP_OU           reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    OR              reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    PONTO_VIRG      reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    RECEBER         reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    VIRGULA         reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    PARENT_FECHA    reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    CHAVE_FECHA     reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    CLASS           reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    VOID            reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    TYPEDEF         reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    INT             reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    BOOL            reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    ID              reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    STRING          reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    $end            reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    IF              reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    RETURN          reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    WHILE           reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    FOR             reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    OP_NOT          reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    NOT             reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    SIZEOF          reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    INT_V           reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    TRUE            reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    FALSE           reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    PARENT_ABRE     reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    TYPEID          reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    CHAVE_ABRE      reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)
    ELSE            reduce using rule 62 (exp_8 -> OP_NOT exp_9 .)


state 90

    (64) exp_8 -> exp_9 MAIS_MAIS .

    MULT            reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    DIV             reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    MODULO          reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    SOMA            reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    SUB             reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    MENOR_Q         reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    MAIOR_Q         reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    MAIOR_IGUAL     reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    MENOR_IGUAL     reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    IGUAL           reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    DIFERENTE       reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_OU_EX        reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    XOR             reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_E            reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    AND             reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_OU           reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    OR              reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    PONTO_VIRG      reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    RECEBER         reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    VIRGULA         reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    PARENT_FECHA    reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    CHAVE_FECHA     reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    CLASS           reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    VOID            reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    TYPEDEF         reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    INT             reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    BOOL            reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    ID              reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    STRING          reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    $end            reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    IF              reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    RETURN          reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    WHILE           reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    FOR             reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    OP_NOT          reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    NOT             reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    SIZEOF          reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    INT_V           reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    TRUE            reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    FALSE           reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    PARENT_ABRE     reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    TYPEID          reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    CHAVE_ABRE      reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)
    ELSE            reduce using rule 64 (exp_8 -> exp_9 MAIS_MAIS .)


state 91

    (65) exp_8 -> exp_9 MENOS_MENOS .

    MULT            reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    DIV             reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    MODULO          reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    SOMA            reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    SUB             reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    MENOR_Q         reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    MAIOR_Q         reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    MAIOR_IGUAL     reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    MENOR_IGUAL     reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    IGUAL           reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    DIFERENTE       reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_OU_EX        reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    XOR             reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_E            reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    AND             reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_OU           reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    OR              reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    PONTO_VIRG      reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    RECEBER         reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    VIRGULA         reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    PARENT_FECHA    reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    CHAVE_FECHA     reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    CLASS           reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    VOID            reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    TYPEDEF         reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    INT             reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    BOOL            reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    ID              reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    STRING          reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    $end            reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    IF              reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    RETURN          reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    WHILE           reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    FOR             reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    OP_NOT          reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    NOT             reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    SIZEOF          reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    INT_V           reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    TRUE            reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    FALSE           reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    PARENT_ABRE     reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    TYPEID          reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    CHAVE_ABRE      reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)
    ELSE            reduce using rule 65 (exp_8 -> exp_9 MENOS_MENOS .)


state 92

    (63) exp_8 -> NOT exp_9 .

    MULT            reduce using rule 63 (exp_8 -> NOT exp_9 .)
    DIV             reduce using rule 63 (exp_8 -> NOT exp_9 .)
    MODULO          reduce using rule 63 (exp_8 -> NOT exp_9 .)
    SOMA            reduce using rule 63 (exp_8 -> NOT exp_9 .)
    SUB             reduce using rule 63 (exp_8 -> NOT exp_9 .)
    MENOR_Q         reduce using rule 63 (exp_8 -> NOT exp_9 .)
    MAIOR_Q         reduce using rule 63 (exp_8 -> NOT exp_9 .)
    MAIOR_IGUAL     reduce using rule 63 (exp_8 -> NOT exp_9 .)
    MENOR_IGUAL     reduce using rule 63 (exp_8 -> NOT exp_9 .)
    IGUAL           reduce using rule 63 (exp_8 -> NOT exp_9 .)
    DIFERENTE       reduce using rule 63 (exp_8 -> NOT exp_9 .)
    OP_OU_EX        reduce using rule 63 (exp_8 -> NOT exp_9 .)
    XOR             reduce using rule 63 (exp_8 -> NOT exp_9 .)
    OP_E            reduce using rule 63 (exp_8 -> NOT exp_9 .)
    AND             reduce using rule 63 (exp_8 -> NOT exp_9 .)
    OP_OU           reduce using rule 63 (exp_8 -> NOT exp_9 .)
    OR              reduce using rule 63 (exp_8 -> NOT exp_9 .)
    PONTO_VIRG      reduce using rule 63 (exp_8 -> NOT exp_9 .)
    RECEBER         reduce using rule 63 (exp_8 -> NOT exp_9 .)
    VIRGULA         reduce using rule 63 (exp_8 -> NOT exp_9 .)
    PARENT_FECHA    reduce using rule 63 (exp_8 -> NOT exp_9 .)
    CHAVE_FECHA     reduce using rule 63 (exp_8 -> NOT exp_9 .)
    CLASS           reduce using rule 63 (exp_8 -> NOT exp_9 .)
    VOID            reduce using rule 63 (exp_8 -> NOT exp_9 .)
    TYPEDEF         reduce using rule 63 (exp_8 -> NOT exp_9 .)
    INT             reduce using rule 63 (exp_8 -> NOT exp_9 .)
    BOOL            reduce using rule 63 (exp_8 -> NOT exp_9 .)
    ID              reduce using rule 63 (exp_8 -> NOT exp_9 .)
    STRING          reduce using rule 63 (exp_8 -> NOT exp_9 .)
    $end            reduce using rule 63 (exp_8 -> NOT exp_9 .)
    IF              reduce using rule 63 (exp_8 -> NOT exp_9 .)
    RETURN          reduce using rule 63 (exp_8 -> NOT exp_9 .)
    WHILE           reduce using rule 63 (exp_8 -> NOT exp_9 .)
    FOR             reduce using rule 63 (exp_8 -> NOT exp_9 .)
    OP_NOT          reduce using rule 63 (exp_8 -> NOT exp_9 .)
    NOT             reduce using rule 63 (exp_8 -> NOT exp_9 .)
    SIZEOF          reduce using rule 63 (exp_8 -> NOT exp_9 .)
    INT_V           reduce using rule 63 (exp_8 -> NOT exp_9 .)
    TRUE            reduce using rule 63 (exp_8 -> NOT exp_9 .)
    FALSE           reduce using rule 63 (exp_8 -> NOT exp_9 .)
    PARENT_ABRE     reduce using rule 63 (exp_8 -> NOT exp_9 .)
    TYPEID          reduce using rule 63 (exp_8 -> NOT exp_9 .)
    CHAVE_ABRE      reduce using rule 63 (exp_8 -> NOT exp_9 .)
    ELSE            reduce using rule 63 (exp_8 -> NOT exp_9 .)


state 93

    (66) exp_8 -> SIZEOF PARENT_ABRE . exp_9 PARENT_FECHA
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp_9                          shift and go to state 142
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 94

    (74) exp_9 -> PARENT_ABRE exp . PARENT_FECHA
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 143
    RECEBER         shift and go to state 69


state 95

    (77) chamada_funcao -> TYPEID PARENT_ABRE . exp PARENT_FECHA
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 144
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 96

    (25) decl_variavel_n -> VIRGULA ID decl_variavel_n .

    CLASS           reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    VOID            reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    TYPEDEF         reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    INT             reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    BOOL            reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    ID              reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    STRING          reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    $end            reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    CHAVE_FECHA     reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    IF              reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    RETURN          reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    WHILE           reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    FOR             reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    CHAVE_ABRE      reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    ELSE            reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    PONTO_VIRG      reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    OP_NOT          reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    NOT             reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    SIZEOF          reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    INT_V           reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    TRUE            reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    FALSE           reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    PARENT_ABRE     reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)
    TYPEID          reduce using rule 25 (decl_variavel_n -> VIRGULA ID decl_variavel_n .)


state 97

    (26) decl_variavel_n -> VIRGULA ID RECEBER . exp decl_variavel_n
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 145
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 98

    (27) decl_variavel_n -> PONTO_VIRG .

    CLASS           reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    VOID            reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    TYPEDEF         reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    INT             reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    BOOL            reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    ID              reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    STRING          reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    $end            reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    CHAVE_FECHA     reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    IF              reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    RETURN          reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    WHILE           reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    FOR             reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    CHAVE_ABRE      reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    ELSE            reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    PONTO_VIRG      reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    OP_NOT          reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    NOT             reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    SIZEOF          reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    INT_V           reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    TRUE            reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    FALSE           reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    PARENT_ABRE     reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)
    TYPEID          reduce using rule 27 (decl_variavel_n -> PONTO_VIRG .)


state 99

    (16) decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 146

state 100

    (14) decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 147

state 101

    (15) decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .

    CLASS           reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    VOID            reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    TYPEDEF         reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    INT             reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    BOOL            reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    ID              reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    STRING          reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    $end            reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 15 (decl_funcao -> VOID ID PARENT_ABRE PARENT_FECHA body .)


state 102

    (8) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class . CHAVE_FECHA

    CHAVE_FECHA     shift and go to state 148


state 103

    (9) content_class -> decl_variavel .

    CHAVE_FECHA     reduce using rule 9 (content_class -> decl_variavel .)


state 104

    (10) content_class -> decl_funcao .

    CHAVE_FECHA     reduce using rule 10 (content_class -> decl_funcao .)


state 105

    (19) decl_variavel -> tipo . ID PONTO_VIRG
    (20) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> tipo . ID decl_variavel_n
    (22) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n
    (11) decl_funcao -> tipo . ID PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> tipo . ID PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> tipo . ID PARENT_ABRE VOID PARENT_FECHA body

    ID              shift and go to state 149


state 106

    (18) parametros -> tipo ID VIRGULA . parametros
    (17) parametros -> . tipo ID
    (18) parametros -> . tipo ID VIRGULA parametros
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    tipo                           shift and go to state 31
    parametros                     shift and go to state 150

state 107

    (11) decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .

    CLASS           reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    VOID            reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    TYPEDEF         reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    INT             reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    BOOL            reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    ID              reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    STRING          reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    $end            reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 11 (decl_funcao -> tipo ID PARENT_ABRE parametros PARENT_FECHA body .)


state 108

    (28) body -> CHAVE_ABRE comandos . CHAVE_FECHA
    (30) body -> CHAVE_ABRE comandos . RETURN exp CHAVE_FECHA

    CHAVE_FECHA     shift and go to state 151
    RETURN          shift and go to state 152


state 109

    (29) body -> CHAVE_ABRE CHAVE_FECHA .
    (31) body -> CHAVE_ABRE CHAVE_FECHA . RETURN exp

  ! shift/reduce conflict for RETURN resolved as shift
    CLASS           reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    VOID            reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TYPEDEF         reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    INT             reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    BOOL            reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    ID              reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    STRING          reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    $end            reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    CHAVE_FECHA     reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    IF              reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    WHILE           reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    FOR             reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    OP_NOT          reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    NOT             reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    SIZEOF          reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    INT_V           reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TRUE            reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    FALSE           reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    PARENT_ABRE     reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    TYPEID          reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    CHAVE_ABRE      reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    ELSE            reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .)
    RETURN          shift and go to state 153

  ! RETURN          [ reduce using rule 29 (body -> CHAVE_ABRE CHAVE_FECHA .) ]


state 110

    (83) condicional_1 -> RETURN . exp PONTO_VIRG
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 154
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 111

    (34) comandos -> exp . PONTO_VIRG comandos
    (35) comandos -> exp . PONTO_VIRG
    (36) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 155
    RECEBER         shift and go to state 69


state 112

    (32) comandos -> condicional_1 .

    CHAVE_FECHA     reduce using rule 32 (comandos -> condicional_1 .)
    RETURN          reduce using rule 32 (comandos -> condicional_1 .)


state 113

    (33) comandos -> condicional_2 .

    CHAVE_FECHA     reduce using rule 33 (comandos -> condicional_2 .)
    RETURN          reduce using rule 33 (comandos -> condicional_2 .)


state 114

    (78) condicional_1 -> IF . PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (84) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body comandos
    (85) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2

    PARENT_ABRE     shift and go to state 156


state 115

    (79) condicional_1 -> decl_variavel .
    (80) condicional_1 -> decl_variavel . condicional_1
    (78) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (79) condicional_1 -> . decl_variavel
    (80) condicional_1 -> . decl_variavel condicional_1
    (81) condicional_1 -> . repeticao
    (82) condicional_1 -> . repeticao condicional_1
    (83) condicional_1 -> . RETURN exp PONTO_VIRG
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (86) repeticao -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (87) repeticao -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

  ! shift/reduce conflict for RETURN resolved as shift
    CHAVE_FECHA     reduce using rule 79 (condicional_1 -> decl_variavel .)
    CHAVE_ABRE      reduce using rule 79 (condicional_1 -> decl_variavel .)
    ELSE            reduce using rule 79 (condicional_1 -> decl_variavel .)
    IF              shift and go to state 158
    RETURN          shift and go to state 110
    TYPEDEF         shift and go to state 9
    WHILE           shift and go to state 119
    FOR             shift and go to state 120
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

  ! RETURN          [ reduce using rule 79 (condicional_1 -> decl_variavel .) ]

    decl_variavel                  shift and go to state 115
    condicional_1                  shift and go to state 157
    repeticao                      shift and go to state 116
    tipo                           shift and go to state 159

state 116

    (81) condicional_1 -> repeticao .
    (82) condicional_1 -> repeticao . condicional_1
    (78) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (79) condicional_1 -> . decl_variavel
    (80) condicional_1 -> . decl_variavel condicional_1
    (81) condicional_1 -> . repeticao
    (82) condicional_1 -> . repeticao condicional_1
    (83) condicional_1 -> . RETURN exp PONTO_VIRG
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (86) repeticao -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (87) repeticao -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

  ! shift/reduce conflict for RETURN resolved as shift
    CHAVE_FECHA     reduce using rule 81 (condicional_1 -> repeticao .)
    CHAVE_ABRE      reduce using rule 81 (condicional_1 -> repeticao .)
    ELSE            reduce using rule 81 (condicional_1 -> repeticao .)
    IF              shift and go to state 158
    RETURN          shift and go to state 110
    TYPEDEF         shift and go to state 9
    WHILE           shift and go to state 119
    FOR             shift and go to state 120
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

  ! RETURN          [ reduce using rule 81 (condicional_1 -> repeticao .) ]

    repeticao                      shift and go to state 116
    condicional_1                  shift and go to state 160
    decl_variavel                  shift and go to state 115
    tipo                           shift and go to state 159

state 117

    (19) decl_variavel -> tipo . ID PONTO_VIRG
    (20) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> tipo . ID decl_variavel_n
    (22) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n
    (73) exp_9 -> tipo .

    ID              shift and go to state 161
    MAIS_MAIS       reduce using rule 73 (exp_9 -> tipo .)
    MENOS_MENOS     reduce using rule 73 (exp_9 -> tipo .)
    MULT            reduce using rule 73 (exp_9 -> tipo .)
    DIV             reduce using rule 73 (exp_9 -> tipo .)
    MODULO          reduce using rule 73 (exp_9 -> tipo .)
    SOMA            reduce using rule 73 (exp_9 -> tipo .)
    SUB             reduce using rule 73 (exp_9 -> tipo .)
    MENOR_Q         reduce using rule 73 (exp_9 -> tipo .)
    MAIOR_Q         reduce using rule 73 (exp_9 -> tipo .)
    MAIOR_IGUAL     reduce using rule 73 (exp_9 -> tipo .)
    MENOR_IGUAL     reduce using rule 73 (exp_9 -> tipo .)
    IGUAL           reduce using rule 73 (exp_9 -> tipo .)
    DIFERENTE       reduce using rule 73 (exp_9 -> tipo .)
    OP_OU_EX        reduce using rule 73 (exp_9 -> tipo .)
    XOR             reduce using rule 73 (exp_9 -> tipo .)
    OP_E            reduce using rule 73 (exp_9 -> tipo .)
    AND             reduce using rule 73 (exp_9 -> tipo .)
    OP_OU           reduce using rule 73 (exp_9 -> tipo .)
    OR              reduce using rule 73 (exp_9 -> tipo .)
    PONTO_VIRG      reduce using rule 73 (exp_9 -> tipo .)
    RECEBER         reduce using rule 73 (exp_9 -> tipo .)


state 118

    (98) tipo -> ID .
    (68) exp_9 -> ID .
    (75) chamada_funcao -> ID . PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> ID . PARENT_ABRE PARENT_FECHA

  ! reduce/reduce conflict for MAIS_MAIS resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MENOS_MENOS resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MULT resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for DIV resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MODULO resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for SOMA resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for SUB resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MENOR_Q resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MAIOR_Q resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MAIOR_IGUAL resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for MENOR_IGUAL resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for IGUAL resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OP_OU_EX resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for XOR resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OP_E resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OP_OU resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for PONTO_VIRG resolved using rule 68 (exp_9 -> ID .)
  ! reduce/reduce conflict for RECEBER resolved using rule 68 (exp_9 -> ID .)
    ID              reduce using rule 98 (tipo -> ID .)
    MAIS_MAIS       reduce using rule 68 (exp_9 -> ID .)
    MENOS_MENOS     reduce using rule 68 (exp_9 -> ID .)
    MULT            reduce using rule 68 (exp_9 -> ID .)
    DIV             reduce using rule 68 (exp_9 -> ID .)
    MODULO          reduce using rule 68 (exp_9 -> ID .)
    SOMA            reduce using rule 68 (exp_9 -> ID .)
    SUB             reduce using rule 68 (exp_9 -> ID .)
    MENOR_Q         reduce using rule 68 (exp_9 -> ID .)
    MAIOR_Q         reduce using rule 68 (exp_9 -> ID .)
    MAIOR_IGUAL     reduce using rule 68 (exp_9 -> ID .)
    MENOR_IGUAL     reduce using rule 68 (exp_9 -> ID .)
    IGUAL           reduce using rule 68 (exp_9 -> ID .)
    DIFERENTE       reduce using rule 68 (exp_9 -> ID .)
    OP_OU_EX        reduce using rule 68 (exp_9 -> ID .)
    XOR             reduce using rule 68 (exp_9 -> ID .)
    OP_E            reduce using rule 68 (exp_9 -> ID .)
    AND             reduce using rule 68 (exp_9 -> ID .)
    OP_OU           reduce using rule 68 (exp_9 -> ID .)
    OR              reduce using rule 68 (exp_9 -> ID .)
    PONTO_VIRG      reduce using rule 68 (exp_9 -> ID .)
    RECEBER         reduce using rule 68 (exp_9 -> ID .)
    PARENT_ABRE     shift and go to state 68

  ! MAIS_MAIS       [ reduce using rule 98 (tipo -> ID .) ]
  ! MENOS_MENOS     [ reduce using rule 98 (tipo -> ID .) ]
  ! MULT            [ reduce using rule 98 (tipo -> ID .) ]
  ! DIV             [ reduce using rule 98 (tipo -> ID .) ]
  ! MODULO          [ reduce using rule 98 (tipo -> ID .) ]
  ! SOMA            [ reduce using rule 98 (tipo -> ID .) ]
  ! SUB             [ reduce using rule 98 (tipo -> ID .) ]
  ! MENOR_Q         [ reduce using rule 98 (tipo -> ID .) ]
  ! MAIOR_Q         [ reduce using rule 98 (tipo -> ID .) ]
  ! MAIOR_IGUAL     [ reduce using rule 98 (tipo -> ID .) ]
  ! MENOR_IGUAL     [ reduce using rule 98 (tipo -> ID .) ]
  ! IGUAL           [ reduce using rule 98 (tipo -> ID .) ]
  ! DIFERENTE       [ reduce using rule 98 (tipo -> ID .) ]
  ! OP_OU_EX        [ reduce using rule 98 (tipo -> ID .) ]
  ! XOR             [ reduce using rule 98 (tipo -> ID .) ]
  ! OP_E            [ reduce using rule 98 (tipo -> ID .) ]
  ! AND             [ reduce using rule 98 (tipo -> ID .) ]
  ! OP_OU           [ reduce using rule 98 (tipo -> ID .) ]
  ! OR              [ reduce using rule 98 (tipo -> ID .) ]
  ! PONTO_VIRG      [ reduce using rule 98 (tipo -> ID .) ]
  ! RECEBER         [ reduce using rule 98 (tipo -> ID .) ]


state 119

    (86) repeticao -> WHILE . PARENT_ABRE exp PARENT_FECHA body

    PARENT_ABRE     shift and go to state 162


state 120

    (87) repeticao -> FOR . PARENT_ABRE for_log PARENT_FECHA body

    PARENT_ABRE     shift and go to state 163


state 121

    (13) decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .

    CLASS           reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    VOID            reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    TYPEDEF         reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    INT             reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    BOOL            reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    ID              reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    STRING          reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    $end            reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 13 (decl_funcao -> tipo ID PARENT_ABRE VOID PARENT_FECHA body .)


state 122

    (75) chamada_funcao -> ID PARENT_ABRE parametros . PARENT_FECHA

    PARENT_FECHA    shift and go to state 164


state 123

    (76) chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .

    MAIS_MAIS       reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MULT            reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    DIV             reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MODULO          reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SOMA            reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SUB             reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOR_Q         reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MAIOR_Q         reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    IGUAL           reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    DIFERENTE       reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_OU_EX        reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    XOR             reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_E            reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    AND             reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_OU           reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OR              reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    RECEBER         reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    VIRGULA         reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    CHAVE_FECHA     reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    CLASS           reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    VOID            reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    TYPEDEF         reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    INT             reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    BOOL            reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    ID              reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    STRING          reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    $end            reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    IF              reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    RETURN          reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    WHILE           reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    FOR             reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    OP_NOT          reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    NOT             reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    SIZEOF          reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    INT_V           reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    TRUE            reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    FALSE           reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    PARENT_ABRE     reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    TYPEID          reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    CHAVE_ABRE      reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)
    ELSE            reduce using rule 76 (chamada_funcao -> ID PARENT_ABRE PARENT_FECHA .)


state 124

    (36) exp -> exp RECEBER exp_1 .
    (38) exp_1 -> exp_1 . OP_OU exp_2
    (39) exp_1 -> exp_1 . OR exp_2

    PONTO_VIRG      reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    RECEBER         reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    VIRGULA         reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    PARENT_FECHA    reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    CHAVE_FECHA     reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    CLASS           reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    VOID            reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    TYPEDEF         reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    INT             reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    BOOL            reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    ID              reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    STRING          reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    $end            reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    IF              reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    RETURN          reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    WHILE           reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    FOR             reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    OP_NOT          reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    NOT             reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    SIZEOF          reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    INT_V           reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    TRUE            reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    FALSE           reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    PARENT_ABRE     reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    TYPEID          reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    CHAVE_ABRE      reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    ELSE            reduce using rule 36 (exp -> exp RECEBER exp_1 .)
    OP_OU           shift and go to state 72
    OR              shift and go to state 73


state 125

    (38) exp_1 -> exp_1 OP_OU exp_2 .
    (41) exp_2 -> exp_2 . OP_E exp_3
    (42) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    OR              reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    PONTO_VIRG      reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    RECEBER         reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    VIRGULA         reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    PARENT_FECHA    reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    CHAVE_FECHA     reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    CLASS           reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    VOID            reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    TYPEDEF         reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    INT             reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    BOOL            reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    ID              reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    STRING          reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    $end            reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    IF              reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    RETURN          reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    WHILE           reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    FOR             reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    OP_NOT          reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    NOT             reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    SIZEOF          reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    INT_V           reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    TRUE            reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    FALSE           reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    PARENT_ABRE     reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    TYPEID          reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    CHAVE_ABRE      reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    ELSE            reduce using rule 38 (exp_1 -> exp_1 OP_OU exp_2 .)
    OP_E            shift and go to state 74
    AND             shift and go to state 75


state 126

    (39) exp_1 -> exp_1 OR exp_2 .
    (41) exp_2 -> exp_2 . OP_E exp_3
    (42) exp_2 -> exp_2 . AND exp_3

    OP_OU           reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    OR              reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    PONTO_VIRG      reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    RECEBER         reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    VIRGULA         reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    PARENT_FECHA    reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    CHAVE_FECHA     reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    CLASS           reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    VOID            reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    TYPEDEF         reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    INT             reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    BOOL            reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    ID              reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    STRING          reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    $end            reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    IF              reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    RETURN          reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    WHILE           reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    FOR             reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    OP_NOT          reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    NOT             reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    SIZEOF          reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    INT_V           reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    TRUE            reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    FALSE           reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    PARENT_ABRE     reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    TYPEID          reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    CHAVE_ABRE      reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    ELSE            reduce using rule 39 (exp_1 -> exp_1 OR exp_2 .)
    OP_E            shift and go to state 74
    AND             shift and go to state 75


state 127

    (41) exp_2 -> exp_2 OP_E exp_3 .
    (44) exp_3 -> exp_3 . OP_OU_EX exp_4
    (45) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    AND             reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    OP_OU           reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    OR              reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    PONTO_VIRG      reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    RECEBER         reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    VIRGULA         reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    PARENT_FECHA    reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    CHAVE_FECHA     reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    CLASS           reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    VOID            reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    TYPEDEF         reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    INT             reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    BOOL            reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    ID              reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    STRING          reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    $end            reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    IF              reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    RETURN          reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    WHILE           reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    FOR             reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    OP_NOT          reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    NOT             reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    SIZEOF          reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    INT_V           reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    TRUE            reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    FALSE           reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    PARENT_ABRE     reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    TYPEID          reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    CHAVE_ABRE      reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    ELSE            reduce using rule 41 (exp_2 -> exp_2 OP_E exp_3 .)
    OP_OU_EX        shift and go to state 76
    XOR             shift and go to state 77


state 128

    (42) exp_2 -> exp_2 AND exp_3 .
    (44) exp_3 -> exp_3 . OP_OU_EX exp_4
    (45) exp_3 -> exp_3 . XOR exp_4

    OP_E            reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    AND             reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    OP_OU           reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    OR              reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    PONTO_VIRG      reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    RECEBER         reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    VIRGULA         reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    PARENT_FECHA    reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    CHAVE_FECHA     reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    CLASS           reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    VOID            reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    TYPEDEF         reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    INT             reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    BOOL            reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    ID              reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    STRING          reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    $end            reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    IF              reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    RETURN          reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    WHILE           reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    FOR             reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    OP_NOT          reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    NOT             reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    SIZEOF          reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    INT_V           reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    TRUE            reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    FALSE           reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    PARENT_ABRE     reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    TYPEID          reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    CHAVE_ABRE      reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    ELSE            reduce using rule 42 (exp_2 -> exp_2 AND exp_3 .)
    OP_OU_EX        shift and go to state 76
    XOR             shift and go to state 77


state 129

    (44) exp_3 -> exp_3 OP_OU_EX exp_4 .
    (47) exp_4 -> exp_4 . IGUAL exp_5
    (48) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    XOR             reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OP_E            reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    AND             reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OP_OU           reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OR              reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    PONTO_VIRG      reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    RECEBER         reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    VIRGULA         reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    PARENT_FECHA    reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    CHAVE_FECHA     reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    CLASS           reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    VOID            reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    TYPEDEF         reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    INT             reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    BOOL            reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    ID              reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    STRING          reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    $end            reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    IF              reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    RETURN          reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    WHILE           reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    FOR             reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    OP_NOT          reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    NOT             reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    SIZEOF          reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    INT_V           reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    TRUE            reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    FALSE           reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    PARENT_ABRE     reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    TYPEID          reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    CHAVE_ABRE      reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    ELSE            reduce using rule 44 (exp_3 -> exp_3 OP_OU_EX exp_4 .)
    IGUAL           shift and go to state 78
    DIFERENTE       shift and go to state 79


state 130

    (45) exp_3 -> exp_3 XOR exp_4 .
    (47) exp_4 -> exp_4 . IGUAL exp_5
    (48) exp_4 -> exp_4 . DIFERENTE exp_5

    OP_OU_EX        reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    XOR             reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    OP_E            reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    AND             reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    OP_OU           reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    OR              reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    PONTO_VIRG      reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    RECEBER         reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    VIRGULA         reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    PARENT_FECHA    reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    CHAVE_FECHA     reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    CLASS           reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    VOID            reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    TYPEDEF         reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    INT             reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    BOOL            reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    ID              reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    STRING          reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    $end            reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    IF              reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    RETURN          reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    WHILE           reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    FOR             reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    OP_NOT          reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    NOT             reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    SIZEOF          reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    INT_V           reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    TRUE            reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    FALSE           reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    PARENT_ABRE     reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    TYPEID          reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    CHAVE_ABRE      reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    ELSE            reduce using rule 45 (exp_3 -> exp_3 XOR exp_4 .)
    IGUAL           shift and go to state 78
    DIFERENTE       shift and go to state 79


state 131

    (47) exp_4 -> exp_4 IGUAL exp_5 .
    (50) exp_5 -> exp_5 . MENOR_Q exp_6
    (51) exp_5 -> exp_5 . MAIOR_Q exp_6
    (52) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (53) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    DIFERENTE       reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_OU_EX        reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    XOR             reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_E            reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    AND             reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_OU           reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    OR              reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    PONTO_VIRG      reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    RECEBER         reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    VIRGULA         reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    PARENT_FECHA    reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    CHAVE_FECHA     reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    CLASS           reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    VOID            reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    TYPEDEF         reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    INT             reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    BOOL            reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    ID              reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    STRING          reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    $end            reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    IF              reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    RETURN          reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    WHILE           reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    FOR             reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    OP_NOT          reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    NOT             reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    SIZEOF          reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    INT_V           reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    TRUE            reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    FALSE           reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    PARENT_ABRE     reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    TYPEID          reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    CHAVE_ABRE      reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    ELSE            reduce using rule 47 (exp_4 -> exp_4 IGUAL exp_5 .)
    MENOR_Q         shift and go to state 80
    MAIOR_Q         shift and go to state 81
    MAIOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83


state 132

    (48) exp_4 -> exp_4 DIFERENTE exp_5 .
    (50) exp_5 -> exp_5 . MENOR_Q exp_6
    (51) exp_5 -> exp_5 . MAIOR_Q exp_6
    (52) exp_5 -> exp_5 . MAIOR_IGUAL exp_6
    (53) exp_5 -> exp_5 . MENOR_IGUAL exp_6

    IGUAL           reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    DIFERENTE       reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_OU_EX        reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    XOR             reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_E            reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    AND             reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_OU           reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OR              reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    PONTO_VIRG      reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    RECEBER         reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    VIRGULA         reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    PARENT_FECHA    reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    CHAVE_FECHA     reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    CLASS           reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    VOID            reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    TYPEDEF         reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    INT             reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    BOOL            reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    ID              reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    STRING          reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    $end            reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    IF              reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    RETURN          reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    WHILE           reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    FOR             reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    OP_NOT          reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    NOT             reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    SIZEOF          reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    INT_V           reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    TRUE            reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    FALSE           reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    PARENT_ABRE     reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    TYPEID          reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    CHAVE_ABRE      reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    ELSE            reduce using rule 48 (exp_4 -> exp_4 DIFERENTE exp_5 .)
    MENOR_Q         shift and go to state 80
    MAIOR_Q         shift and go to state 81
    MAIOR_IGUAL     shift and go to state 82
    MENOR_IGUAL     shift and go to state 83


state 133

    (50) exp_5 -> exp_5 MENOR_Q exp_6 .
    (55) exp_6 -> exp_6 . SOMA exp_7
    (56) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MAIOR_Q         reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MAIOR_IGUAL     reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    MENOR_IGUAL     reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    IGUAL           reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    DIFERENTE       reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_OU_EX        reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    XOR             reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_E            reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    AND             reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_OU           reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OR              reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    PONTO_VIRG      reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    RECEBER         reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    VIRGULA         reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    PARENT_FECHA    reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    CHAVE_FECHA     reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    CLASS           reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    VOID            reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    TYPEDEF         reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    INT             reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    BOOL            reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    ID              reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    STRING          reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    $end            reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    IF              reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    RETURN          reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    WHILE           reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    FOR             reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    OP_NOT          reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    NOT             reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    SIZEOF          reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    INT_V           reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    TRUE            reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    FALSE           reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    PARENT_ABRE     reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    TYPEID          reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    CHAVE_ABRE      reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    ELSE            reduce using rule 50 (exp_5 -> exp_5 MENOR_Q exp_6 .)
    SOMA            shift and go to state 84
    SUB             shift and go to state 85


state 134

    (51) exp_5 -> exp_5 MAIOR_Q exp_6 .
    (55) exp_6 -> exp_6 . SOMA exp_7
    (56) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MAIOR_Q         reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MAIOR_IGUAL     reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    MENOR_IGUAL     reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    IGUAL           reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    DIFERENTE       reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_OU_EX        reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    XOR             reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_E            reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    AND             reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_OU           reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OR              reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    PONTO_VIRG      reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    RECEBER         reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    VIRGULA         reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    PARENT_FECHA    reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    CHAVE_FECHA     reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    CLASS           reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    VOID            reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    TYPEDEF         reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    INT             reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    BOOL            reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    ID              reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    STRING          reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    $end            reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    IF              reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    RETURN          reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    WHILE           reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    FOR             reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    OP_NOT          reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    NOT             reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    SIZEOF          reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    INT_V           reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    TRUE            reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    FALSE           reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    PARENT_ABRE     reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    TYPEID          reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    CHAVE_ABRE      reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    ELSE            reduce using rule 51 (exp_5 -> exp_5 MAIOR_Q exp_6 .)
    SOMA            shift and go to state 84
    SUB             shift and go to state 85


state 135

    (52) exp_5 -> exp_5 MAIOR_IGUAL exp_6 .
    (55) exp_6 -> exp_6 . SOMA exp_7
    (56) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MAIOR_Q         reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MAIOR_IGUAL     reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    MENOR_IGUAL     reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    IGUAL           reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    DIFERENTE       reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_OU_EX        reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    XOR             reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_E            reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    AND             reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_OU           reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OR              reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    PONTO_VIRG      reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    RECEBER         reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    VIRGULA         reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    PARENT_FECHA    reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    CHAVE_FECHA     reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    CLASS           reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    VOID            reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    TYPEDEF         reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    INT             reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    BOOL            reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    ID              reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    STRING          reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    $end            reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    IF              reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    RETURN          reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    WHILE           reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    FOR             reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    OP_NOT          reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    NOT             reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    SIZEOF          reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    INT_V           reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    TRUE            reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    FALSE           reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    PARENT_ABRE     reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    TYPEID          reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    CHAVE_ABRE      reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    ELSE            reduce using rule 52 (exp_5 -> exp_5 MAIOR_IGUAL exp_6 .)
    SOMA            shift and go to state 84
    SUB             shift and go to state 85


state 136

    (53) exp_5 -> exp_5 MENOR_IGUAL exp_6 .
    (55) exp_6 -> exp_6 . SOMA exp_7
    (56) exp_6 -> exp_6 . SUB exp_7

    MENOR_Q         reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MAIOR_Q         reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MAIOR_IGUAL     reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    MENOR_IGUAL     reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    IGUAL           reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    DIFERENTE       reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_OU_EX        reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    XOR             reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_E            reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    AND             reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_OU           reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OR              reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    PONTO_VIRG      reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    RECEBER         reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    VIRGULA         reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    PARENT_FECHA    reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    CHAVE_FECHA     reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    CLASS           reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    VOID            reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    TYPEDEF         reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    INT             reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    BOOL            reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    ID              reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    STRING          reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    $end            reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    IF              reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    RETURN          reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    WHILE           reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    FOR             reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    OP_NOT          reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    NOT             reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    SIZEOF          reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    INT_V           reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    TRUE            reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    FALSE           reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    PARENT_ABRE     reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    TYPEID          reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    CHAVE_ABRE      reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    ELSE            reduce using rule 53 (exp_5 -> exp_5 MENOR_IGUAL exp_6 .)
    SOMA            shift and go to state 84
    SUB             shift and go to state 85


state 137

    (55) exp_6 -> exp_6 SOMA exp_7 .
    (58) exp_7 -> exp_7 . MULT exp_8
    (59) exp_7 -> exp_7 . DIV exp_8
    (60) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    SUB             reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    MENOR_Q         reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    MAIOR_Q         reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    MAIOR_IGUAL     reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    MENOR_IGUAL     reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    IGUAL           reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    DIFERENTE       reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_OU_EX        reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    XOR             reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_E            reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    AND             reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_OU           reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    OR              reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    PONTO_VIRG      reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    RECEBER         reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    VIRGULA         reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    PARENT_FECHA    reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    CHAVE_FECHA     reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    CLASS           reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    VOID            reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    TYPEDEF         reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    INT             reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    BOOL            reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    ID              reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    STRING          reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    $end            reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    IF              reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    RETURN          reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    WHILE           reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    FOR             reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    OP_NOT          reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    NOT             reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    SIZEOF          reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    INT_V           reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    TRUE            reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    FALSE           reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    PARENT_ABRE     reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    TYPEID          reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    CHAVE_ABRE      reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    ELSE            reduce using rule 55 (exp_6 -> exp_6 SOMA exp_7 .)
    MULT            shift and go to state 86
    DIV             shift and go to state 87
    MODULO          shift and go to state 88


state 138

    (56) exp_6 -> exp_6 SUB exp_7 .
    (58) exp_7 -> exp_7 . MULT exp_8
    (59) exp_7 -> exp_7 . DIV exp_8
    (60) exp_7 -> exp_7 . MODULO exp_8

    SOMA            reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    SUB             reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    MENOR_Q         reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    MAIOR_Q         reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    MAIOR_IGUAL     reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    MENOR_IGUAL     reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    IGUAL           reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    DIFERENTE       reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    OP_OU_EX        reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    XOR             reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    OP_E            reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    AND             reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    OP_OU           reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    OR              reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    PONTO_VIRG      reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    RECEBER         reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    VIRGULA         reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    PARENT_FECHA    reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    CHAVE_FECHA     reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    CLASS           reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    VOID            reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    TYPEDEF         reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    INT             reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    BOOL            reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    ID              reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    STRING          reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    $end            reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    IF              reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    RETURN          reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    WHILE           reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    FOR             reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    OP_NOT          reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    NOT             reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    SIZEOF          reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    INT_V           reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    TRUE            reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    FALSE           reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    PARENT_ABRE     reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    TYPEID          reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    CHAVE_ABRE      reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    ELSE            reduce using rule 56 (exp_6 -> exp_6 SUB exp_7 .)
    MULT            shift and go to state 86
    DIV             shift and go to state 87
    MODULO          shift and go to state 88


state 139

    (58) exp_7 -> exp_7 MULT exp_8 .

    MULT            reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    DIV             reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    MODULO          reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    SOMA            reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    SUB             reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    MENOR_Q         reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    MAIOR_Q         reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    MAIOR_IGUAL     reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    MENOR_IGUAL     reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    IGUAL           reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    DIFERENTE       reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    OP_OU_EX        reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    XOR             reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    OP_E            reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    AND             reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    OP_OU           reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    OR              reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    PONTO_VIRG      reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    RECEBER         reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    VIRGULA         reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    PARENT_FECHA    reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    CHAVE_FECHA     reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    CLASS           reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    VOID            reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    TYPEDEF         reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    INT             reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    BOOL            reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    ID              reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    STRING          reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    $end            reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    IF              reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    RETURN          reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    WHILE           reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    FOR             reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    OP_NOT          reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    NOT             reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    SIZEOF          reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    INT_V           reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    TRUE            reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    FALSE           reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    PARENT_ABRE     reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    TYPEID          reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    CHAVE_ABRE      reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)
    ELSE            reduce using rule 58 (exp_7 -> exp_7 MULT exp_8 .)


state 140

    (59) exp_7 -> exp_7 DIV exp_8 .

    MULT            reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    DIV             reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    MODULO          reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    SOMA            reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    SUB             reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    MENOR_Q         reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    MAIOR_Q         reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    MAIOR_IGUAL     reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    MENOR_IGUAL     reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    IGUAL           reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    DIFERENTE       reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    OP_OU_EX        reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    XOR             reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    OP_E            reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    AND             reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    OP_OU           reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    OR              reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    PONTO_VIRG      reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    RECEBER         reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    VIRGULA         reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    PARENT_FECHA    reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    CHAVE_FECHA     reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    CLASS           reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    VOID            reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    TYPEDEF         reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    INT             reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    BOOL            reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    ID              reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    STRING          reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    $end            reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    IF              reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    RETURN          reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    WHILE           reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    FOR             reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    OP_NOT          reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    NOT             reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    SIZEOF          reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    INT_V           reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    TRUE            reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    FALSE           reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    PARENT_ABRE     reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    TYPEID          reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    CHAVE_ABRE      reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)
    ELSE            reduce using rule 59 (exp_7 -> exp_7 DIV exp_8 .)


state 141

    (60) exp_7 -> exp_7 MODULO exp_8 .

    MULT            reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    DIV             reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    MODULO          reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    SOMA            reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    SUB             reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    MENOR_Q         reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    MAIOR_Q         reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    MAIOR_IGUAL     reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    MENOR_IGUAL     reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    IGUAL           reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    DIFERENTE       reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_OU_EX        reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    XOR             reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_E            reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    AND             reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_OU           reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    OR              reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    PONTO_VIRG      reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    RECEBER         reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    VIRGULA         reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    PARENT_FECHA    reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    CHAVE_FECHA     reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    CLASS           reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    VOID            reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    TYPEDEF         reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    INT             reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    BOOL            reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    ID              reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    STRING          reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    $end            reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    IF              reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    RETURN          reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    WHILE           reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    FOR             reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    OP_NOT          reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    NOT             reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    SIZEOF          reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    INT_V           reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    TRUE            reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    FALSE           reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    PARENT_ABRE     reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    TYPEID          reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    CHAVE_ABRE      reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)
    ELSE            reduce using rule 60 (exp_7 -> exp_7 MODULO exp_8 .)


state 142

    (66) exp_8 -> SIZEOF PARENT_ABRE exp_9 . PARENT_FECHA

    PARENT_FECHA    shift and go to state 165


state 143

    (74) exp_9 -> PARENT_ABRE exp PARENT_FECHA .

    MAIS_MAIS       reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    MULT            reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    DIV             reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    MODULO          reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    SOMA            reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    SUB             reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOR_Q         reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_Q         reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    IGUAL           reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    DIFERENTE       reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_OU_EX        reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    XOR             reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_E            reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    AND             reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_OU           reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    OR              reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    RECEBER         reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    VIRGULA         reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    CHAVE_FECHA     reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    CLASS           reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    VOID            reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    TYPEDEF         reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    INT             reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    BOOL            reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    ID              reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    STRING          reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    $end            reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    IF              reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    RETURN          reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    WHILE           reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    FOR             reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    OP_NOT          reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    NOT             reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    SIZEOF          reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    INT_V           reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    TRUE            reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    FALSE           reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    PARENT_ABRE     reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    TYPEID          reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    CHAVE_ABRE      reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)
    ELSE            reduce using rule 74 (exp_9 -> PARENT_ABRE exp PARENT_FECHA .)


state 144

    (77) chamada_funcao -> TYPEID PARENT_ABRE exp . PARENT_FECHA
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 166
    RECEBER         shift and go to state 69


state 145

    (26) decl_variavel_n -> VIRGULA ID RECEBER exp . decl_variavel_n
    (36) exp -> exp . RECEBER exp_1
    (25) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (26) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (27) decl_variavel_n -> . PONTO_VIRG

    RECEBER         shift and go to state 69
    VIRGULA         shift and go to state 26
    PONTO_VIRG      shift and go to state 98

    decl_variavel_n                shift and go to state 167

state 146

    (16) decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .

    CLASS           reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    VOID            reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    TYPEDEF         reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    INT             reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    BOOL            reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    ID              reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    STRING          reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    $end            reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 16 (decl_funcao -> VOID ID PARENT_ABRE VOID PARENT_FECHA body .)


state 147

    (14) decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .

    CLASS           reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    VOID            reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    TYPEDEF         reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    INT             reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    BOOL            reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    ID              reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    STRING          reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    $end            reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 14 (decl_funcao -> VOID ID PARENT_ABRE parametros PARENT_FECHA body .)


state 148

    (8) body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA .

    PONTO_VIRG      reduce using rule 8 (body_class -> CHAVE_ABRE PUBLIC DOIS_PONTOS content_class CHAVE_FECHA .)


state 149

    (19) decl_variavel -> tipo ID . PONTO_VIRG
    (20) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (21) decl_variavel -> tipo ID . decl_variavel_n
    (22) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n
    (11) decl_funcao -> tipo ID . PARENT_ABRE parametros PARENT_FECHA body
    (12) decl_funcao -> tipo ID . PARENT_ABRE PARENT_FECHA body
    (13) decl_funcao -> tipo ID . PARENT_ABRE VOID PARENT_FECHA body
    (25) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (26) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (27) decl_variavel_n -> . PONTO_VIRG

    PONTO_VIRG      shift and go to state 23
    RECEBER         shift and go to state 24
    PARENT_ABRE     shift and go to state 22
    VIRGULA         shift and go to state 26

    decl_variavel_n                shift and go to state 25

state 150

    (18) parametros -> tipo ID VIRGULA parametros .

    PARENT_FECHA    reduce using rule 18 (parametros -> tipo ID VIRGULA parametros .)


state 151

    (28) body -> CHAVE_ABRE comandos CHAVE_FECHA .

    CLASS           reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    VOID            reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TYPEDEF         reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    INT             reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    BOOL            reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    ID              reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    STRING          reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    $end            reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    CHAVE_FECHA     reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    IF              reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    RETURN          reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    WHILE           reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    FOR             reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    OP_NOT          reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    NOT             reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    SIZEOF          reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    INT_V           reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TRUE            reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    FALSE           reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    PARENT_ABRE     reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    TYPEID          reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    CHAVE_ABRE      reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)
    ELSE            reduce using rule 28 (body -> CHAVE_ABRE comandos CHAVE_FECHA .)


state 152

    (30) body -> CHAVE_ABRE comandos RETURN . exp CHAVE_FECHA
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 168
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 153

    (31) body -> CHAVE_ABRE CHAVE_FECHA RETURN . exp
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 169
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 154

    (83) condicional_1 -> RETURN exp . PONTO_VIRG
    (36) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 170
    RECEBER         shift and go to state 69


state 155

    (34) comandos -> exp PONTO_VIRG . comandos
    (35) comandos -> exp PONTO_VIRG .
    (32) comandos -> . condicional_1
    (33) comandos -> . condicional_2
    (34) comandos -> . exp PONTO_VIRG comandos
    (35) comandos -> . exp PONTO_VIRG
    (78) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (79) condicional_1 -> . decl_variavel
    (80) condicional_1 -> . decl_variavel condicional_1
    (81) condicional_1 -> . repeticao
    (82) condicional_1 -> . repeticao condicional_1
    (83) condicional_1 -> . RETURN exp PONTO_VIRG
    (84) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body comandos
    (85) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (86) repeticao -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (87) repeticao -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

  ! shift/reduce conflict for RETURN resolved as shift
    CHAVE_FECHA     reduce using rule 35 (comandos -> exp PONTO_VIRG .)
    IF              shift and go to state 114
    RETURN          shift and go to state 110
    TYPEDEF         shift and go to state 9
    WHILE           shift and go to state 119
    FOR             shift and go to state 120
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 118
    STRING          shift and go to state 12
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55

  ! RETURN          [ reduce using rule 35 (comandos -> exp PONTO_VIRG .) ]

    exp                            shift and go to state 111
    comandos                       shift and go to state 171
    condicional_1                  shift and go to state 112
    condicional_2                  shift and go to state 113
    decl_variavel                  shift and go to state 115
    repeticao                      shift and go to state 116
    exp_1                          shift and go to state 38
    tipo                           shift and go to state 117
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54

state 156

    (78) condicional_1 -> IF PARENT_ABRE . exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (84) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body comandos
    (85) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body condicional_1 ELSE body condicional_2
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 172
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 157

    (80) condicional_1 -> decl_variavel condicional_1 .

    CHAVE_FECHA     reduce using rule 80 (condicional_1 -> decl_variavel condicional_1 .)
    RETURN          reduce using rule 80 (condicional_1 -> decl_variavel condicional_1 .)
    CHAVE_ABRE      reduce using rule 80 (condicional_1 -> decl_variavel condicional_1 .)
    ELSE            reduce using rule 80 (condicional_1 -> decl_variavel condicional_1 .)


state 158

    (78) condicional_1 -> IF . PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body

    PARENT_ABRE     shift and go to state 173


state 159

    (19) decl_variavel -> tipo . ID PONTO_VIRG
    (20) decl_variavel -> tipo . ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> tipo . ID decl_variavel_n
    (22) decl_variavel -> tipo . ID RECEBER exp decl_variavel_n

    ID              shift and go to state 161


state 160

    (82) condicional_1 -> repeticao condicional_1 .

    CHAVE_FECHA     reduce using rule 82 (condicional_1 -> repeticao condicional_1 .)
    RETURN          reduce using rule 82 (condicional_1 -> repeticao condicional_1 .)
    CHAVE_ABRE      reduce using rule 82 (condicional_1 -> repeticao condicional_1 .)
    ELSE            reduce using rule 82 (condicional_1 -> repeticao condicional_1 .)


state 161

    (19) decl_variavel -> tipo ID . PONTO_VIRG
    (20) decl_variavel -> tipo ID . RECEBER exp PONTO_VIRG
    (21) decl_variavel -> tipo ID . decl_variavel_n
    (22) decl_variavel -> tipo ID . RECEBER exp decl_variavel_n
    (25) decl_variavel_n -> . VIRGULA ID decl_variavel_n
    (26) decl_variavel_n -> . VIRGULA ID RECEBER exp decl_variavel_n
    (27) decl_variavel_n -> . PONTO_VIRG

    PONTO_VIRG      shift and go to state 23
    RECEBER         shift and go to state 24
    VIRGULA         shift and go to state 26

    decl_variavel_n                shift and go to state 25

state 162

    (86) repeticao -> WHILE PARENT_ABRE . exp PARENT_FECHA body
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 174
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 163

    (87) repeticao -> FOR PARENT_ABRE . for_log PARENT_FECHA body
    (88) for_log -> . decl_variavel PONTO_VIRG
    (89) for_log -> . decl_variavel exp PONTO_VIRG
    (90) for_log -> . decl_variavel exp PONTO_VIRG exp
    (91) for_log -> . decl_variavel PONTO_VIRG exp
    (92) for_log -> . PONTO_VIRG exp PONTO_VIRG exp
    (93) for_log -> . PONTO_VIRG exp PONTO_VIRG
    (94) for_log -> . PONTO_VIRG PONTO_VIRG exp
    (95) for_log -> . PONTO_VIRG PONTO_VIRG
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PONTO_VIRG      shift and go to state 177
    TYPEDEF         shift and go to state 9
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    for_log                        shift and go to state 175
    decl_variavel                  shift and go to state 176
    tipo                           shift and go to state 159

state 164

    (75) chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .

    MAIS_MAIS       reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    MULT            reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    DIV             reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    MODULO          reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    SOMA            reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    SUB             reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    MENOR_Q         reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    MAIOR_Q         reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    IGUAL           reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    DIFERENTE       reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    OP_OU_EX        reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    XOR             reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    OP_E            reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    AND             reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    OP_OU           reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    OR              reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    RECEBER         reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    VIRGULA         reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    CHAVE_FECHA     reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    CLASS           reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    VOID            reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    TYPEDEF         reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    INT             reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    BOOL            reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    ID              reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    STRING          reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    $end            reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    IF              reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    RETURN          reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    WHILE           reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    FOR             reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    OP_NOT          reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    NOT             reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    SIZEOF          reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    INT_V           reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    TRUE            reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    FALSE           reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    PARENT_ABRE     reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    TYPEID          reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    CHAVE_ABRE      reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)
    ELSE            reduce using rule 75 (chamada_funcao -> ID PARENT_ABRE parametros PARENT_FECHA .)


state 165

    (66) exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .

    MULT            reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    DIV             reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MODULO          reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    SOMA            reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    SUB             reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MENOR_Q         reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MAIOR_Q         reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    IGUAL           reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    DIFERENTE       reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_OU_EX        reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    XOR             reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_E            reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    AND             reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_OU           reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OR              reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    RECEBER         reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    VIRGULA         reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    CHAVE_FECHA     reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    CLASS           reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    VOID            reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    TYPEDEF         reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    INT             reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    BOOL            reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    ID              reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    STRING          reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    $end            reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    IF              reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    RETURN          reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    WHILE           reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    FOR             reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    OP_NOT          reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    NOT             reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    SIZEOF          reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    INT_V           reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    TRUE            reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    FALSE           reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    PARENT_ABRE     reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    TYPEID          reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    CHAVE_ABRE      reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)
    ELSE            reduce using rule 66 (exp_8 -> SIZEOF PARENT_ABRE exp_9 PARENT_FECHA .)


state 166

    (77) chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .

    MAIS_MAIS       reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOS_MENOS     reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MULT            reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    DIV             reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MODULO          reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SOMA            reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SUB             reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOR_Q         reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_Q         reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MAIOR_IGUAL     reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    MENOR_IGUAL     reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    IGUAL           reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    DIFERENTE       reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_OU_EX        reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    XOR             reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_E            reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    AND             reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_OU           reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OR              reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PONTO_VIRG      reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    RECEBER         reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    VIRGULA         reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PARENT_FECHA    reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    CHAVE_FECHA     reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    CLASS           reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    VOID            reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    TYPEDEF         reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    INT             reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    BOOL            reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    ID              reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    STRING          reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    $end            reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    IF              reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    RETURN          reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    WHILE           reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    FOR             reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    OP_NOT          reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    NOT             reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    SIZEOF          reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    INT_V           reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    TRUE            reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    FALSE           reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    PARENT_ABRE     reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    TYPEID          reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    CHAVE_ABRE      reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)
    ELSE            reduce using rule 77 (chamada_funcao -> TYPEID PARENT_ABRE exp PARENT_FECHA .)


state 167

    (26) decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .

    CLASS           reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    VOID            reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    TYPEDEF         reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    INT             reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    BOOL            reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    ID              reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    STRING          reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    $end            reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    CHAVE_FECHA     reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    IF              reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    RETURN          reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    WHILE           reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    FOR             reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    CHAVE_ABRE      reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    ELSE            reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    PONTO_VIRG      reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    OP_NOT          reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    NOT             reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    SIZEOF          reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    INT_V           reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    TRUE            reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    FALSE           reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    PARENT_ABRE     reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)
    TYPEID          reduce using rule 26 (decl_variavel_n -> VIRGULA ID RECEBER exp decl_variavel_n .)


state 168

    (30) body -> CHAVE_ABRE comandos RETURN exp . CHAVE_FECHA
    (36) exp -> exp . RECEBER exp_1

    CHAVE_FECHA     shift and go to state 178
    RECEBER         shift and go to state 69


state 169

    (31) body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .
    (36) exp -> exp . RECEBER exp_1

    CLASS           reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    VOID            reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    TYPEDEF         reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    INT             reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    BOOL            reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    ID              reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    STRING          reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    $end            reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    CHAVE_FECHA     reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    IF              reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    RETURN          reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    WHILE           reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    FOR             reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    OP_NOT          reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    NOT             reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    SIZEOF          reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    INT_V           reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    TRUE            reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    FALSE           reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    PARENT_ABRE     reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    TYPEID          reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    CHAVE_ABRE      reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    ELSE            reduce using rule 31 (body -> CHAVE_ABRE CHAVE_FECHA RETURN exp .)
    RECEBER         shift and go to state 69


state 170

    (83) condicional_1 -> RETURN exp PONTO_VIRG .

    CHAVE_FECHA     reduce using rule 83 (condicional_1 -> RETURN exp PONTO_VIRG .)
    RETURN          reduce using rule 83 (condicional_1 -> RETURN exp PONTO_VIRG .)
    CHAVE_ABRE      reduce using rule 83 (condicional_1 -> RETURN exp PONTO_VIRG .)
    ELSE            reduce using rule 83 (condicional_1 -> RETURN exp PONTO_VIRG .)


state 171

    (34) comandos -> exp PONTO_VIRG comandos .

    CHAVE_FECHA     reduce using rule 34 (comandos -> exp PONTO_VIRG comandos .)
    RETURN          reduce using rule 34 (comandos -> exp PONTO_VIRG comandos .)


state 172

    (78) condicional_1 -> IF PARENT_ABRE exp . PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (84) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body comandos
    (85) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body condicional_1 ELSE body condicional_2
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 179
    RECEBER         shift and go to state 69


state 173

    (78) condicional_1 -> IF PARENT_ABRE . exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 180
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 174

    (86) repeticao -> WHILE PARENT_ABRE exp . PARENT_FECHA body
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 181
    RECEBER         shift and go to state 69


state 175

    (87) repeticao -> FOR PARENT_ABRE for_log . PARENT_FECHA body

    PARENT_FECHA    shift and go to state 182


state 176

    (88) for_log -> decl_variavel . PONTO_VIRG
    (89) for_log -> decl_variavel . exp PONTO_VIRG
    (90) for_log -> decl_variavel . exp PONTO_VIRG exp
    (91) for_log -> decl_variavel . PONTO_VIRG exp
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PONTO_VIRG      shift and go to state 183
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 184
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 177

    (92) for_log -> PONTO_VIRG . exp PONTO_VIRG exp
    (93) for_log -> PONTO_VIRG . exp PONTO_VIRG
    (94) for_log -> PONTO_VIRG . PONTO_VIRG exp
    (95) for_log -> PONTO_VIRG . PONTO_VIRG
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PONTO_VIRG      shift and go to state 185
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 186
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 178

    (30) body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .

    CLASS           reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    VOID            reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    TYPEDEF         reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    INT             reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    BOOL            reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    ID              reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    STRING          reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    $end            reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    CHAVE_FECHA     reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    IF              reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    RETURN          reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    WHILE           reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    FOR             reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    OP_NOT          reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    NOT             reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    SIZEOF          reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    INT_V           reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    TRUE            reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    FALSE           reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    PARENT_ABRE     reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    TYPEID          reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    CHAVE_ABRE      reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)
    ELSE            reduce using rule 30 (body -> CHAVE_ABRE comandos RETURN exp CHAVE_FECHA .)


state 179

    (78) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA . condicional_1 body ELSE condicional_1 body
    (84) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body comandos
    (85) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body condicional_1 ELSE body condicional_2
    (78) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (79) condicional_1 -> . decl_variavel
    (80) condicional_1 -> . decl_variavel condicional_1
    (81) condicional_1 -> . repeticao
    (82) condicional_1 -> . repeticao condicional_1
    (83) condicional_1 -> . RETURN exp PONTO_VIRG
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (86) repeticao -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (87) repeticao -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    IF              shift and go to state 158
    RETURN          shift and go to state 110
    CHAVE_ABRE      shift and go to state 66
    TYPEDEF         shift and go to state 9
    WHILE           shift and go to state 119
    FOR             shift and go to state 120
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    condicional_1                  shift and go to state 187
    body                           shift and go to state 188
    decl_variavel                  shift and go to state 115
    repeticao                      shift and go to state 116
    tipo                           shift and go to state 159

state 180

    (78) condicional_1 -> IF PARENT_ABRE exp . PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 189
    RECEBER         shift and go to state 69


state 181

    (86) repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 190

state 182

    (87) repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 191

state 183

    (88) for_log -> decl_variavel PONTO_VIRG .
    (91) for_log -> decl_variavel PONTO_VIRG . exp
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PARENT_FECHA    reduce using rule 88 (for_log -> decl_variavel PONTO_VIRG .)
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 192
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 184

    (89) for_log -> decl_variavel exp . PONTO_VIRG
    (90) for_log -> decl_variavel exp . PONTO_VIRG exp
    (36) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 193
    RECEBER         shift and go to state 69


state 185

    (94) for_log -> PONTO_VIRG PONTO_VIRG . exp
    (95) for_log -> PONTO_VIRG PONTO_VIRG .
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PARENT_FECHA    reduce using rule 95 (for_log -> PONTO_VIRG PONTO_VIRG .)
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 194
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 186

    (92) for_log -> PONTO_VIRG exp . PONTO_VIRG exp
    (93) for_log -> PONTO_VIRG exp . PONTO_VIRG
    (36) exp -> exp . RECEBER exp_1

    PONTO_VIRG      shift and go to state 195
    RECEBER         shift and go to state 69


state 187

    (78) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 . body ELSE condicional_1 body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 196

state 188

    (84) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body . comandos
    (85) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body . condicional_1 ELSE body condicional_2
    (32) comandos -> . condicional_1
    (33) comandos -> . condicional_2
    (34) comandos -> . exp PONTO_VIRG comandos
    (35) comandos -> . exp PONTO_VIRG
    (78) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (79) condicional_1 -> . decl_variavel
    (80) condicional_1 -> . decl_variavel condicional_1
    (81) condicional_1 -> . repeticao
    (82) condicional_1 -> . repeticao condicional_1
    (83) condicional_1 -> . RETURN exp PONTO_VIRG
    (84) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body comandos
    (85) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (86) repeticao -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (87) repeticao -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA

    IF              shift and go to state 114
    RETURN          shift and go to state 110
    TYPEDEF         shift and go to state 9
    WHILE           shift and go to state 119
    FOR             shift and go to state 120
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 118
    STRING          shift and go to state 12
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55

    exp                            shift and go to state 111
    comandos                       shift and go to state 197
    condicional_1                  shift and go to state 198
    condicional_2                  shift and go to state 113
    decl_variavel                  shift and go to state 115
    repeticao                      shift and go to state 116
    exp_1                          shift and go to state 38
    tipo                           shift and go to state 117
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54

state 189

    (78) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA . condicional_1 body ELSE condicional_1 body
    (78) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (79) condicional_1 -> . decl_variavel
    (80) condicional_1 -> . decl_variavel condicional_1
    (81) condicional_1 -> . repeticao
    (82) condicional_1 -> . repeticao condicional_1
    (83) condicional_1 -> . RETURN exp PONTO_VIRG
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (86) repeticao -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (87) repeticao -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    IF              shift and go to state 158
    RETURN          shift and go to state 110
    TYPEDEF         shift and go to state 9
    WHILE           shift and go to state 119
    FOR             shift and go to state 120
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    condicional_1                  shift and go to state 187
    decl_variavel                  shift and go to state 115
    repeticao                      shift and go to state 116
    tipo                           shift and go to state 159

state 190

    (86) repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .

    IF              reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    RETURN          reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    TYPEDEF         reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    WHILE           reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    FOR             reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    INT             reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    BOOL            reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    ID              reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    STRING          reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    CHAVE_ABRE      reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)
    ELSE            reduce using rule 86 (repeticao -> WHILE PARENT_ABRE exp PARENT_FECHA body .)


state 191

    (87) repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .

    IF              reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    RETURN          reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    TYPEDEF         reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    WHILE           reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    FOR             reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    INT             reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    BOOL            reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    ID              reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    STRING          reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    CHAVE_FECHA     reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    CHAVE_ABRE      reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)
    ELSE            reduce using rule 87 (repeticao -> FOR PARENT_ABRE for_log PARENT_FECHA body .)


state 192

    (91) for_log -> decl_variavel PONTO_VIRG exp .
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 91 (for_log -> decl_variavel PONTO_VIRG exp .)
    RECEBER         shift and go to state 69


state 193

    (89) for_log -> decl_variavel exp PONTO_VIRG .
    (90) for_log -> decl_variavel exp PONTO_VIRG . exp
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PARENT_FECHA    reduce using rule 89 (for_log -> decl_variavel exp PONTO_VIRG .)
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 199
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 194

    (94) for_log -> PONTO_VIRG PONTO_VIRG exp .
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 94 (for_log -> PONTO_VIRG PONTO_VIRG exp .)
    RECEBER         shift and go to state 69


state 195

    (92) for_log -> PONTO_VIRG exp PONTO_VIRG . exp
    (93) for_log -> PONTO_VIRG exp PONTO_VIRG .
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    PARENT_FECHA    reduce using rule 93 (for_log -> PONTO_VIRG exp PONTO_VIRG .)
    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 200
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 196

    (78) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body . ELSE condicional_1 body

    ELSE            shift and go to state 201


state 197

    (84) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body comandos .

    CHAVE_FECHA     reduce using rule 84 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body comandos .)
    RETURN          reduce using rule 84 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body comandos .)


state 198

    (85) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body condicional_1 . ELSE body condicional_2
    (32) comandos -> condicional_1 .

    ELSE            shift and go to state 202
    CHAVE_FECHA     reduce using rule 32 (comandos -> condicional_1 .)
    RETURN          reduce using rule 32 (comandos -> condicional_1 .)


state 199

    (90) for_log -> decl_variavel exp PONTO_VIRG exp .
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 90 (for_log -> decl_variavel exp PONTO_VIRG exp .)
    RECEBER         shift and go to state 69


state 200

    (92) for_log -> PONTO_VIRG exp PONTO_VIRG exp .
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    reduce using rule 92 (for_log -> PONTO_VIRG exp PONTO_VIRG exp .)
    RECEBER         shift and go to state 69


state 201

    (78) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE . condicional_1 body
    (78) condicional_1 -> . IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body
    (79) condicional_1 -> . decl_variavel
    (80) condicional_1 -> . decl_variavel condicional_1
    (81) condicional_1 -> . repeticao
    (82) condicional_1 -> . repeticao condicional_1
    (83) condicional_1 -> . RETURN exp PONTO_VIRG
    (19) decl_variavel -> . tipo ID PONTO_VIRG
    (20) decl_variavel -> . tipo ID RECEBER exp PONTO_VIRG
    (21) decl_variavel -> . tipo ID decl_variavel_n
    (22) decl_variavel -> . tipo ID RECEBER exp decl_variavel_n
    (23) decl_variavel -> . TYPEDEF tipo ID PONTO_VIRG
    (24) decl_variavel -> . TYPEDEF tipo ID decl_variavel_n
    (86) repeticao -> . WHILE PARENT_ABRE exp PARENT_FECHA body
    (87) repeticao -> . FOR PARENT_ABRE for_log PARENT_FECHA body
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    IF              shift and go to state 158
    RETURN          shift and go to state 110
    TYPEDEF         shift and go to state 9
    WHILE           shift and go to state 119
    FOR             shift and go to state 120
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    ID              shift and go to state 6
    STRING          shift and go to state 12

    condicional_1                  shift and go to state 203
    decl_variavel                  shift and go to state 115
    repeticao                      shift and go to state 116
    tipo                           shift and go to state 159

state 202

    (85) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE . body condicional_2
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 204

state 203

    (78) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 . body
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 205

state 204

    (85) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body . condicional_2
    (84) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body comandos
    (85) condicional_2 -> . IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2

    IF              shift and go to state 206

    condicional_2                  shift and go to state 207

state 205

    (78) condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body .

    CHAVE_FECHA     reduce using rule 78 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body .)
    RETURN          reduce using rule 78 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body .)
    CHAVE_ABRE      reduce using rule 78 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body .)
    ELSE            reduce using rule 78 (condicional_1 -> IF PARENT_ABRE exp PARENT_FECHA condicional_1 body ELSE condicional_1 body .)


state 206

    (84) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body comandos
    (85) condicional_2 -> IF . PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2

    PARENT_ABRE     shift and go to state 208


state 207

    (85) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2 .

    CHAVE_FECHA     reduce using rule 85 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2 .)
    RETURN          reduce using rule 85 (condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA body condicional_1 ELSE body condicional_2 .)


state 208

    (84) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body comandos
    (85) condicional_2 -> IF PARENT_ABRE . exp PARENT_FECHA body condicional_1 ELSE body condicional_2
    (36) exp -> . exp RECEBER exp_1
    (37) exp -> . exp_1
    (38) exp_1 -> . exp_1 OP_OU exp_2
    (39) exp_1 -> . exp_1 OR exp_2
    (40) exp_1 -> . exp_2
    (41) exp_2 -> . exp_2 OP_E exp_3
    (42) exp_2 -> . exp_2 AND exp_3
    (43) exp_2 -> . exp_3
    (44) exp_3 -> . exp_3 OP_OU_EX exp_4
    (45) exp_3 -> . exp_3 XOR exp_4
    (46) exp_3 -> . exp_4
    (47) exp_4 -> . exp_4 IGUAL exp_5
    (48) exp_4 -> . exp_4 DIFERENTE exp_5
    (49) exp_4 -> . exp_5
    (50) exp_5 -> . exp_5 MENOR_Q exp_6
    (51) exp_5 -> . exp_5 MAIOR_Q exp_6
    (52) exp_5 -> . exp_5 MAIOR_IGUAL exp_6
    (53) exp_5 -> . exp_5 MENOR_IGUAL exp_6
    (54) exp_5 -> . exp_6
    (55) exp_6 -> . exp_6 SOMA exp_7
    (56) exp_6 -> . exp_6 SUB exp_7
    (57) exp_6 -> . exp_7
    (58) exp_7 -> . exp_7 MULT exp_8
    (59) exp_7 -> . exp_7 DIV exp_8
    (60) exp_7 -> . exp_7 MODULO exp_8
    (61) exp_7 -> . exp_8
    (62) exp_8 -> . OP_NOT exp_9
    (63) exp_8 -> . NOT exp_9
    (64) exp_8 -> . exp_9 MAIS_MAIS
    (65) exp_8 -> . exp_9 MENOS_MENOS
    (66) exp_8 -> . SIZEOF PARENT_ABRE exp_9 PARENT_FECHA
    (67) exp_8 -> . exp_9
    (68) exp_9 -> . ID
    (69) exp_9 -> . INT_V
    (70) exp_9 -> . TRUE
    (71) exp_9 -> . FALSE
    (72) exp_9 -> . chamada_funcao
    (73) exp_9 -> . tipo
    (74) exp_9 -> . PARENT_ABRE exp PARENT_FECHA
    (75) chamada_funcao -> . ID PARENT_ABRE parametros PARENT_FECHA
    (76) chamada_funcao -> . ID PARENT_ABRE PARENT_FECHA
    (77) chamada_funcao -> . TYPEID PARENT_ABRE exp PARENT_FECHA
    (96) tipo -> . INT
    (97) tipo -> . BOOL
    (98) tipo -> . ID
    (99) tipo -> . STRING

    OP_NOT          shift and go to state 46
    NOT             shift and go to state 48
    SIZEOF          shift and go to state 49
    ID              shift and go to state 36
    INT_V           shift and go to state 51
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    PARENT_ABRE     shift and go to state 50
    TYPEID          shift and go to state 55
    INT             shift and go to state 10
    BOOL            shift and go to state 11
    STRING          shift and go to state 12

    exp                            shift and go to state 209
    exp_1                          shift and go to state 38
    exp_2                          shift and go to state 39
    exp_3                          shift and go to state 40
    exp_4                          shift and go to state 41
    exp_5                          shift and go to state 42
    exp_6                          shift and go to state 43
    exp_7                          shift and go to state 44
    exp_8                          shift and go to state 45
    exp_9                          shift and go to state 47
    chamada_funcao                 shift and go to state 54
    tipo                           shift and go to state 35

state 209

    (84) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body comandos
    (85) condicional_2 -> IF PARENT_ABRE exp . PARENT_FECHA body condicional_1 ELSE body condicional_2
    (36) exp -> exp . RECEBER exp_1

    PARENT_FECHA    shift and go to state 210
    RECEBER         shift and go to state 69


state 210

    (84) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body comandos
    (85) condicional_2 -> IF PARENT_ABRE exp PARENT_FECHA . body condicional_1 ELSE body condicional_2
    (28) body -> . CHAVE_ABRE comandos CHAVE_FECHA
    (29) body -> . CHAVE_ABRE CHAVE_FECHA
    (30) body -> . CHAVE_ABRE comandos RETURN exp CHAVE_FECHA
    (31) body -> . CHAVE_ABRE CHAVE_FECHA RETURN exp

    CHAVE_ABRE      shift and go to state 66

    body                           shift and go to state 188
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PARENT_ABRE in state 36 resolved as shift
WARNING: shift/reduce conflict for PARENT_ABRE in state 36 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 109 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 115 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 116 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 155 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (decl_variavel -> tipo ID PONTO_VIRG)
WARNING: rejected rule (decl_variavel_n -> PONTO_VIRG) in state 23
WARNING: reduce/reduce conflict in state 36 resolved using rule (exp_9 -> ID)
WARNING: rejected rule (tipo -> ID) in state 36
WARNING: reduce/reduce conflict in state 60 resolved using rule (decl_variavel -> TYPEDEF tipo ID PONTO_VIRG)
WARNING: rejected rule (decl_variavel_n -> PONTO_VIRG) in state 60
WARNING: reduce/reduce conflict in state 70 resolved using rule (decl_variavel -> tipo ID RECEBER exp PONTO_VIRG)
WARNING: rejected rule (decl_variavel_n -> PONTO_VIRG) in state 70
WARNING: reduce/reduce conflict in state 118 resolved using rule (exp_9 -> ID)
WARNING: rejected rule (tipo -> ID) in state 118
